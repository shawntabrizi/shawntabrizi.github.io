<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Shawn Tabrizi Blog</title>
        <link>https://shawntabrizi.com/blog/</link>
        <description>Shawn Tabrizi Blog</description>
        <lastBuildDate>Wed, 05 Feb 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The Future of Web3]]></title>
            <link>https://shawntabrizi.com/blog/2025/02/05/the-future-of-web3/</link>
            <guid>https://shawntabrizi.com/blog/2025/02/05/the-future-of-web3/</guid>
            <pubDate>Wed, 05 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Here are the slides I presented at the BUIDL HERE Conference in San Juan, Puerto Rico, which gives a insight into the meaning and direction of Web3 and Polkadot.]]></description>
            <content:encoded><![CDATA[<p>Here are the slides I presented at the <a href="https://www.prblockchain.org/buidl-here-2025/" target="_blank" rel="noopener noreferrer">BUIDL HERE Conference</a> in San Juan, Puerto Rico, which gives a insight into the meaning and direction of Web3 and Polkadot.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="presentation">Presentation<a href="https://shawntabrizi.com/blog/2025/02/05/the-future-of-web3/#presentation" class="hash-link" aria-label="Direct link to Presentation" title="Direct link to Presentation">​</a></h2>
<iframe src="/assets/presentations/the-future-of-web3.pdf" width="720px" height="480px"></iframe>
<p>You can find a link to <a href="https://docs.google.com/presentation/d/1nPDGVwVOMpdo103jitZjKx2tD-F54h4W4c7tqdV7h44/edit?usp=sharing" target="_blank" rel="noopener noreferrer">Google Slides here</a>.</p>
<p>Feel free to fork and use this presentation as your own.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="questions">Questions?<a href="https://shawntabrizi.com/blog/2025/02/05/the-future-of-web3/#questions" class="hash-link" aria-label="Direct link to Questions?" title="Direct link to Questions?">​</a></h2>
<p>Feel free to contact me with any questions you might have.</p>
<p>If you enjoy this content and want to continue to support me, take a look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a>.</p>]]></content:encoded>
            <category>polkadot</category>
            <category>cloud</category>
            <category>web3</category>
            <category>future</category>
        </item>
        <item>
            <title><![CDATA[Make Kusama Chaotic Again]]></title>
            <link>https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/</link>
            <guid>https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/</guid>
            <pubDate>Thu, 12 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, where I describe my vision for the Kusama network.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-for-the-kusama-network">This is a <a href="https://forum.polkadot.network/t/make-kusama-chaotic-again/11123" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, where I describe my vision for the Kusama network.<a href="https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/#this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-for-the-kusama-network" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-for-the-kusama-network" title="Direct link to this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-for-the-kusama-network">​</a></h5>
<p>I want to open this forum post as a place for coordination on efforts to bring life and vibes back to the Kusama ecosystem.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="facts">Facts<a href="https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/#facts" class="hash-link" aria-label="Direct link to Facts" title="Direct link to Facts">​</a></h2>
<ul>
<li>Kusama was one of the coolest things to be created in the Polkadot ecosystem.<!-- -->
<ul>
<li>Expect Chaos</li>
<li>Cypherpunk / Glitch Vibes: <a href="https://www.youtube.com/watch?v=bMegZaFfrzI" target="_blank" rel="noopener noreferrer">[ex1]</a> <a href="https://www.youtube.com/watch?v=cDHPFsPX9iA" target="_blank" rel="noopener noreferrer">[ex2]</a> <a href="https://www.youtube.com/watch?v=oDN9ClmGqkc" target="_blank" rel="noopener noreferrer">[ex3]</a></li>
<li>Pushing the Limits (validators, spammening, parachains, etc...)</li>
</ul>
</li>
<li>Kusama plays a fundamental role in the security and safety of the Polkadot Network.</li>
<li>Making Kusama important and relevant for the world is good for Polkadot.</li>
<li>There are things Kusama can do that Polkadot cannot, both physically and spiritually.</li>
</ul>
<iframe width="560" height="315" src="https://www.youtube.com/embed/bMegZaFfrzI?si=KFfAyVo0Nacw3joQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hypothesis">Hypothesis<a href="https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/#hypothesis" class="hash-link" aria-label="Direct link to Hypothesis" title="Direct link to Hypothesis">​</a></h2>
<ul>
<li>Kusama has died down recently:<!-- -->
<ul>
<li>Polkadot has been really stable recently, causing people to forget how important Kusama is.</li>
<li>Kusama lacks a fundamentally unique selling point and feature set.</li>
<li>Kusama lacks a fundamentally unique narrative and theme which is independent from Polkadot.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="potential-solution">Potential Solution<a href="https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/#potential-solution" class="hash-link" aria-label="Direct link to Potential Solution" title="Direct link to Potential Solution">​</a></h2>
<p>Make Kusama Chaotic Again.</p>
<ul>
<li>
<p>What do we mean by this?</p>
<p>Let's make Kusama the number one home for the original Cypherpunk movement:</p>
<ul>
<li>Privacy-focused</li>
<li>Fully and Truly Decentralized</li>
<li>Self-Sovereign</li>
<li>Cryptography Pioneers</li>
<li>Open, Public Communication</li>
<li>Anti-Censorship</li>
<li>Technological Transparency</li>
<li>Activist Mindset</li>
<li>Anonymity Valuing</li>
<li>DIY Ethos</li>
<li>Freedom-Preserving</li>
</ul>
</li>
<li>
<p>How can we do this?</p>
<ul>
<li>Bring ZK primitives to Kusama.<!-- -->
<ul>
<li>Support low-level host functions to execute ZK functions fast and efficiently.</li>
<li>Expose such functions through the upcoming Kusama Hub contracts platform.</li>
<li>Maybe a community seeded <a href="https://a16zcrypto.com/posts/article/on-chain-trusted-setup-ceremony/" target="_blank" rel="noopener noreferrer">"Trusted Setup Ceremony"</a></li>
</ul>
</li>
<li>Experiment with better / more resilient forms of on-chain randomness generation.</li>
<li>Create a home for Privacy.<!-- -->
<ul>
<li>Privacy Preserving Stablecoin: Kash</li>
<li>Privacy Creating Services (will remain unnamed)</li>
<li>Privacy Preserving Voting Systems</li>
</ul>
</li>
<li>Post-Quantum Signatures and Experiments</li>
<li>Create a Kusama community manifesto and vision<!-- -->
<ul>
<li>Be the Web3 Cloud for the <a href="https://github.com/darkrenaissance" target="_blank" rel="noopener noreferrer">"Dark Renaissance"</a>:<!-- -->
<ul>
<li><a href="https://github.com/darkrenaissance/darkfi" target="_blank" rel="noopener noreferrer">DarkFi</a></li>
<li>ZCash</li>
<li>Monero</li>
<li>Prediction Markets</li>
<li>True, unapologetic DEXs</li>
<li>P2P Markets</li>
<li>etc...</li>
</ul>
</li>
<li>Enshrine the cypherpunk movement and spirit.</li>
<li>Describe how Kusama and Polkadot differ, yet are still important for one another.</li>
<li>Ensure that Kusama treasury allocates and funds projects in this nature.</li>
</ul>
</li>
<li>What else? Comment in this thread.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="action-items">Action Items<a href="https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/#action-items" class="hash-link" aria-label="Direct link to Action Items" title="Direct link to Action Items">​</a></h2>
<p>Such a future does not create itself. We must create alignment and a community of people who will steward this future forward.</p>
<ul>
<li>Discussion: Are there enough people aligned within the Kusama community to this narrative?</li>
<li>Formation: Who is willing to step up to lead such efforts, and create groups for people to work together on this?</li>
<li>Adoption: Who can represent the Kusama technology stack to other like-minded projects and individuals who may want to participate?</li>
<li>Execution: How can we reclaim access to the Kusama treasury, and allocate funds for this specifically? Start with a bounty?</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="related">Related<a href="https://shawntabrizi.com/blog/2024/12/12/make-kusama-chaotic-again/#related" class="hash-link" aria-label="Direct link to Related" title="Direct link to Related">​</a></h2>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ziXIjY5MeVo?si=hDTQAzPi1r5saxm7" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<p>Continue the conversation further in the <a href="https://forum.polkadot.network/t/make-kusama-chaotic-again/11123" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>.</p>]]></content:encoded>
            <category>kusama</category>
            <category>zero-knowledge</category>
            <category>cypherpunk</category>
            <category>privacy</category>
        </item>
        <item>
            <title><![CDATA[The Polkadot Cloud]]></title>
            <link>https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/</link>
            <guid>https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/</guid>
            <pubDate>Wed, 30 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, where I describe my vision of the Polkadot Cloud.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-of-the-polkadot-cloud">This is a <a href="https://forum.polkadot.network/t/the-polkadot-cloud/10670" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, where I describe my vision of the Polkadot Cloud.<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-of-the-polkadot-cloud" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-of-the-polkadot-cloud" title="Direct link to this-is-a-repost-from-the-polkadot-forum-where-i-describe-my-vision-of-the-polkadot-cloud">​</a></h5>
<p>I think it's time to open a thread dedicated to the ideas which have been spreading like wildfire (very much by intention) around the Polkadot Hub and Polkadot Cloud.</p>
<p>First, before we even get started, it is important to note that this is just a <strong>discussion of ideas</strong>. Nothing here is locked in yet, official, or anything like that. The point of these conversations is to get community alignment of ideas, terminology, vision, and direction.</p>
<p>The phrase I have been using is that Polkadot is like a bunch of cats in a room, totally doing their own thing. We need a laser pointer for us all to focus on a long-term vision, and to move together towards that goal.</p>
<p>Such a vision should allow us to:</p>
<ul>
<li>make better decisions as a community</li>
<li>better represent Polkadot outside of our community</li>
<li>ensure that we are building things that are relevant for our needs</li>
</ul>
<p>What is also important is that our vision is not made up. It must be something we can actually achieve, and that we have ideas to support.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-polkadot">What is Polkadot?<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#what-is-polkadot" class="hash-link" aria-label="Direct link to What is Polkadot?" title="Direct link to What is Polkadot?">​</a></h2>
<p>Polkadot is not a blockchain. Polkadot of course, has a blockchain, and a token, but the meaning of Polkadot extends far beyond that.</p>
<p><strong>Polkadot is a vision toward a world with less trust and more truth.</strong></p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/cloud1-5f0811bdde160c03321a79084e87a050.jpeg" width="1380" height="768" class="img_ev3q"></p>
<p>This is the friendly way to tell people that we are trying to build and innovate with <strong>Web3</strong> principles.</p>
<p>I think if you look at all that Polkadot has done in the past, is doing now, and will do into the future, this single vision will permeate every decision and action we take.</p>
<p>This vision will likely never change, nor should it. I think Polkadot is defined by the journey we take toward this vision.</p>
<p>Polkadot has a <strong>mission</strong>, which describes the direction we go in achieving that vision. Our mission <strong>can change</strong>, but practically, changes in our mission should only occur over long periods of time. Only when what is needed to reach our vision changes, or we have achieved our current mission.</p>
<p>We can describe Polkadot's mission up until now and into the near future:</p>
<p><strong>Polkadot’s mission is to provide a scalable, secure, and resilient platform for Web3 applications and services.</strong></p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/cloud2-878294df4e8efcc080c281efc81f5b0c.jpeg" width="1380" height="768" class="img_ev3q"></p>
<p>An image to put in your mind is:</p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/cloud3-6232d0c037c0ac304404cc76ee774b7f.jpeg" width="1380" height="768" class="img_ev3q"></p>
<p>That is to say, Amazon Web Services has fundamentally changed the internet today by making it <strong>cheap, easy, and scalable</strong> to launch Web2 applications and services into the cloud.</p>
<p>Polkadot's current mission is to do the same thing, but for Web3 services. We believe this is the way that the Polkadot ecosystem can currently bring this vision of a world with less trust and more truth to the world, and while we acknowledge achieving this vision requires more than just technology, we think it is the first primitive the world needs to get started.</p>
<p>So what does it mean to have a vision towards less trust and more truth?</p>
<p>To answer this, we must ask "What is Web3?".</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-web3">What is Web3?<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#what-is-web3" class="hash-link" aria-label="Direct link to What is Web3?" title="Direct link to What is Web3?">​</a></h3>
<p>Web3 is a fundamental shift of removing trust from Web2, the technology stack that we currently use to power the internet.</p>
<p>In my recent presentation, I represented this as a difference in <em>resilience</em>.</p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/cloud4-4229c91b3eb6028e041f047e71f6673a.jpeg" width="1380" height="768" class="img_ev3q"></p>
<p>But in fact, there are other principles of Web3 we should not forget:</p>
<p>As quoted by Gav:</p>
<blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="driving-factors-and-web3-maxims">Driving Factors and Web3 Maxims<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#driving-factors-and-web3-maxims" class="hash-link" aria-label="Direct link to Driving Factors and Web3 Maxims" title="Direct link to Driving Factors and Web3 Maxims">​</a></h4>
<ul>
<li>Resilience</li>
<li>Generality</li>
<li>Performance</li>
<li>Coherency</li>
<li>Accessibility</li>
</ul>
</blockquote>
<p>I would also like to include the <a href="https://www.youtube.com/watch?v=qlAhXo-d-64" target="_blank" rel="noopener noreferrer">5 pillars of open blockchains from Andreas Antonopoulos</a>, which was certainly the predecessor to Web3 ideologies:</p>
<blockquote>
<ul>
<li>Open</li>
<li>Public</li>
<li>Borderless</li>
<li>Neutral</li>
<li>Censorship Resistant</li>
</ul>
</blockquote>
<p>This post is probably not best suited to be the introduction into the principles and philosophies of Web3.</p>
<p>If there are nice posts which consolidate and teach the ideas of Web3 which can be linked here, please feel free to post them in this thread. Otherwise, perhaps look at the old youtube videos of Gav or other Web3 leaders about their vision of the space.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="polkadots-products">Polkadot's Products<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#polkadots-products" class="hash-link" aria-label="Direct link to Polkadot's Products" title="Direct link to Polkadot's Products">​</a></h2>
<p>So we have established our vision, and have a clear mission to bring technologies into the world which can power Web3 applications and services.</p>
<p>How does this actually manifest into products?</p>
<p>Well my perspective is that Polkadot has always been building toward two products, which attempt to satisfy this mission:</p>
<ul>
<li>The Polkadot Cloud</li>
<li>The Polkadot Hub</li>
</ul>
<blockquote>
<p>NOTE: It is important at this point to not get too attached to these specific names. Many resonate with the Polkadot Cloud, but some have opinions about the "Polkadot Hub", and this is the time to discuss those opinions and come to a consensus. I personally prefer these two names, and would be happy to have those discussions with anyone here in this thread.</p>
</blockquote>
<p>Unfortunately the history of developing the Polkadot, we had not clearly defined these two products. But it does not change the fact that if we think about what we have been building so far and the vision we are going toward, we have ALWAYS been building these two products.</p>
<p>So, what is the Polkadot Cloud and the Polkadot Hub?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-polkadot-cloud">The Polkadot Cloud<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#the-polkadot-cloud" class="hash-link" aria-label="Direct link to The Polkadot Cloud" title="Direct link to The Polkadot Cloud">​</a></h3>
<p>The Polkadot Cloud is a secure, scalable, and resilient platform for Web3 applications and services.</p>
<p>The Polkadot Cloud <strong>is</strong> our current mission.</p>
<p>If you were to make a sales pitch for the Polkadot Cloud, it might look something like this:</p>
<blockquote>
<p>The Polkadot Cloud is a platform for Web3 applications and services.</p>
<p>On the Polkadot Cloud, we provide services with high throughput, native interoperability, and shared security. Our cloud platform is elastic, dynamic and multi-core.</p>
<p>With over 100 execution cores we are able to achieve 150,000 transactions per second across the Cloud, and over 150 MB/s data availability throughput!</p>
<p>The Polkadot Cloud offers a number of different Web3 Services such as:</p>
<ul>
<li>Cloud Execution Service</li>
<li>Settlement / Finality Service</li>
<li>Data Availability Service</li>
<li>Object Storage Service</li>
<li>Blockchain Hosting Service</li>
<li>and more!</li>
</ul>
<p>All of these services work together seamlessly to create an all-in-one platform for deploying your app. We provide everything you need, so you can focus on what you are building.</p>
<p>Using the Polkadot Cloud, you are able to deploy any kind of Web3 application or service cheap, easy, and at scale.</p>
</blockquote>
<p>Note here that the Polkadot Cloud represents all that we have accomplished so far, and even looks into what we want to do in the future.</p>
<p>It also breaks down the various features of Polkadot into separate services that are offered and bundled by the Cloud. And this better represents what you can actually do, rather than what we have currently built.</p>
<p>There are teams already experimenting with using our individual services like <a href="https://github.com/thrumdev/blobs" target="_blank" rel="noopener noreferrer">data availability</a> or <a href="https://github.com/polkadot-fellows/RFCs/pull/127" target="_blank" rel="noopener noreferrer">cloud execution</a> to secure rollups on other ecosystems. We could be part of every "modular blockchain" story. It's just that we have been focused on building an all-in-one solution.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="history-of-the-polkadot-cloud">History of the Polkadot Cloud<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#history-of-the-polkadot-cloud" class="hash-link" aria-label="Direct link to History of the Polkadot Cloud" title="Direct link to History of the Polkadot Cloud">​</a></h4>
<p>With this framing of the Polkadot Cloud, I think we are able to actually look back at history, and define a clear story of what we have been building so far.</p>
<p>Not to make up history, but to re-frame what we've done.</p>
<ul>
<li>Polkadot Cloud - Genesis: May 2020</li>
<li>Polkadot Cloud - Milestone I (Parachains): November 2021<!-- -->
<ul>
<li>First Cloud Services Deploy: December 2021</li>
</ul>
</li>
<li>Polkadot Cloud - Milestone II (Elastic): October 2024</li>
<li>Polkadot Cloud - Milestone III (JAM): TBD</li>
</ul>
<p>So really, the initial Polkadot launch was really around creating an all-in-one <strong>blockchain hosting service</strong> for other blockchains on the Polkadot Cloud.</p>
<p>Initially that blockchain hosting service was very simple in how it created, allocated, and used blockspace.</p>
<p>Our work since the launch of Polkadot have been to make our hosting service more agile, elastic, and flexible. This is what we previously called "Polkadot 2.0", but it really isn't a new product at all! It is an iteration of the Polkadot Cloud vision.</p>
<p>Just like JAM is also not a brand new idea, even though the architecture of the Polkadot Cloud will change significantly from it. It is yet another iteration on the mission to create the best platform for Web3 applications and services.</p>
<p>With the third milestone of the Polkadot Cloud (codename JAM), we are looking to extend functionality of our Web3 Cloud platform to support even applications and services which are NOT blockchains.</p>
<p>I think this kind of positioning helps explain to the world what the heck is going on with things like JAM, which we have really struggled to explain in respect to the existing Polkadot Cloud.</p>
<p>And certainly there will be milestone 4, 5, 6, etc... The development and improvement of the Polkadot Cloud will always continue. It is wrong to look at the development of Polkadot as "building new products". The product is the same, it is just iteratively (or sometimes radically) getting better.</p>
<p>The question you need to ask when digging into technical development, is:</p>
<blockquote>
<p>"How does this improve the Polkadot Cloud?".</p>
</blockquote>
<p>This is what we need to be communicating.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="comparisons-to-web2-clouds">Comparisons to Web2 Clouds<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#comparisons-to-web2-clouds" class="hash-link" aria-label="Direct link to Comparisons to Web2 Clouds" title="Direct link to Comparisons to Web2 Clouds">​</a></h4>
<p>I think that this vision of the Polkadot Cloud allows us to evaluate what we have been building, and where we should be building toward. Thankfully, we have large businesses like Amazon, Google, and Microsoft who have all built Web2 clouds, of which I argue we are not that different from an architectural standpoint.</p>
<p>For example, look at the service offerings for Amazon:</p>
<ul>
<li><a href="https://aws.amazon.com/ec2/" target="_blank" rel="noopener noreferrer">Amazon EC2</a>
<ul>
<li>EC2 = Elastic Compute Cloud</li>
<li>"Amazon EC2 is AWS's service that provides secure, scalable computing capacity in the cloud."</li>
<li>"Reliable and scalable infrastructure on-demand, with 99.99% availability SLA"</li>
<li>"purchase model to help you best match the needs of your workload"</li>
</ul>
</li>
<li><a href="https://aws.amazon.com/s3/" target="_blank" rel="noopener noreferrer">Amazon S3</a>
<ul>
<li>S3 = Simple Storage Service</li>
<li>"Amazon S3 is an object storage service offering industry-leading scalability, data availability, security, and performance."</li>
<li>Benefits:<!-- -->
<ul>
<li>Scalability</li>
<li>Durability and availability</li>
<li>Security and data protection</li>
<li>Lowest price and highest performance</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://aws.amazon.com/lambda/" target="_blank" rel="noopener noreferrer">AWS Lambda</a>
<ul>
<li>"Run code without thinking about servers or clusters"</li>
<li>"AWS Lambda is a serverless computing service that runs your code in response to events without requiring provisioning or management of servers. It automatically scales compute resources and you pay only for the compute time used. The main benefits are no server management, automatic scaling, pay-per-use billing, and performance optimization options."</li>
</ul>
</li>
</ul>
<p>Doesn't this draw a lot of parallels to:</p>
<ul>
<li>Our execution service</li>
<li>Our data availability service</li>
<li>The proposed <a href="https://github.com/polkadot-fellows/RFCs/blob/ba59c9f4675e072603dd6a6c6dccdcd9c7d1524a/text/coreplay.md" target="_blank" rel="noopener noreferrer">"CorePlay" service</a></li>
</ul>
<p>Take a look at the <a href="https://cloud.google.com/" target="_blank" rel="noopener noreferrer">Google Cloud</a> landing page. Couldn't you see this structure and style being an effective way to explain and sell the Polkadot Cloud?</p>
<p>Imagine all that we can learn about creating a better Web3 cloud for the world by really framing ourselves as a product architected similar to the traditional cloud services we want to replace.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="a-10-year-vision-of-the-polkadot-cloud">A "10 Year" Vision of the Polkadot Cloud<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#a-10-year-vision-of-the-polkadot-cloud" class="hash-link" aria-label="Direct link to A &quot;10 Year&quot; Vision of the Polkadot Cloud" title="Direct link to A &quot;10 Year&quot; Vision of the Polkadot Cloud">​</a></h4>
<p>What is important about this broad narrative for the Polkadot Cloud, is that it allows us to not be limited by what we are doing today, and think about what we could be building tomorrow.</p>
<p>Many teams around the Polkadot ecosystem are looking for the right ideas to support, and decentralized organizations like the Polkadot DAO have a hard time understanding if we really need some of those things.</p>
<p>With the Polkadot Cloud mentality, we can easily ask the question: "How are you looking to improve the experience for applications and services using the Polkadot Cloud?"</p>
<p>We can also get ourselves out of the gutter of thinking we are just a blockchain product. The Web3 Cloud will have many services that are NOT blockchain based! (or at least not directly related to Parachains)</p>
<p>For example:</p>
<ul>
<li>Mix Nets (a la <a href="https://nymtech.net/" target="_blank" rel="noopener noreferrer">Nym</a>)</li>
<li>Privacy Layers (a la <a href="https://z.cash/" target="_blank" rel="noopener noreferrer">ZCash</a>)</li>
<li>Oracle Services (a la <a href="https://chain.link/" target="_blank" rel="noopener noreferrer">Chainlink</a>)</li>
<li>P2P Communication Services (a la <a href="https://github.com/ethereum/whisper" target="_blank" rel="noopener noreferrer">Whisper</a>)</li>
<li>Persistent File Storage Services (a la <a href="https://ipfs.tech/" target="_blank" rel="noopener noreferrer">IPFS</a>)</li>
</ul>
<p>It's really not crazy to think that the Polkadot Cloud would want to build or directly integrate these services into our offerings and how such services will bring better experiences to our users, and allow them to build more secure, scalable, and resilient Web3 applications and services.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-polkadot-hub">The Polkadot Hub<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#the-polkadot-hub" class="hash-link" aria-label="Direct link to The Polkadot Hub" title="Direct link to The Polkadot Hub">​</a></h3>
<p>The Polkadot Hub is the home for the Polkadot community, the DOT token, and other tokens across the Polkadot ecosystem.</p>
<p>If you were to make a sales pitch for the Polkadot Hub, it might look something like this:</p>
<blockquote>
<p>The Polkadot Hub is a Layer 1 blockchain that supports smart contracts and is deployed on and secured by the Polkadot Cloud.</p>
<p>The Polkadot Hub has native features such as:</p>
<ul>
<li>Smart Contracts</li>
<li>Staking</li>
<li>Governance</li>
<li>Treasury</li>
<li>Stablecoins</li>
<li>Token Registry</li>
<li>etc...</li>
</ul>
<p>The Polkadot Hub uses a Ethereum-compatible smart contract platform. This allows anyone to add their own programmable layers to Polkadot.</p>
<p>The purpose of the Polkadot Hub is to bring coordination, funding, and direction for the development and future of the Polkadot Cloud.</p>
</blockquote>
<p>So the primary vibe of the Polkadot Hub should be <strong>community</strong>.</p>
<p>Every part of the Polkadot Hub is about tapping into the Polkadot community, and using them as a coordination machine bringing decentralization to the Polkadot Cloud.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="history-of-the-polkadot-hub">History of the Polkadot Hub<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#history-of-the-polkadot-hub" class="hash-link" aria-label="Direct link to History of the Polkadot Hub" title="Direct link to History of the Polkadot Hub">​</a></h4>
<p>Our mission to create a platform for Web3 applications and services necessitated the creation of the Polkadot Hub.</p>
<p>You cannot have a decentralized platform without having a decentralized set of decision makers. In many ways, the Polkadot Hub is what separates the Polkadot Cloud from products which are "blockchain" or "web3" only by name.</p>
<p>So let's again re-frame our history with this product in mind:</p>
<ul>
<li>Features launched on the Polkadot Cloud, but no Hub yet</li>
<li>Creation of the Polkadot Hub, with Token Registry (Asset Hub)</li>
<li>Proper Launch of the Polkadot Hub with Ethereum-compatible smart contracts (TBD, see launch details below)</li>
<li>Transition Staking, Governance, and Treasury to the Polkadot Hub (TBD)</li>
</ul>
<p>Since the genesis of the Polkadot Cloud, features of the Polkadot Hub have always been present. But these features lived directly in the Cloud, and were initially built this way because the Polkadot Cloud did not have its Hosting Service ready to use yet.</p>
<p>A number of projects have been ongoing, which would now be captured by the idea of the Polkadot Hub:</p>
<ul>
<li>The Asset Hub<!-- -->
<ul>
<li>Token Registry</li>
<li>Pay fees with any token</li>
<li>Hold tokens without DOT</li>
</ul>
</li>
<li>The Minimal Relay Chain</li>
<li>Smart Contracts on Polkadot</li>
<li>etc...</li>
</ul>
<p>Again, these projects were mostly being done in parallel, but without a clear vision of the goal and how they will all work together to paint a cohesive story. The Polkadot Hub brings a vision of what we are trying to build, and gives meaning to these various features.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="launch-of-the-polkadot-hub">Launch of the Polkadot Hub<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#launch-of-the-polkadot-hub" class="hash-link" aria-label="Direct link to Launch of the Polkadot Hub" title="Direct link to Launch of the Polkadot Hub">​</a></h4>
<p>The Polkadot Hub is an opportunity to "relaunch" the Polkadot brand.</p>
<p>For the first time, Polkadot will be open season for any developers, tinkerers, or builders to be able to quickly and easily deploy applications and contracts to the Polkadot Ecosystem. You no longer need to be a "cloud developer" in order to use Polkadot. Making smart contracts is easy, and thus building in Polkadot is easy.</p>
<p>Imagine messaging like the following:</p>
<blockquote>
<p>Polkadot is proud to announce the Polkadot Hub.</p>
<p>The Polkadot Hub is a new L1 blockchain running on the Polkadot Cloud, and a launchpad for builders to tap into over 6 billion dollars in tokens across the Polkadot ecosystem.</p>
<p>The Polkadot Hub will be Ethereum-compatible, meaning you can deploy your favorite Solidity smart contracts directly to the Polkadot ecosystem.</p>
<p>The Polkadot Hub has native access to stable coins like USDC and USDT, as well as all of the tokens from the Polkadot ecosystem. The Polkadot Hub also has trustless bridges to Ethereum and other top blockchain ecosystems, meaning that you have worry-free access to essentially any token within the crypto market.</p>
<p>On the Polkadot Hub, you can pay transaction fees with any of these tokens, meaning you can even hold and use stablecoins without needing any other token!</p>
<p>The Polkadot Hub is a brand new, untapped resource for explosive product growth by tapping into one of the largest developer communities in the blockchain ecosystem.</p>
<p>With millions of users at your fingertips, there is no better place to launch than the Polkadot Hub. You can have your <strong>launchpad ready In: 3, 2, 1...</strong></p>
</blockquote>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="the-launchpad">The Launchpad<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#the-launchpad" class="hash-link" aria-label="Direct link to The Launchpad" title="Direct link to The Launchpad">​</a></h5>
<p>A relaunch is not something that can be done without planning.</p>
<p>I would expect a number of specific initiatives to make the Polkadot Hub feel new, exciting, and like a proper launchpad for the next big projects in Web3.</p>
<ul>
<li>
<p>The Polkadot Wallet</p>
<p>The goal is to have a clear and concise story around how users onboard into our ecosystem, and use applications and services across the Polkadot Cloud.</p>
<ul>
<li>It should have fiat onboarding flows.</li>
<li>It should allow you to purchase in the real world with your Polkadot ecosystem tokens.</li>
<li>It should give you a mobile gateway into the hub.</li>
<li>It should allow you to "log in" to any Polkadot Ecosystem application or service.<!-- -->
<ul>
<li>With a standard like Wallet Connect.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>"Polkadot Bundle" Token Sale</p>
<p>The goal is encourage people to buy and use Polkadot ecosystem tokens, thereby rebooting the ecosystem.</p>
<ul>
<li>A new token sale coming from the Polkadot Treasury.</li>
<li>Sold at the market price of the DOT token.</li>
<li>"Bundled" with ecosystem tokens which are provided by ecosystem teams.<!-- -->
<ul>
<li>Some amount of compensation from the treasury can be used.</li>
<li>Many should contribute just based on it being a bootstrapping event.</li>
<li>Very much "airdrop" vibes.</li>
</ul>
</li>
<li>Fully locked for 1 year. Fast vesting period afterward.<!-- -->
<ul>
<li>But with the ability to participate or spend the tokens on the various Polkadot Services.</li>
</ul>
</li>
<li>Sold tokens go back to the treasury as stables, or to purchase more ecosystem tokens to include with the bundle.</li>
</ul>
</li>
<li>
<p>Contract Builder Rewards</p>
<p>The goal is to incentivize contract creators to deploy on the Polkadot Hub, and also to iterate and design high quality contracts for the ecosystem. Basically, users that deploy smart contracts to the Polkadot Hub, should get a fraction of the gas fees used to call that contract. So currently 20% go to block producer, and 80% go to the treasury, we could probably shift 20% to 40% from the treasury directly to the contract creator, specifically when users call smart contracts. This can make it profitable to deploy and maintain contracts in the Polkadot Hub, without creating possibilities to "game" the system, since it is all coming from fees anyway. Also it helps normalize contracts which do not have "hidden fees" built into the contract code.</p>
</li>
<li>
<p>Micro-grants</p>
<p>The goal is to get a bunch of people building in the Polkadot Hub, bringing and executing new ideas.</p>
<ul>
<li>Bounties for different application verticals:<!-- -->
<ul>
<li>DAO templates for opengov</li>
<li>staking pools templates</li>
<li>account abstractions (on top of our native abstractions)</li>
<li>cross chain messaging templates</li>
<li>memecoin communities</li>
<li>on-chain games</li>
<li>etc..</li>
</ul>
</li>
<li>Rewards to the top teams in each vertical driving organic growth, and sustained usage for 6 months, as reviewed by a DAO / curator set.</li>
</ul>
</li>
<li>
<p>Participation Lotteries</p>
<p>The goal is to drive engagement of the Hub by end users.</p>
<ul>
<li>Imagine some percentage of all transaction fees get funneled into a special smart contract which holds weekly lotteries.</li>
<li>You receive tickets from the lottery by submitting proofs that you have interacted with the Polkadot Hub.<!-- -->
<ul>
<li>Any interaction where you Pay a fee should qualify, for a ticket.</li>
<li>Users get a proportional number of tickets to the fees they have paid.</li>
<li>This should not be gameable or exploitable.</li>
</ul>
</li>
<li>The contract selects a winner at random from among the tickets.<!-- -->
<ul>
<li>Can't really expect the lottery to be lifechanging, but is certainly a non-zero incentive.</li>
<li>This adds some positive EV to simply using the Polkadot Hub!</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Hackathons and Education</p>
<p>The goal is to radically shift entry level hackathons and education from the Polkadot Cloud (as it is today) to the Polkadot Hub.</p>
<ul>
<li>Create and work with teams to build new entry level educational material about the Polkadot Hub.</li>
<li>Tutorials, videos, guides, templates, etc...</li>
<li>Hackathon kits, which can be deployed by around the world for their local communities.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="journey-to-scale">Journey To Scale<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#journey-to-scale" class="hash-link" aria-label="Direct link to Journey To Scale" title="Direct link to Journey To Scale">​</a></h4>
<p>The Polkadot Hub will now be an entry point for developers into the Polkadot ecosystem. But we know that the true power of Polkadot lies in the Polkadot Cloud.</p>
<p>We must have a story for how we scale these developers and teams from the Hub to the Cloud.</p>
<p>For this, there are two components:</p>
<ul>
<li>Contract Hosting Service</li>
<li>Universal Tokens</li>
</ul>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="contract-hosting-service">Contract Hosting Service<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#contract-hosting-service" class="hash-link" aria-label="Direct link to Contract Hosting Service" title="Direct link to Contract Hosting Service">​</a></h5>
<p>This was previously known as CorePlay.</p>
<p>I wrote some details here: <a href="https://forum.polkadot.network/t/the-polkadot-cloud/10670/39?u=shawntabrizi" target="_blank" rel="noopener noreferrer">https://forum.polkadot.network/t/the-polkadot-cloud/10670/39?u=shawntabrizi</a></p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="universal-tokens">Universal Tokens<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#universal-tokens" class="hash-link" aria-label="Direct link to Universal Tokens" title="Direct link to Universal Tokens">​</a></h5>
<p>Universal tokens is the idea on how we should support tokens in the Polkadot ecosystem through the Polkadot Hub. As noted above, one of the native features of the Polkadot Hub is a token registry system.</p>
<p>Today, when new Cloud Services launch, they mint their own token local to their blockchain, and then transfer them over to the hub for interoperability.</p>
<p>In smart contract ecosystems, they mint tokens in storage specific to smart contracts.</p>
<p>Also, unfortunately, the DOT token is not treated the same as other tokens on the Polkadot Hub today.</p>
<p>If we allowed this to continue, the Polkadot Hub would have like 4 different kinds tokens across the product!</p>
<p>Universal Tokens is a vision toward having all tokens in the Polkadot Ecosystem natively minted and managed on the Polkadot Hub. Ownership of those tokens can then be assigned to contracts on the Hub or services on the Cloud.</p>
<p>What is key here is that Universal Tokens will allow a seamless pathway to transition ownership of the tokens from a contract to a cloud service. So even without a Unified Programming Language, end users of a product in the Polkadot ecosystem, will feel no pain at all when a transition like this happens. And in the scenario where we do have a Unified Programming Language, it might literally be seamless.</p>
<p>The other key feature of Universal Tokens is universal compatibility! If you launch your token natively on the Polkadot Hub, any contract or cloud service should be able to recognize and interact with that token in a standard way.</p>
<p>Imagine getting an NFT from a gaming service in the Polkadot Cloud, and then easily using or trading it on the Polkadot Hub, thanks to the fact that it is built using the Universal Token standard.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="a-10-year-vision-of-the-polkadot-hub">A "10 Year" Vision of the Polkadot Hub<a href="https://shawntabrizi.com/blog/2024/10/30/the-polkadot-cloud/#a-10-year-vision-of-the-polkadot-hub" class="hash-link" aria-label="Direct link to A &quot;10 Year&quot; Vision of the Polkadot Hub" title="Direct link to A &quot;10 Year&quot; Vision of the Polkadot Hub">​</a></h4>
<p>This is where I will put some ideas in your head about the immense vision of what the Polkadot Hub could be. Not that this is what SHOULD happen, but it is perfectly possible given the mission of the Polkadot Hub.</p>
<p>If we are imagining a community centered product, it is easy to see how it could manifest similar to Web2 social networks. Why not when you open up the "Polkadot Hub", it could land you on a page similar to Facebook?</p>
<p>Imagine seeing an activity feed of everything going on in the Polkadot Hub and broader Polkadot Ecosystem:</p>
<ul>
<li>What proposals are currently being discussed.</li>
<li>Latest announcements / features.</li>
<li>Technical discussions / RFCs.</li>
<li>Collectives reporting their activity.</li>
<li>Ambassadors providing proof of their work.</li>
<li>Memes and marketing.</li>
<li>Education and tutorials.</li>
<li>etc...</li>
</ul>
<p>Now imagine in your head the left sidebar:</p>
<ul>
<li>Groups: The various DAOs / chat groups you are a part of.</li>
<li>Events: The next in-person or online meetups for the Polkadot ecosystem.</li>
<li>Marketplace: A place to use cryptocurrency trade for digital or real-world goods!</li>
<li>Finance: A home for all things DeFi.</li>
<li>Apps: Gateways to other applications and services hosted on the Polkadot Cloud.</li>
<li>Games: A portal into Web3 enabled games and communities.</li>
</ul>
<p>Imagine in the top right, clicking your avatar, and managing your settings / profile:</p>
<ul>
<li>The accounts, wallets, and balances you have control of.</li>
<li>Various account abstraction settings, like multisigs and proxies.</li>
<li>Contracts you have deployed and their activity (users, revenue)</li>
<li>Posts you have made in the Hub, and revenue generated from engagements.</li>
<li>Your public identity.</li>
<li>Your private individuality proofs.</li>
<li>etc...</li>
</ul>
<p>Finally, a cohesive and familiar experience for all the craziness we currently feel in the space.</p>
<p>And all of these features would be built with the principals of Web3! There is not a single team which builds this whole portal. It is a collection of work from the Polkadot ecosystem, unified by the Hub's vision and mission.</p>
<p>We can literally rebuild the systems which spy on and extract profits from us, with trust free alternatives!</p>
<p>Continue the conversation further in the <a href="https://forum.polkadot.network/t/the-polkadot-cloud/10670" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>.</p>]]></content:encoded>
            <category>cloud</category>
            <category>hub</category>
            <category>polkadot</category>
        </item>
        <item>
            <title><![CDATA[The Role of the Polkadot Treasury]]></title>
            <link>https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/</link>
            <guid>https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/</guid>
            <pubDate>Mon, 08 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, used to capture my thoughts on how Polkadot should manage spending in its treasury.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-used-to-capture-my-thoughts-on-how-polkadot-should-manage-spending-in-its-treasury">This is a <a href="https://forum.polkadot.network/t/is-the-treasury-polkadots-biggest-vc/9015" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, used to capture my thoughts on how Polkadot should manage spending in its treasury.<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#this-is-a-repost-from-the-polkadot-forum-used-to-capture-my-thoughts-on-how-polkadot-should-manage-spending-in-its-treasury" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-used-to-capture-my-thoughts-on-how-polkadot-should-manage-spending-in-its-treasury" title="Direct link to this-is-a-repost-from-the-polkadot-forum-used-to-capture-my-thoughts-on-how-polkadot-should-manage-spending-in-its-treasury">​</a></h5>
<p>In my opinion, OpenGov and the Polkadot Treasury have been some of the most exciting experiments coming out of the entire Web3 movement so far.</p>
<p>The rules of these systems are relatively simple and well-defined:</p>
<ul>
<li>The Treasury perpetually grows through transaction fees and inflation.</li>
<li>Spending of the treasury is determined by existing token holders.</li>
</ul>
<p>However, the final outcome of this game is not simple or well-defined at all.</p>
<p>One thing is clear though: because the treasury is controlled by DOT token holders, voters are naturally incentivized to spend funds that improve the Polkadot Ecosystem and the DOT token value.</p>
<p>But beyond that, what is the role of the Polkadot Treasury?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-role-of-the-treasury">The Role of the Treasury<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#the-role-of-the-treasury" class="hash-link" aria-label="Direct link to The Role of the Treasury" title="Direct link to The Role of the Treasury">​</a></h2>
<p>Compare the relationship between:</p>
<ul>
<li>Modern Societies</li>
<li>Governments</li>
<li>Public Treasuries</li>
</ul>
<p>and</p>
<ul>
<li>The Blockchain Ecosystem</li>
<li>Polkadot</li>
<li>The Polkadot Treasury</li>
</ul>
<p>Much of the advancement of modern society can be attributed to innovation created by free-market economics. The blockchain ecosystem operates under similar principles, where competition and the drive for profit lead to technological advancements and efficiencies. However, just as in modern societies, there are certain essential resources and services that are best provided as public goods.</p>
<p><strong>My view is that the Polkadot Treasury should primarily be used to support public goods in the Polkadot Ecosystem and should avoid speculative investments.</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="support-public-goods">Support Public Goods<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#support-public-goods" class="hash-link" aria-label="Direct link to Support Public Goods" title="Direct link to Support Public Goods">​</a></h3>
<p>In modern societies, governments use their treasuries to fund public goods and services that benefit everyone, such as roads, public parks, education, and healthcare. These are things that the free market either cannot provide effectively or would provide only to those who can afford them, leading to inequality and inefficiency.</p>
<p>Similarly, in the Polkadot ecosystem, the Polkadot Treasury should be used to fund initiatives that provide broad, non-excludable benefits to the entire community.</p>
<p>These can include (but are not limited to):</p>
<ul>
<li>Development SDKs: Tools and libraries that make it easier for developers to build on Polkadot.</li>
<li>Block Explorers: Platforms that allow users to explore blockchain data freely and easily.</li>
<li>Client Libraries: Libraries in multiple programming languages that facilitate interaction with the Polkadot network.</li>
<li>Public Nodes: Nodes that allow light clients and their users access to the network.</li>
<li>Public Education: Initiatives that educate users and developers about the Polkadot ecosystem.</li>
</ul>
<p>Just as public parks and roads benefit everyone in a community, public goods in the Polkadot ecosystem benefit all users and developers. Most importantly, these kinds of services have few sensible pathways to be funded except for a public treasury.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="avoid-speculative-investments">Avoid Speculative Investments<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#avoid-speculative-investments" class="hash-link" aria-label="Direct link to Avoid Speculative Investments" title="Direct link to Avoid Speculative Investments">​</a></h3>
<p>I would also argue that treasury spending controlled by the public usually leads to poor speculative decision-making. Generally, voters lack the technical expertise needed to evaluate complex proposals and cannot easily gain insight into the inner workings of a business, resulting in decisions based on superficial understanding or emotional appeal.</p>
<p>Public votes (especially in the blockchain space) can also be swayed by "popular trends" and short-sighted results. This results in projects that attempt to bribe the treasury or decisions that compromise on the principles of what we are trying to achieve in the long term.</p>
<p>In contrast, VC funding usually yields higher quality results due to accountability and expertise. Investors put their own money and reputation at risk when backing a speculative project, and as a result, are incentivized to conduct thorough research and make informed decisions. VCs are also more capable of supporting teams directly and gaining transparency into the actions of a team. This is why free markets have generated great results.</p>
<p>If we could get VCs in the Polkadot Ecosystem interested in evaluating and supporting public goods efforts, that would be great! We have seen evidence of this happening, for example, Consensys in the Ethereum ecosystem. But generally speaking, we cannot expect that philanthropy and corporate sponsorships will be there when we need them, and thus the treasury must exist to provide access to resources to fund public goods.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flexibility-and-experimentation">Flexibility and Experimentation<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#flexibility-and-experimentation" class="hash-link" aria-label="Direct link to Flexibility and Experimentation" title="Direct link to Flexibility and Experimentation">​</a></h3>
<p>There are no hard-coded rules for treasury spending, nor would we want to introduce any. It is important in a decentralized system to keep low-level APIs unopinionated and allow for community influence to dictate the behavior of the system.</p>
<p>I am not against the idea of the treasury being used in other creative ways, especially when the cost/risk is relatively low or the experimentation value is high.</p>
<p>For example, we have recently seen a surge of various marketing efforts through the treasury. While I may not agree with many of the specific pathways and choices, I could see how marketing Polkadot to the world is a kind of public good for our ecosystem. Thus, perhaps treasury funding is the right place to fund marketing efforts.</p>
<p>There were also recent posts on having the treasury invest in Parachain projects. As I have already said, I don't think OpenGov can make great decisions on speculative investment opportunities, but that doesn't mean I would be against trying it out to see what happens. Especially if the pool of teams that qualify for funding would be limited.</p>
<p>However, I think that these kinds of speculative efforts should be the exception, not the norm. We can only establish a norm by discussing our collective belief on where the treasury should be spending and making clear pathways for projects that don't align with that vision.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="my-take-on-other-funding-avenues">My Take on Other Funding Avenues<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#my-take-on-other-funding-avenues" class="hash-link" aria-label="Direct link to My Take on Other Funding Avenues" title="Direct link to My Take on Other Funding Avenues">​</a></h2>
<p>While at PBA Singapore 2024, we had the opportunity to hear from Web3 Foundation's Seraya from the Grants team talk about funding avenues in the Polkadot Ecosystem.</p>
<p>His presentation can be found here:</p>
<p><a href="https://docs.google.com/presentation/d/1klUCa1QonjVxV_yc4VWWo3I2aXwgELj8np1ZnfCzc8I/edit?usp=sharing" target="_blank" rel="noopener noreferrer">Web3 Foundation Grants Presentation</a></p>
<p>Hopefully, a video link will be made available in the near future, and I will happily update this post to include that when it is.</p>
<p>His presentation covered many different avenues such as:</p>
<ul>
<li>Decentralized Futures Program</li>
<li>W3F Grants Program</li>
<li>Treasury Funding</li>
<li>VC Funding (like through Polimec)</li>
</ul>
<p>He spoke on the mechanics and practicalities of these funding avenues, but not much on which one to pick for your project or idea.</p>
<p>Here is my mental model on where I would expect certain projects to best fit in terms of getting their funding request approved:</p>
<p><img decoding="async" loading="lazy" alt="Funding Decision Tree" src="https://shawntabrizi.com/assets/images/funding-decision-tree-b82bac6c5b62d6e6e204a1e27bcd8b6d.png" width="1380" height="498" class="img_ev3q"></p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Mermaid Diagram Text</summary><div><div class="collapsibleContent_i85q"><div class="language-mermaid codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-mermaid codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">graph TD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   FP(Is your product for profit?)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   FP--&gt;|No|PUBVAL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   FP--&gt;|Yes|INVESTOR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   PUBVAL(Does your product provide clear/immediate public value?)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   PUBVAL--&gt;|Yes|T[Treasury Funding]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   PUBVAL--&gt;|No|LONGTERM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   LONGTERM(Does your product align with the vision of Web3?)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   LONGTERM--&gt;|Yes|W3F[W3F Grants Program]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   LONGTERM--&gt;|No|WHY[Why should we fund you?]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ALIGN(Does your product align with the vision of Web3?)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ALIGN--&gt;|Yes|DFP[Decentralized Futures Program]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ALIGN--&gt;|No|WHY[Why should we fund you?]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   INVESTOR(Does the product have clear/existing investor value?)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   INVESTOR--&gt;|No|ALIGN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   INVESTOR--&gt;|Yes|VC[VC Funding]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   style T fill:#f9f,stroke:#333,stroke-width:4px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   style W3F fill:#f96,stroke:#333,stroke-width:4px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   style DFP fill:#6f9,stroke:#333,stroke-width:4px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   style VC fill:#69f,stroke:#333,stroke-width:4px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   style WHY fill:#f99,stroke:#333,stroke-width:4px;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<p>Again, this is just my opinion, so I would be really happy to hear about other important funding avenues not included, and other people's take on the decision path to select that avenue.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-do-you-think">What do you think?<a href="https://shawntabrizi.com/blog/2024/07/08/the-role-of-the-polkadot-treasury/#what-do-you-think" class="hash-link" aria-label="Direct link to What do you think?" title="Direct link to What do you think?">​</a></h2>
<p>I would be interested to hear other people present their opinions.</p>
<ul>
<li>What is the role of the Polkadot Treasury?</li>
<li>How should the treasury approach speculative investments?</li>
<li>In what ways should we experiment with Treasury spending?</li>
<li>What are other key funding avenues which were not mentioned and how should they be used?</li>
</ul>
<p>Continue the conversation further in the <a href="https://forum.polkadot.network/t/is-the-treasury-polkadots-biggest-vc/9015" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>.</p>]]></content:encoded>
            <category>treasury</category>
            <category>polkadot</category>
        </item>
        <item>
            <title><![CDATA[Disposable Parachains]]></title>
            <link>https://shawntabrizi.com/blog/2024/01/20/disposable-parachains/</link>
            <guid>https://shawntabrizi.com/blog/2024/01/20/disposable-parachains/</guid>
            <pubDate>Sat, 20 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, discussing the possibility of short lived parachains on the Polkadot Network for efficiently executing airdrops.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-discussing-the-possibility-of-short-lived-parachains-on-the-polkadot-network-for-efficiently-executing-airdrops">This is a <a href="https://forum.polkadot.network/t/disposable-parachains-for-airdrops-and-other-ideas/5769" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, discussing the possibility of short lived parachains on the Polkadot Network for efficiently executing airdrops.<a href="https://shawntabrizi.com/blog/2024/01/20/disposable-parachains/#this-is-a-repost-from-the-polkadot-forum-discussing-the-possibility-of-short-lived-parachains-on-the-polkadot-network-for-efficiently-executing-airdrops" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-discussing-the-possibility-of-short-lived-parachains-on-the-polkadot-network-for-efficiently-executing-airdrops" title="Direct link to this-is-a-repost-from-the-polkadot-forum-discussing-the-possibility-of-short-lived-parachains-on-the-polkadot-network-for-efficiently-executing-airdrops">​</a></h5>
<p>I had some unorganized thoughts I wanted to share, especially with all the talk about $DED, and what an efficient airdrop might look like on Polkadot.</p>
<p>I want to start by saying that I truly believe most airdrops are just ponzinomics. I don’t necessarily support or like the airdrop culture or think it is healthy for an ecosystem. That being said, it is an interesting technical problem.</p>
<p>For context, doing an Airdrop on Polkadot is inherently harder than other chains. This is because, unlike many other blockchains, Polkadot takes care to ensure that its state properly scales. It does this through things like the existential deposit and other storage deposits, which is also often the blocker for people to make large scale airdrops work.</p>
<p>I want to make clear, this is by design, and it seems it is working well.</p>
<p>But let’s brainstorm, given these constraints, how you could make the largest and most efficient airdrop possible on Polkadot.</p>
<p>My current answer is: Disposable Parachains.</p>
<p>A disposable parachain is a parachain with a short lifetime.</p>
<p>This means that after some relatively short period, the entire parachain, its state, and everything else can be completely dropped.</p>
<p>This is quite the opposite in thinking to most blockchains which are expected to live forever. If we look back to why Polkadot has these limitations on storage, it is precisely because we are constantly concerned with the long term scalability of the chain.</p>
<p>But a disposable parachain does not have this problem. A disposable parachain can be extremely “inefficient”, for example:</p>
<ul>
<li>having no existential deposit</li>
<li>having lots of items in storage (like the airdrop information for a 1M accounts)</li>
<li>fixed fees / weights, to simplify development</li>
<li>etc…</li>
</ul>
<p>So what does this look like in the context of an airdrop?</p>
<p>Let’s imagine we wanted to create an airdrop for DOT2, which is exactly 1:1 for DOT to all existing DOT holders. At the time of writing, this needs to support 1.2M users.</p>
<p>The Assets Parachain / Assets Pallet is just not set up for this kind of task. Each user who wants to receive the airdrop on the Assets Parachain needs to have an existential deposit on that parachain, and perhaps other deposits needed to hold the storage of that asset. For the person who is executing the airdrop, this is a massive up-front cost that would prevent the airdrop all together.</p>
<p>The more scalable solution would be to create some kind of merkle trie which contains all of the claims for tokens into a single merkle root, and then individual claimants could provide proof of their claims and mint the tokens themselves paying their own fees.</p>
<p>In this case, everyone has the “opportunity” to claim their DOT2, but not everyone will do it. Some users have such a little amount, it is not worth it for them to go through the process. Some users are not active, so they won’t claim. Some users don’t see value in the token, so they won’t claim.</p>
<p>IMO, this is all good. All the different ways users can filter themselves from an airdrop that they don't find valuable is better for the whole system and bloat. Having a “reactive” airdrop is much better than a “proactive” one, and is much easier to scale. Most airdrops do this through a claims process.</p>
<p>But now we would need to create and launch some custom Airdrop pallet on the Assets parachain. More than that, we will need to keep track of all claims from users for the lifetime of the airdrop to prevent someone from double claiming. In the case where 500K people claim the airdrop, we would still need to manage those 500k storage entries, which will bloat the chain and the chain history, especially if there will be multiple airdrops in the future.</p>
<p>This is where the disposable parachain comes in.</p>
<p>Polkadot is already designed to shard data and logic to parachains. The entire state of a parachain is boiled down to a single root hash, and that root hash is stored on chain. That means we could have a parachain, handling billions of airdrops, and the impact onto Polkadot is the same as any other parachain.</p>
<p>So imagine, for DOT2, we launch a disposable parachain, which holds all the data about the airdrop for DOT holders. We can store all the data we need on this parachain to make the airdrop work. Users could even pre-trade the token on the parachain, allowing small holders to sell their bags to those who are actually interested in claiming the token.</p>
<p>The parachain would be set up so that it is the owner of an asset on the Assets Parachain. Users would be able to trigger a claim on the Airdrop Disposable Parachain, which will send an XCM to mint the appropriate asset on the Assets Parachain. All fees required to do this need to be covered by the claimant, and can be included in the XCM message. Users who are interested in claiming their token go through this process, and ultimately get their final tokens minted on the Assets Parachain where the tokens are now officially in the Polkadot ecosystem, and should be well supported.</p>
<p>After some period of time, let’s say 6 months, the disposable parachain will “kill itself”, or just let the community decide how long they want to keep it around. But the idea is that once the parachain is no longer needed, it can just be “forgotten” and all of the state and bloat can disappear with it. The only impact it leaves on Polkadot is its state root, which can also be cleaned up if needed.</p>
<p>In this case, we offload the decision making of the airdrop to the users, and do so in a way which leaves no historical debt to Polkadot or any long term parachain.</p>
<p>Follow the conversation further in the <a href="https://forum.polkadot.network/t/disposable-parachains-for-airdrops-and-other-ideas/5769" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>.</p>]]></content:encoded>
            <category>parachain</category>
            <category>airdrop</category>
        </item>
        <item>
            <title><![CDATA[9 Ideas for the Decentralized Future of Polkadot]]></title>
            <link>https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/</link>
            <guid>https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/</guid>
            <pubDate>Mon, 20 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, responding to the announcement of the Web3 Foundation's Decentralized Futures Program.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-responding-to-the-announcement-of-the-web3-foundations-decentralized-futures-program">This is a <a href="https://forum.polkadot.network/t/9-ideas-for-the-decentralized-future-of-polkadot/4731" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, responding to the announcement of the Web3 Foundation's Decentralized Futures Program.<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#this-is-a-repost-from-the-polkadot-forum-responding-to-the-announcement-of-the-web3-foundations-decentralized-futures-program" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-responding-to-the-announcement-of-the-web3-foundations-decentralized-futures-program" title="Direct link to this-is-a-repost-from-the-polkadot-forum-responding-to-the-announcement-of-the-web3-foundations-decentralized-futures-program">​</a></h5>
<p>The Web3 Foundation just announced their <a href="https://futures.web3.foundation/" target="_blank" rel="noopener noreferrer">Decentralized Futures</a> program for the Polkadot Network.</p>
<p>In their site, they describe 9 areas which are of key importance for these funds and for development to occur in order to support and grow the Polkadot ecosystem.</p>
<p><img decoding="async" loading="lazy" alt="Decentralized Future Program" src="https://shawntabrizi.com/assets/images/decentralized-futures-program-08f6b01b5a18612a20e60092fbfd27eb.png" width="1380" height="844" class="img_ev3q"></p>
<p>I wanted to present an idea for each area that I would love to see funded by this initiative.</p>
<p>Indeed, I would like to directly contribute to one or more of these ideas if I can find the right people to work along side with.</p>
<p>Obviously each of these ideas needs more time spent to flesh out the specifics, but hopefully these ideas are both concise enough to allow people to read them all, but detailed enough for people to understand the underlying philosophy and goal behind the project.</p>
<p>Finally, I apologize, but many of these ideas have been brewing for a while (as you will see below, I have linked to some previous writing when applicable), but this post was written fast and off the top of my head. Hopefully feedback can allow me to edit and refine the ideas further.</p>
<p>Find a chatgpt summary of this post here: <a href="https://forum.polkadot.network/t/9-ideas-for-the-future-of-polkadot/4731/2?u=shawntabrizi" target="_blank" rel="noopener noreferrer">https://forum.polkadot.network/t/9-ideas-for-the-future-of-polkadot/4731/2?u=shawntabrizi</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="technology">Technology<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#technology" class="hash-link" aria-label="Direct link to Technology" title="Direct link to Technology">​</a></h2>
<p>In the technology section, the Web3 Foundation identified the following areas: Developer Experience, Growth, and Interoperability. Here is an idea for each of these areas.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="developer-experience-an-alternative-to-frame">Developer Experience: An Alternative to FRAME<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#developer-experience-an-alternative-to-frame" class="hash-link" aria-label="Direct link to Developer Experience: An Alternative to FRAME" title="Direct link to Developer Experience: An Alternative to FRAME">​</a></h3>
<p>Substrate has always positioned itself as being flexible to the needs of the developer. From its inception, they have always described at least 3 ways to approach the SDK:</p>
<p><img decoding="async" loading="lazy" alt="Substrate Dev Time vs Complexity" src="https://shawntabrizi.com/assets/images/substrate-dev-time-vs-complexity-de6ea0ffb63aea203246e90f7715167f.png" width="759" height="416" class="img_ev3q"></p>
<p>It is obvious to someone who is an expert in FRAME how flexible and modular it is, and how it really can be used to develop fully customized systems.</p>
<p>However, to many just entering the ecosystem, FRAME itself can be quite complex to use, and especially to use correctly and safely.</p>
<p>I would argue that of the 3 options presented in Substrate, nearly no one builds by modifying core, and nearly no one builds by simply configuring the genesis of the node template. Entirely everyone builds using FRAME, but then the goal of flexibility in Substrate is lost due to the fact that there is only a single product to satisfy the needs of everyone.</p>
<p>With this in mind, I think there should exist a product between building with the Node Template and FRAME. A framework which is more simple, stupid-easy, safe, standard, satisfying, and so-on....</p>
<p>Perhaps a framework like: "Here is Substrate's Super Simple Safe ... STF SDK", aka "Hissss..." 🐍 (not really important what the name is, but i have had this one in mind for a while)</p>
<p>The core ideas:</p>
<ul>
<li>Less configurable... but works out of the box.<!-- -->
<ul>
<li>You do not get to customize every single type in your runtime... but then you also don't need to worry about or eat the costs of having every type be generic in your runtime too.</li>
</ul>
</li>
<li>Providing all the primitives you expect, exported as a single system.<!-- -->
<ul>
<li>For example not feeling that you have a System Module, Balances Module, Utility Modules, XCM Modules, Consensus Modules, etc which all need to work with what you are building. It is all packaged with standards already accepted in the wider blockchain ecosystem, and you build against that.</li>
</ul>
</li>
<li>Targeted toward simplifying specific ecosystem objectives, like cross chain transfers, defi, multi-token systems, smart contracts, etc...<!-- -->
<ul>
<li>Lets build the framework not to maximize flexibility, but to be the best at the goals which the current crypto ecosystem are focused on.</li>
</ul>
</li>
<li>Compatibility with the chains using FRAME.</li>
<li>Ideally, well developed user stories allowing people to transition from FRAME to Hiss and Hiss to FRAME.</li>
</ul>
<p>In summary, FRAME was the correct decision for frameworks to provide to the Polkadot ecosystem. It is designed to be maximally flexible. But now that it exists, we should start to look at lowering the barrier of entry for developers who want a more simple product, just like what was promised with developing with just the Node Template.</p>
<p>I think it is time for Polkadot to start getting alternative runtime SDKs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="growth-frame--ink-the-merge">Growth: FRAME + ink! (The Merge)<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#growth-frame--ink-the-merge" class="hash-link" aria-label="Direct link to Growth: FRAME + ink! (The Merge)" title="Direct link to Growth: FRAME + ink! (The Merge)">​</a></h3>
<p>What if you only needed to learn a single language to join any part of the Polkadot ecosystem? What if you wanted to build a smart contract, an on-demand parachain, or a dedicated parachain, that you could take the exact same codebase, and use it to launch all three when the time and conditions are right?</p>
<p><img decoding="async" loading="lazy" alt="Pathway for a developer" src="https://shawntabrizi.com/assets/images/the-merge-8e2accb5aa4d748d0de84897b4b34c71.jpeg" width="1380" height="776" class="img_ev3q"></p>
<p>That is the main vision behind a merge of FRAME and ink!. My belief is that runtime development is a complete superset of smart contract development. For historical reasons, both of these frameworks were built separately, but also found their way to converge over time. The shift from FRAME v1 to FRAME v2 was actually due to ink! and how they masterfully used attribute macros to build a much better Rust eDSL. However, simple syntax (like declaring calls, storage, events, errors) which could be standardized across the two languages are not, and as such, users feel that they need to learn two languages, not one.</p>
<p>The steps between tinkering with Polkadot and launching a parachain is just too massive at the moment. There is really no middle ground or story for a single individual to launch something like a parachain without a large team and a lot of funds.</p>
<p>Instead, we can market the first step toward building a parachain is building a contract with ink! and deploying it to an existing parachain. Then, since in our world, ink! and runtime development use the same language, successful products can simply turn their contract into a more performant on-demand parachain. Finally, if their on-demand parachain is demanding so much blockspace, they can obtain a dedicated slot, potentially with all the same codebase.</p>
<p>Of course, if you are developing code for the runtime, you get access to more APIs and more low level access to your blockchain, but the main idea should be that through your development process in the Polkadot ecosystem, you are only writing new code, not rewriting existing code.</p>
<p>In this story, users have a really comprehensive story from tinkering as an individual, to launching parachains on Polkadot, exactly the kind of growth we need in our ecosystem.</p>
<p>Most of the ideas around the merge I had were initially documented here: <a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/">The Merge of ink! and FRAME</a>.</p>
<p>Perhaps the goal would not be to merge FRAME into ink!, but maybe Hiss (suggested above), could be that extension of ink! to provide this end to end story.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="interoperability-reading-state-across-parachains">Interoperability: Reading State Across Parachains<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#interoperability-reading-state-across-parachains" class="hash-link" aria-label="Direct link to Interoperability: Reading State Across Parachains" title="Direct link to Interoperability: Reading State Across Parachains">​</a></h3>
<p>Among the 9 ideas in this write up, this is the one with the least amount of concrete thought. However, the basic idea is this:</p>
<p>A huge downside of multi-chain interoperability is coordinating the state of chains as a part of constructing cross-chain messages. With monolithic chains like ethereum it is easy and completely synchronous to inspect the state of any contract or application in the system.</p>
<p>In Polkadot, XCM is already an extremely expensive protocol relative to basic runtime functions, but it almost entirely removes state reading and reporting from the protocol because it is a bad practice.</p>
<p>As of today, I do not believe there exists a set of tools which standardizes how two parachains who want to communicate to each other with XCM should synchronize their state and trigger their logic based on changes from the other chain.</p>
<p>It seems some kind of offchain worker with light client proofs could be used to solve this problem, but likely this is not a trivial tool to create, and it certainly should be one which is standardized across our ecosystem.</p>
<p>I think such tools are the catalyst needed for us to create oracle chains, which report up to date prices of other cryptocurrencies, which is a fundamental primitive for many defi tools. Hopefully in the future, these tools are also used to bring data from robust identity chains to the rest of our ecosystem.</p>
<p>As much as it is important to have protocols which allow us to describe moving an asset from one chain to another, I think for us to unlock the full potential of interoperability in Polkadot, we need to start also thinking about how we can let chains focus on generating high quality data, and making it dead simple and cheap for other chains to access that data when they need it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="development-ecosystem">Development Ecosystem<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#development-ecosystem" class="hash-link" aria-label="Direct link to Development Ecosystem" title="Direct link to Development Ecosystem">​</a></h2>
<p>In the Development Ecosystem section, the Web3 Foundation identified the following areas: Development Services, High Value Partners, and Enterprise. Here is an idea for each of these areas.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="development-services-interactive-and-meaningful-tutorials">Development Services: Interactive and Meaningful Tutorials<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#development-services-interactive-and-meaningful-tutorials" class="hash-link" aria-label="Direct link to Development Services: Interactive and Meaningful Tutorials" title="Direct link to Development Services: Interactive and Meaningful Tutorials">​</a></h3>
<p>At the ground level, we need to continue to develop new ways to teach others to build with the Polkadot SDK, and actually have them use that information to launch meaningful products.</p>
<p>What do we want to see more of in our ecosystem?</p>
<ul>
<li>More defi products</li>
<li>More cross chain interactions</li>
<li>NFTs</li>
<li>Games</li>
</ul>
<p>One of the best ways to achieve this is to have tutorials which show the creation of <em>working</em> systems, which build these kind of products from zero to one hundred, with room to customize where needed.</p>
<p>The Polkadot developer community has always been good at producing high quality code, but not so good at educating others to be high quality coders. For this, we need to throw money and incentives at the problem.</p>
<ul>
<li>create and maintain a number of high quality tutorials<!-- -->
<ul>
<li>these should be written by the experts, not having people who themselves are learning trying to teach others. I often think we are plauged with blind leading the blind.</li>
<li>target developers who need "a break" from coding. As a developer, I can speak to the fact that after large projects, having the ability to transition to create tutorials or other documentation is a nice escape from development.</li>
<li>treat this kind of work and maintenance as important as writing core code. That includes rewarding high quality authors and maintainers similar to core contributors</li>
<li>create frameworks and tools which make tutorial creation minimal effort for core knowledge holders<!-- -->
<ul>
<li>Use real rust projects, git, basic markdown, VS Code editor, and other familiar tools as the basis for creating and expressing tutorials.</li>
<li>On-hand writers to help shape "raw" content into expressive stories.</li>
<li>On-hand graphic/web artists to turn tutorials into something visually appealing and unique in story.</li>
</ul>
</li>
</ul>
</li>
<li>each tutorial should result in a product ready working products that we would like to see exist in our ecosystem<!-- -->
<ul>
<li>There is no value in a tutorial which teaches users to install the "name-pallet" into their chain. Or a tutorial which has users use unbounded vectors, inefficient storage structures, or other anti-practices. Tutorials should result in something useful and to be used.</li>
<li>A simple practice to achieve this could be to specifically write tutorials on creating the pallets found in Polkadot itself. However, this is also probably not the right formula.</li>
</ul>
</li>
<li>tutorials should capture the whole scope of learning, from substrate specific rust, to pallet development, to parachain / solo-chain deployment, to upgrades, migrations, and other long term maintenance.</li>
<li>tutorials should be gamified and fun for the author. We should look to create full end to end experiences that users can pick up and put down on their free time, and on-chain rewards like NFTs when users complete some tutorial.</li>
</ul>
<p>Some of these efforts are already in progress in different forms, but in my opinion the vision, incentives, and people working on this have never quite been the right mix for success. With the decentralized futures program and the right people, perhaps this can change.</p>
<p>I am working on some of this stuff already as a part of my efforts in the academy, with the web3 foundation education team, and personal education initiatives I am doing locally to my home. Hopefully we will see a revival of substrate kitties soon.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="high-value-partners-community-auditors-and-audits">High Value Partners: Community Auditors and Audits<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#high-value-partners-community-auditors-and-audits" class="hash-link" aria-label="Direct link to High Value Partners: Community Auditors and Audits" title="Direct link to High Value Partners: Community Auditors and Audits">​</a></h3>
<p>Audits are key to the survival and trust developed for ecosystems. However, for many development teams, audits are very expensive, and for many potential audit teams, they do not have access to the information or resources needed to be experts in our ecosystem, and actually provide proper audits.</p>
<p>For this, we need to combine two different initiatives into a single story:</p>
<ul>
<li>An education path for successful audit teams outside of Polkadot to become expert Polkadot auditors.</li>
<li>A path toward free/subsidized audits from these teams for our ecosystem.</li>
</ul>
<p>This starts with funding and education. We need to draw in audit teams by paying them to complete an audit in our ecosystem, but targeted also as a learning experience for them. Perhaps in this situation, they will act always as a secondary audit for a primary auditor. These audit teams would be guaranteed some funding for their time (paid for by treasury / decentralization funding), and they would see a large queue of teams who are looking for audits for their work, meaning much more work in the future.</p>
<p>There should be a process for teams to submit a request for audit, and some community / technical feedback allowing prioritization and subsidization of those requests. Also some tracking to see how much support teams have received in total, and the history and knowledge of the audit teams.</p>
<p>In many ways, this reminds me of existing systems in our world like court assigned lawyers for defendants that cannot afford legal representation, or government contract requests which are placed in public, and allowing different parties to bid on fulfilling those requests.</p>
<p>In the end, any level of respectable auditing will have long term impact in our ecosystem. We can draw in and even create more high valued partners by ensuring our products are not as likely to be attacked or have erroneous bugs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enterprise-competitive-research">Enterprise: Competitive Research<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#enterprise-competitive-research" class="hash-link" aria-label="Direct link to Enterprise: Competitive Research" title="Direct link to Enterprise: Competitive Research">​</a></h3>
<p>In the spirit of attracting existing successful Web2 companies into the Polkadot ecosystem, we need to make it obvious to them that Polkadot is the correct choice among competitors and peers.</p>
<p>The truth is that many of the most successful blockchain ecosystems got that way off of narrative manipulation and marketing, and not actually working or philisophically aligned technology.</p>
<p>Beyond that, other teams have found a product market fit which seems to still elude the Polkadot ecosystem. Such problems are cyclic. Without users you don't draw in new products. Without new products, you don't draw in users.</p>
<p>Of course improving our own product is absolutely the best first step to remedy this problem, and plenty of that is already happening in Polkadot. But what I suggest here is different in that we should also be more on the offensive and call out fact from fiction.</p>
<p>A lot of this proposal has already been written down here: <a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/">Polkadot Competitive Research Proposal</a></p>
<p>I think there are two key outcomes which come from competitive research:</p>
<ul>
<li>calling out narratives and stories which are false in other ecosystems, many of which were pioneered by Polkadot<!-- -->
<ul>
<li>Does a chain claim to achieve 1 Million TPS? What does that even mean? How would this actually compare to other protocols, and not some hand crafted benchmark.</li>
<li>"Instant finality" sounds cool, but is it really?</li>
<li>Other chains claim to have "forkless upgrades" or "shared security", is that actually true?</li>
<li>Modular blockchains are the future, but where in the stack is modularity a benefit, and where is it actually a poor design decision?</li>
</ul>
</li>
<li>learning from our competitors to better shape our product<!-- -->
<ul>
<li>Polkadot as a culture seems very deep into our own research and ideas. Many of the most successful teams have used ideas and standards from other protocols to accelerate the development of their products.</li>
<li>What products can we create which directly compete with what enterprises and users find exciting in other ecosystems.</li>
<li>how can we create more directly comparible products, and prove that our technology stack is actually better. For example, growing Polkadot SDK into a platform for developing the best L2s, in competition with arbitrum and optimism, as well as parachains.</li>
</ul>
</li>
</ul>
<p>Unfortunately, existing parties have not seemed as interested in directly funding this work, however the decentralized futures program may be the way to get such an effort going.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community">Community<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#community" class="hash-link" aria-label="Direct link to Community" title="Direct link to Community">​</a></h2>
<p>In the Community section, the Web3 Foundation identified the following areas: On-Chain Governance, Decentralized Marketing, Events. Here is an idea for each of these areas.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="on-chain-governance-treasury-proposal-templates">On-Chain Governance: Treasury Proposal Templates<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#on-chain-governance-treasury-proposal-templates" class="hash-link" aria-label="Direct link to On-Chain Governance: Treasury Proposal Templates" title="Direct link to On-Chain Governance: Treasury Proposal Templates">​</a></h3>
<p>Open gov has been an interesting experiment so far. From my observations, the blockchain level APIs and mechanisms which exist are pretty good, but the community is WRONG in trying to interface directly with it.</p>
<p>Even the existing UIs today like Polkassembly and Subsquare seem to be just wrappers on top of low level blockchain APIs, and not themselves an app which is expected to be used first and foremost by casual builders and new faces in our ecosystem.</p>
<p>A lot of this idea is already written down in this post: <a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/">A Better Treasury System</a></p>
<p>But at a high level, I imagine that we use our social standards to push forward behaviors beyond the rules of the blockchain.</p>
<p>As an initial MVP, I would expect that we try to standardize the following:</p>
<ul>
<li>An online form that users can fill out easily to describe the funding they want. Not a word doc to fill out, but actual web based UX, that can modify itself and help users through the process.<!-- -->
<ul>
<li>These could even be different depending on the track.</li>
</ul>
</li>
<li>Publishing to the public FIRST, before posting anything on chain. The discussion of proposals should happen far before anything shows up on chain. Is it possible to design systems where the outcome of proposals are known before they are posted on chain? Or as close to this as possible.</li>
<li>Gamification of treasury spending. No one wants grifters or others to take advantage of the treasury funds. No one goes to an investor and asks for millions of dollars without any evidence of previous work done successfully. We should guide people through a tier system, where their first proposal is small in scope, and small in cost. Perhaps even just paying users to make a more formal roadmap for large ideas. Then, as users successfully complete proposals, their ability to ask for more increases, up to the point where they are getting large funds and large projects that we expect to support well established teams.</li>
<li>From gamification, we will also be able to establish off-chain reputation sysytems. We should have a hub which is centered around individual contributors and teams. When someone asks for funds, it should be easy to see what things they have delivered in the past, and how well those products have been received by the ecosystem. You would never buy a product online from a seller with no reputation. Why would you give a stranger money to build something with no background information?</li>
<li>The proposal process does not end when the vote passes. There should be entire hubs and discussion areas for each proposal. Imagine forums where users can query the builders on progress, provide feedback, and even hold builders accountable for the funds they received. This is all in the hopes of finding teams which don't just market and sell their idea well, but also execute well and show effort to be integrated in our community.</li>
</ul>
<p>Of course all of these things are not rules established on chain. Anyone could make a proposal directly on chain asking for any amount of funds. But we as a community can direct users to our socially accepted process, and encourage users to show their good intentions by having them grow in our community, not just ask for millions of dollars from out of nowhere.</p>
<p>In this context, I think there is nothing wrong with having more "centralized" thinking and processes around the treasury, knowing that this often provides more efficient processes to finding high quality teams and output. Most importantly, it does not compromise the decentralized nature of the underlying protocol.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="decentralized-marketing-modular-marketing-materials">Decentralized Marketing: Modular Marketing Materials<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#decentralized-marketing-modular-marketing-materials" class="hash-link" aria-label="Direct link to Decentralized Marketing: Modular Marketing Materials" title="Direct link to Decentralized Marketing: Modular Marketing Materials">​</a></h3>
<p>People who are reading this post are probably in the top 1% of the top 1% of people following the Polkadot ecosystem. So let me ask you:</p>
<blockquote>
<p>If you had to make a presentation to describe and sell Polkadot to the world, how would you get started? What resources would you use?</p>
</blockquote>
<p>As someone who has given countless presentations, I feel that no such resources exist, and in fact I am making most of my content from scratch. From the presentations I create, I see many people in the ecosystem asking for links to the presentation, and I have seen my images, words, and even ideas show up in twitter threads, blog posts, other presentations, and more.</p>
<p>When thinking about decentralized marketing, this is the kind of things we need. Not create bigger megaphones to blast out our ideas, but create reusable scripts that can be spread by smaller voices, and customized to the needs of the communities being reached out to.</p>
<p>With this in mind, I envision a marketing oriented resource website, providing content in multiple forms about many different key topics in our space.</p>
<p>For example, imagine that each topic had the following formats available:</p>
<ul>
<li>One sentence summary.</li>
<li>One paragraph summary.</li>
<li>One essay summary.</li>
<li>One (or more) image(s).</li>
<li>One powerpoint slide.</li>
<li>One Twitter post.</li>
<li>One Twitter thread.</li>
<li>One (or more) competitive comparisons.</li>
<li>etc...</li>
</ul>
<p>Then imagine we had this for all the key topics and differentiators in the Polkadot ecosystem, now and in the future:</p>
<ul>
<li>Open Gov</li>
<li>Data Availability</li>
<li>Execution Sharding</li>
<li>Treasury</li>
<li>XCM</li>
<li>FRAME</li>
<li>Polkadot SDK</li>
<li>Forkless Upgrades</li>
<li>etc...</li>
</ul>
<p>These words could be copied, could be mutated, or could just be read by others. But the resources themselves are high quality and coming from and reviewed by the experts in the field. Providing ammunition to everyone who has access to the internet and a belief in what we are building.</p>
<p>Beyond that, I imagine that we provide many additional resources to make content development in Polkadot easier.</p>
<ul>
<li>Access to graphics and themes which can be used throughout the ecosystem:<!-- -->
<ul>
<li>multiple visuals of the DOT token</li>
<li>multiple versions of the polkadot logo</li>
<li>multiple themes (for example, most recently the spacemen theme)</li>
<li>generators for custom parachain / xcm visuals</li>
<li>the best image representations of slogans and philosphies of Polkadot</li>
</ul>
</li>
<li>More competitive research, and specific talking points to counter false narratives.</li>
<li>Reusable, short video clips with subtitles from various presentations, meetups, interviews.</li>
<li>Photos of our vibrant ecosystem, people, companies, meetings, development, workshops, etc...</li>
<li>And so much more.</li>
</ul>
<p>All content would be completely open source, zero copyright, and free for the public to use as they see fit.</p>
<p>I think we if had to be critical of marketing efforts in the space, it was that we had people who did not have the right ammunition to effectively spread the winning messages in this space. If we want to truly adopt decentralized marketing, we need to give everyone a powerful voice with easy access to persuasive data and messaging.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="events-familiar-faces-fund">Events: Familiar Faces Fund<a href="https://shawntabrizi.com/blog/2023/11/20/9-ideas-for-decentralized-future/#events-familiar-faces-fund" class="hash-link" aria-label="Direct link to Events: Familiar Faces Fund" title="Direct link to Events: Familiar Faces Fund">​</a></h3>
<p>When I think about the future of decentralized events in Polkadot, I worry that we won't properly curate the voices which are used to represent our mission and direction. It seems that large events like Web3 Summit, Polkadot Decoded, and Sub0 are some of the only places where our public gets an insight into what we are building and where we are going.</p>
<p>As Polkadot becomes more decentralized, it will not be as easy for individual catalysts and leaders to be able to travel and represent their work. Having the right people at our events and shaping the narrative around Polkadot is just as important as having the right developers architecting our codebase.</p>
<p>Having seen how these kinds of large events are prepared behind the scenes, I know that we make the agenda based on those who request to present, not by actually reaching out and curating a story that we want to tell. I don't think this is the right way to get the best representation for Polkadot.</p>
<p>We have to remember many of our best speakers and representatives are already over their head in work. Without such a support program, these speakers would need to coordinate and pay for all this travel at their own cost. This usually only makes financial sense for leaders who want to shill their product, and this does not lead to the kind of content that is best for the whole ecosystem. For those looking to the treasury to support this, the overhead is currently massive, and the politics at the time are a large deterrent to open that can of worms.</p>
<p>We can achieve the desired outcome using a team and set of funds support key speakers. We need to figure out with them how we can make these events more accessible to them, and the best use of their time.</p>
<p>Simple things like managing hotel reservations, flight tickets, and other basic administration, to more complex things like shaping a narrative of what we want the public to see and hear from Polkadot, and finding the right people to present those parts of the story.</p>
<p>And we should think even beyond just the Polkadot ecosystem, ensuring that we have proper representation at large multi-ecosystem events like EthCC, EthDenver, Devcon, Devconnect, etc...</p>
<p>If we do our job well in this context, we can create famous and recognizable faces outside of just Parity and the original Polkadot Founders who represent our mission and contributions to this ecosystem, and whom other look to for direction and inspiration.</p>
<p>So really, I would like to see:</p>
<ul>
<li>changing the direction from selecting representation from among those who ask to present, to reaching out to key presenters and asking them to present at key events<!-- -->
<ul>
<li>ultimately making things more proactive from the events side, and pushing work onto event coordinators and off of the presenters where possible</li>
</ul>
</li>
<li>supporting those presenters to be at those events: funds and basic administrative help for their travel</li>
<li>collaborative narration: taking advantage of these key speakers, and forming ahead of time a set of presentations which capture the key takeaways we want the audience to know about Polkadot.<!-- -->
<ul>
<li>We should never have two presenters talk about the same topic.</li>
<li>We should never have two presenters contradict the messaging between their talks.</li>
</ul>
</li>
</ul>
<p>For something like this to exist, we need funding and a small group of individuals who can help shape this and make it happen.</p>
<p>Continue the conversation in the <a href="https://forum.polkadot.network/t/9-ideas-for-the-decentralized-future-of-polkadot/4731" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>.</p>]]></content:encoded>
            <category>web3foundation</category>
            <category>polkadot</category>
        </item>
        <item>
            <title><![CDATA[Does Shared Security Improve Interoperability?]]></title>
            <link>https://shawntabrizi.com/blog/2023/05/18/shared-security-and-interoperability/</link>
            <guid>https://shawntabrizi.com/blog/2023/05/18/shared-security-and-interoperability/</guid>
            <pubDate>Thu, 18 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, discussing the relationship between shared security and interoperability.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-discussing-the-relationship-between-shared-security-and-interoperability">This is a <a href="https://forum.polkadot.network/t/does-shared-security-improve-interoperability/2895" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, discussing the relationship between shared security and interoperability.<a href="https://shawntabrizi.com/blog/2023/05/18/shared-security-and-interoperability/#this-is-a-repost-from-the-polkadot-forum-discussing-the-relationship-between-shared-security-and-interoperability" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-discussing-the-relationship-between-shared-security-and-interoperability" title="Direct link to this-is-a-repost-from-the-polkadot-forum-discussing-the-relationship-between-shared-security-and-interoperability">​</a></h5>
<p>I wanted to start a thread which puts into words an advantage of Polkadot which is not covered that often (that I can see). Hopefully I get everything right below, but I am also writing this as an opportunity to bring further clarity to the actual features that exist, allow others to call out any mistakes, allow others to further the story, and ultimately spread the knowledge to our community.</p>
<p>So the topic at hand is how Polkadot’s cross-chain messaging protocol (XCMP) is advantaged over other protocols, for example IBC or any non-protocol-native messaging system, primarily due to the implications of Shared Security across the interacting chains.</p>
<p>So what is the problem normally?</p>
<p>Any two blockchains can communicate to each other over a bridge. There are many kinds of bridges, ranging from fully trustless to fully trusted, but in the end of the day, messages are passed over the bridge, and transition the state of these chains.</p>
<p><strong>The issue is that these two interacting chains have completely independent security guarantees.</strong></p>
<p>The concern is that two chains both change their state due to some cross-chain interaction, but a weak chain is attacked / reorged, and that would leave the two chains in a conflicting state, with no definitive path toward resolution, especially if there are different parties and incentives at play.</p>
<p>This means the security around interactions between two or more chains is as weak as the weakest chain. Compared to Polkadot, where all parachains, and their interactions are secured by the full security of the Polkadot relay chain.</p>
<p>That being said, all chains (even those in Polkadot) are potentially susceptible to some kind of attack where the logic of the chain has a backdoor which manipulates the state of the chain after a cross-chain interaction. This means that even today, there is some level of trust needed between two chains which want to interact with one another, that they will not act maliciously within the sovereignty of their own state transition function.</p>
<p>How would we solve this?</p>
<p>Another seldomly talked about topic which can help solve this is <a href="https://wiki.polkadot.network/docs/learn-spree" target="_blank" rel="noopener noreferrer">SPREE</a>.</p>
<p>At a high level, this is where interactions between two chains is managed by logic which is stored on the relay chain, and also the state is maintained on the relay chain. This would mean that even the two chains interacting with one another would not have control over the specific data and logic around their interaction, but instead follow the rules defined by their common security provider.</p>
<p>This too highlights the need for a shared security layer for a future of truly trustless interoperability.</p>
<p>Continue the discussion on the <a href="https://forum.polkadot.network/t/does-shared-security-improve-interoperability/2895" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>;</p>]]></content:encoded>
            <category>shared security</category>
            <category>interoperability</category>
        </item>
        <item>
            <title><![CDATA[Polkadot Competitive Research Proposal]]></title>
            <link>https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/</link>
            <guid>https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/</guid>
            <pubDate>Wed, 05 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Goals]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="goals">Goals<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#goals" class="hash-link" aria-label="Direct link to Goals" title="Direct link to Goals">​</a></h2>
<p>Look deeply into the technical abilities and developer experiences provided by other Blockchain and Web3 ecosystems, and bring back learnings, features, and facts to the Polkadot ecosystem.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="funding-process">Funding Process<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#funding-process" class="hash-link" aria-label="Direct link to Funding Process" title="Direct link to Funding Process">​</a></h2>
<p>Listed below is a set of phases and deliverables for competitive research.</p>
<p>Each item can be funded and delivered separately, and further phases can be added on as needed.</p>
<p>A retainer (or bounty) should be allocated to show intent of funding future work.</p>
<p>Then, the expected output can be agreed upon:</p>
<ul>
<li>Which protocol(s)?</li>
<li>What phases and deliverables?</li>
</ul>
<p>An estimate will be generated:</p>
<ul>
<li>How much time (in days) is estimated to complete this work?</li>
<li>What timeline should the work be completed by?</li>
<li>What check-points (if any) can be used to check the progress of the work?</li>
</ul>
<p>If everyone is satisfied with the work and output, more funding can be allocated and the process can repeat.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="phases">Phases<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#phases" class="hash-link" aria-label="Direct link to Phases" title="Direct link to Phases">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="research">Research<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#research" class="hash-link" aria-label="Direct link to Research" title="Direct link to Research">​</a></h3>
<p>Let's look to understand what other protocol teams are trying to build and provide to the Web3 ecosystem.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="work">Work<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#work" class="hash-link" aria-label="Direct link to Work" title="Direct link to Work">​</a></h4>
<ul>
<li>Determine the key product they are trying to create.<!-- -->
<ul>
<li>Where does it fit into the Web3 space?</li>
<li>What challenges are they trying to tackle?</li>
</ul>
</li>
<li>Identify the best video (or set of) that explains their technical product.</li>
<li>Identify best source of documentation for technical implementation and design decisions.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="output">Output<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#output" class="hash-link" aria-label="Direct link to Output" title="Direct link to Output">​</a></h4>
<ul>
<li>Written report of the protocol<!-- -->
<ul>
<li>Their product space / mindshare</li>
<li>Key technical advantages / innovations</li>
<li>Technical disadvantages / tradeoffs</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h4>
<ul>
<li>What are the different kinds of bridges, and their tradeoffs?<!-- -->
<ul>
<li>Compare protocols</li>
<li>Compare technical design</li>
<li>Compare strengths / weaknesses</li>
<li>Compare "unsolved problems"</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="benchmarks">Benchmarks<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#benchmarks" class="hash-link" aria-label="Direct link to Benchmarks" title="Direct link to Benchmarks">​</a></h3>
<p>Let's look at the raw performance of other protocols today.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="standard-tps">Standard TPS<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#standard-tps" class="hash-link" aria-label="Direct link to Standard TPS" title="Direct link to Standard TPS">​</a></h4>
<p>Use a base standard of measuring TPS:</p>
<ul>
<li>Transactions are non-killing transfers from unique existing accounts to new accounts.</li>
<li>Optimistic improvements (like optimistic parallelization) are disabled.</li>
<li>Investigation can look both at hypothetical limits and practical running limits.<!-- -->
<ul>
<li>Reusable and accessible hardware where possible.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="other-potential-benchmarks">Other Potential Benchmarks<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#other-potential-benchmarks" class="hash-link" aria-label="Direct link to Other Potential Benchmarks" title="Direct link to Other Potential Benchmarks">​</a></h4>
<ul>
<li>Sync Time</li>
<li>Disk space per block</li>
<li>Cross chain messaging benchmarks</li>
<li>Non-standard TPS<!-- -->
<ul>
<li>Heavy TX Storage (contract execution)</li>
<li>Heavy TX Payload (remark)</li>
<li>Heavy TX Execution (ZK or similar)</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="output-1">Output<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#output-1" class="hash-link" aria-label="Direct link to Output" title="Direct link to Output">​</a></h4>
<ul>
<li>Publicly available benchmark table with all statistics collected and compared.</li>
<li>Reproduction steps written up and included with all benchmarks.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="developer-experience">Developer Experience<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#developer-experience" class="hash-link" aria-label="Direct link to Developer Experience" title="Direct link to Developer Experience">​</a></h3>
<p>Let's look at how well they facilitate the new developer onboarding process.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="green-path">Green Path<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#green-path" class="hash-link" aria-label="Direct link to Green Path" title="Direct link to Green Path">​</a></h4>
<ul>
<li>Identify the best "weekend learning path" for the protocol. As in, the set of documentation, tutorials, videos, etc which can be accessed over a 3 day period to onboard users into their ecosystem.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="mvp-product">MVP Product<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#mvp-product" class="hash-link" aria-label="Direct link to MVP Product" title="Direct link to MVP Product">​</a></h4>
<ul>
<li>
<p>Create an MVP product on their ecosystem, and compare the complexity and customizability of the platform.</p>
</li>
<li>
<p>Product Ideas:</p>
<ul>
<li>Proof of Existence</li>
<li>Basic Art NFT</li>
<li>Name Service</li>
</ul>
</li>
<li>
<p>Product Extensibility Tests</p>
<ul>
<li>Control / Manage Fees</li>
<li>Upgradability</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feature-development">Feature Development<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#feature-development" class="hash-link" aria-label="Direct link to Feature Development" title="Direct link to Feature Development">​</a></h3>
<p>Let's identify and bring back high quality features to the Polkadot ecosystem.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="pallet-development">Pallet Development<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#pallet-development" class="hash-link" aria-label="Direct link to Pallet Development" title="Direct link to Pallet Development">​</a></h4>
<ul>
<li>Where it is identified as helpful, Substrate Runtime Pallets can be developed which encapsulate features of other protocols.</li>
<li>For example:<!-- -->
<ul>
<li>Account Abstractions</li>
<li>NFT / Fungible Token behaviors</li>
<li>Games</li>
<li>On-Chain Faucets</li>
<li>On-Chain Governance</li>
<li>DAOs</li>
<li>Staking Systems</li>
<li>etc...</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="client-optimizations">Client Optimizations<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#client-optimizations" class="hash-link" aria-label="Direct link to Client Optimizations" title="Direct link to Client Optimizations">​</a></h4>
<p>(questionable how well I would be able to do this alone, but certainly could work with people to make this happen)</p>
<ul>
<li>Where it is identified as helpful, improvements to Substrate Client SDK or the Polkadot Node can be developed which encapsulates the features of other protocols.</li>
<li>For example:<!-- -->
<ul>
<li>Storage caching, optimizations</li>
<li>Syncing speed</li>
<li>Transaction queue</li>
<li>etc...</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="protocol-porting">Protocol Porting<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#protocol-porting" class="hash-link" aria-label="Direct link to Protocol Porting" title="Direct link to Protocol Porting">​</a></h4>
<ul>
<li>Where it is identified as helpful, other protocols can be ported to usable Rust modules / libraries which can be used in the Substrate ecosystem.</li>
<li>For example:<!-- -->
<ul>
<li>Messaging formats / protocols</li>
<li>Encoding schemes</li>
<li>Contract Virtual Machines</li>
<li>etc...</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="video--media-content">Video / Media Content<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#video--media-content" class="hash-link" aria-label="Direct link to Video / Media Content" title="Direct link to Video / Media Content">​</a></h3>
<p>Let's look to promote the information gained from this research to fuel better knowledge of Polkadot's advantages in the ecosystem.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="competitive-battlecard">Competitive Battlecard<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#competitive-battlecard" class="hash-link" aria-label="Direct link to Competitive Battlecard" title="Direct link to Competitive Battlecard">​</a></h4>
<ul>
<li>For each protocol researched, provide a competitive battlecard which allows someone in the Polkadot ecosystem to intelligently counter misinformation and shilling.</li>
<li>Honest criticism of Polkadot where other protocols may be ahead, and suggestions / feedback on how to make up for lost ground.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="youtube-shorts">YouTube Shorts<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#youtube-shorts" class="hash-link" aria-label="Direct link to YouTube Shorts" title="Direct link to YouTube Shorts">​</a></h4>
<ul>
<li>Short form video content to get across main ideas and learnings from the competitive research.</li>
<li>Working with other existing media outlets to help them create similar content for their video/audio/media.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="presentations">Presentations<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#presentations" class="hash-link" aria-label="Direct link to Presentations" title="Direct link to Presentations">​</a></h4>
<ul>
<li>Long form (30 min to 1 hour) presentations which specifically highlight Polkadot and other protocols</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="articles--documentation">Articles / Documentation<a href="https://shawntabrizi.com/blog/2023/04/05/polkadot-competitive-research/#articles--documentation" class="hash-link" aria-label="Direct link to Articles / Documentation" title="Direct link to Articles / Documentation">​</a></h4>
<ul>
<li>Long form written analysis of specific topics and information gained during the research process.</li>
<li>Can be fitted for:<!-- -->
<ul>
<li>Technical Blogs</li>
<li>Marketing Pages</li>
<li>News Outlets (articles)</li>
<li>Technical / Developer Documentation</li>
</ul>
</li>
</ul>]]></content:encoded>
            <category>research</category>
            <category>polkadot</category>
        </item>
        <item>
            <title><![CDATA[A Better Treasury System]]></title>
            <link>https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/</link>
            <guid>https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/</guid>
            <pubDate>Sun, 04 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a repost from the Polkadot forum, where I propose a vision for a better on-chian treasury for the Polkadot DAO.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-a-repost-from-the-polkadot-forum-where-i-propose-a-vision-for-a-better-on-chian-treasury-for-the-polkadot-dao">This is a <a href="https://forum.polkadot.network/t/a-better-treasury-system/291" target="_blank" rel="noopener noreferrer">repost from the Polkadot forum</a>, where I propose a vision for a better on-chian treasury for the Polkadot DAO.<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#this-is-a-repost-from-the-polkadot-forum-where-i-propose-a-vision-for-a-better-on-chian-treasury-for-the-polkadot-dao" class="hash-link" aria-label="Direct link to this-is-a-repost-from-the-polkadot-forum-where-i-propose-a-vision-for-a-better-on-chian-treasury-for-the-polkadot-dao" title="Direct link to this-is-a-repost-from-the-polkadot-forum-where-i-propose-a-vision-for-a-better-on-chian-treasury-for-the-polkadot-dao">​</a></h5>
<p>This post will dump various ideas of mine on how we can improve the treasury system of Polkadot, both on and off chain.</p>
<p>As a Council member on Kusama and Polkadot since the genesis election, I have reviewed, accepted, and even denied many treasury spends, and throughout my experience, I have formed opinions on what I like, and what I think can be improved.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-care">Why Care<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#why-care" class="hash-link" aria-label="Direct link to Why Care" title="Direct link to Why Care">​</a></h2>
<p>I will be very brief here, but I think it is worthwhile to convince those of you reading this post why a focus on Polkadot's treasury system is important.</p>
<p>Ultimately, the Polkadot treasury is the one way that the Polkadot network can reach its hand out into the real world, and make things happen. The treasury is quite a unique feature of Polkadot compared to the last generation of chains.</p>
<p>If we can make sure that the treasury is easy to access for the Polkadot community, it will ensure that we will be able to fund and support growth and development of our ecosystem.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="treasury-today">Treasury Today<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#treasury-today" class="hash-link" aria-label="Direct link to Treasury Today" title="Direct link to Treasury Today">​</a></h3>
<p>The Polkadot treasury can be simplified to two main parts:</p>
<ul>
<li>The Pot - The funds available to the treasury, funded by a portion of the fees on the network.</li>
<li>Spending Logic - Ways for the treasury to transfer funds from the pot to end users.</li>
</ul>
<p>The treasury is currently has 3 spending methods:</p>
<ul>
<li>Tips - Easy process to spend small amounts of treasury funds. Low overhead, relatively hard to abuse.</li>
<li>Proposals - A more laborious process to spend large amounts of treasury funds immediately and to a specific account.</li>
<li>Bounties - The most complex treasury process, which involves multiple actors to coordinate the spending of funds for projects which are agreed upon in advance, but the recipient of the funds may not be known at the time of creation. (this is maybe a bad summary, but yeah, you can <a href="https://wiki.polkadot.network/docs/learn-treasury#bounties-spending" target="_blank" rel="noopener noreferrer">read more about it</a>.)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improving-proposals-treasury-v2">Improving Proposals (Treasury V2)<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#improving-proposals-treasury-v2" class="hash-link" aria-label="Direct link to Improving Proposals (Treasury V2)" title="Direct link to Improving Proposals (Treasury V2)">​</a></h2>
<p>Proposals were designed to be very simple, but I think that some additional complexity can greatly improve the end to end experience of creating and approving large treasury spends.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="proposal-phases">Proposal Phases<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#proposal-phases" class="hash-link" aria-label="Direct link to Proposal Phases" title="Direct link to Proposal Phases">​</a></h3>
<p>Currently, if a team opens a proposal for a treasury spend, if accepted, all of those funds are transferred to the team immediately. This is true for small projects, but also large, multi-year projects.</p>
<p>I have been concerned in the past that unknown teams come to the treasury and ask for a lot of money, for a huge project, and we have no idea how to evaluate if the team will actually deliver that project. We may ask the team to reduce the size of their ask, but then a team may be worried that the treasury will not commit to continuing the project once they get started.</p>
<p>Ultimately the proposal system right now is not actually good for allocating funds for really large projects.</p>
<p>I suggest we introduce some simple phases to each treasury proposal, and have teams ask to allocate funds to each specific phase:</p>
<ol>
<li>Starting Spend</li>
<li>Reoccurring Spend</li>
<li>Final Spend</li>
</ol>
<p>For the sake of example, I will take the role of a team lead who wants to ask for 100,000 DOT to build a new mobile wallet for Polkadot, and then use this role in the sections below.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="starting-spend">Starting Spend<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#starting-spend" class="hash-link" aria-label="Direct link to Starting Spend" title="Direct link to Starting Spend">​</a></h4>
<p>When a team asks for treasury funds, usually they will need some cash up front to get started with the project. This is what the <strong>Starting Spend</strong> can be used for.</p>
<p>Proposals today are basically ALL starting spend. Without having done any work, I would have asked for 100,000 DOT up front, and basically it would have been very hard to get my proposal approved.</p>
<p>In this case, I know I only need 10,000 DOT to get started on this project, and so I only ask for that amount as my Starting spend.</p>
<p>The treasury has less risk at loosing funds to people that do not deliver, and the proposer can still get the up-front capital they need to begin execution of their project.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="reoccurring-spend">Reoccurring Spend<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#reoccurring-spend" class="hash-link" aria-label="Direct link to Reoccurring Spend" title="Direct link to Reoccurring Spend">​</a></h4>
<p>Building a large project may take multiple months or even years. The reoccurring spend is the amount of funds the proposer will need on some reoccurring time scale to keep the project going.</p>
<p>For my example, I expect the project to take around 10 months, and I expect my monthly costs to amount to 5,000 DOT.</p>
<p>In this case, this reoccurring spend logic will be baked into the proposal, and if approved, every month, I can pull from the treasury funds my 5,000 DOT.</p>
<p>In order to get my next months funds, I must also submit a proof of the work done in the last month. This proof does not need to (and cannot really) be verified on chain. Instead, the team puts the data out there, and any user in the Polkadot ecosystem can read the update, and check for themselves the work being done is high quality and worthy of the monthly payments. As you can probably guess, later down we will describe a process where the updates are NOT high quality, and the governance system of Polakdot can end a proposal early, returning any unspent funds back to the treasury.</p>
<p>But generally, this process should be minimal and efficient for the proposing teams. Just provide proof that you have been doing what you said you would, and you can automatically pull out the funds you need to keep building month to month.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="final-spend">Final Spend<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#final-spend" class="hash-link" aria-label="Direct link to Final Spend" title="Direct link to Final Spend">​</a></h4>
<p>Finally, at the end of the project, the development team can potentially get a reward for their hard work done. It could be that the funds requested above were just enough to keep them afloat, but we should reward good contributors to our ecosystem with a profit for their work and hard time.</p>
<p>In this case, I have spent a total of 60,000 DOT for the 10 months of work and the starting spend, and thus my final reward will be 40,000 DOT for a job well done.</p>
<p>This will be a slightly delayed payment, where the proposer can again submit evidence that their work was completed successfully, and the public is given a period of time to review that work, and verify that the initial proposal was indeed satisfied by the work done.</p>
<p>If no one objects to the final spend, the my imaginary team walks away with 40,000 DOT profit on a job well done.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-phases-effect-proposals">How Phases Effect Proposals<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#how-phases-effect-proposals" class="hash-link" aria-label="Direct link to How Phases Effect Proposals" title="Direct link to How Phases Effect Proposals">​</a></h4>
<p>Now lets look at other ways this proposal could have gone, when a team asks for DOT.</p>
<ol>
<li>
<p>Only Ask for Starting Spend</p>
<p>This is exactly how we treat proposals today, and should be backwards compatible if there are UI/UX already developed to optimize this.</p>
</li>
<li>
<p>Only Ask for Reoccurring Spend</p>
<p>In this scenario, I do not ask for any starting spend or final spend reward to execute my proposal. Instead, I simply ask that over the course of 10 months, I get a 10,000 DOT payment each month for the work done.</p>
<p>This might make sense for projects where the treasury is already comfortable with the delivery of a team, and does not feel the need to keep the "DOT profits" from the team until the final spend.</p>
<p>This looks very similar to "child bounties" which exist today on Polkadot.</p>
</li>
<li>
<p>Only Starting Spend and Ending Spend</p>
<p>This might make sense for projects which are short in their timeline, thus the overhead of doing regular updates for the reoccurring spend would rather just be moved to the final spend.</p>
</li>
<li>
<p>Only Ending Spend</p>
<p>If implemented cleverly, this can look very similar to the regular bounties system which exists today for the treasury, and potentially could replace it.</p>
</li>
<li>
<p>Etc...</p>
</li>
</ol>
<p>As you can see, based on the amount of money, the kind of proposal, the trust we have in the proposer, etc... these phases can be tuned to spend the same amount of DOT, but over a different schedule, which allows the public to audit and keep track of the work done.</p>
<p>Additionally, we could potentially simplify UI/UX by combining the behaviors of bounties and proposals under a single unified process.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="other-ideas-for-phases">Other Ideas for Phases<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#other-ideas-for-phases" class="hash-link" aria-label="Direct link to Other Ideas for Phases" title="Direct link to Other Ideas for Phases">​</a></h4>
<p>There are a million other features and nice to haves which can be added to a phase based treasury spend, and will probably need to be in the final implementation:</p>
<ul>
<li>Allowing post-approval adjustments of things like reoccurring spend and final spend amount.</li>
<li>Giving only a fraction of the Final Spend if the final product is "okay", but not great.</li>
<li>Ways to extend the reoccurring spend time period</li>
<li>Ways to pause reoccurring spend, to allow for closer public audit</li>
<li>Ways to update where the spends go</li>
<li>Users placing bonds against asking for funds or stopping a spend from happening</li>
<li>etc...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improving-funds">Improving Funds<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#improving-funds" class="hash-link" aria-label="Direct link to Improving Funds" title="Direct link to Improving Funds">​</a></h2>
<p>In the example above, we talked about a 10 month project, which is asking for 100,000 DOT. But practically speaking, most of us still live in a world where we need fiat to live and pay people for work.</p>
<p>It could be in a bull market, the 100,000 DOT over 10 months could grow a lot in USD value. However, in bear markets, it could be that your estimated monthly payments are not actually enough to keep the project going.</p>
<p>One way or another, I feel the treasury needs to bring some sense of a stable coin to the system.</p>
<p>We could:</p>
<ul>
<li>Have the Polkadot treasury hold and distribute a stable coin.</li>
<li>Record information about the expected DOT value on chain when a proposal is proposed and passed.</li>
<li>Use ideas like "gilt".</li>
<li>other ideas?</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reputation">Reputation<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#reputation" class="hash-link" aria-label="Direct link to Reputation" title="Direct link to Reputation">​</a></h2>
<p>This is more of an offchain recommendation, but I do not find that any UIs today do a good job at representing the history of users who ask for funding from the treasury.</p>
<p>Similarly I don't think we do a good job at making recommendations for new applicants on the size of proposals that the treasury would be comfortable to give out on a first try.</p>
<p>I don't have any specific ideas here, just rough ideas.</p>
<p>For example, imagine the following table:</p>
<table><thead><tr><th># of Proposals Successfully Delivered</th><th>$ of Funds for Next Proposal</th></tr></thead><tbody><tr><td>0</td><td>$10,000</td></tr><tr><td>1</td><td>$50,000</td></tr><tr><td>2</td><td>$100,000</td></tr><tr><td>3</td><td>$500,000</td></tr><tr><td>4</td><td>$1,000,000</td></tr><tr><td>...</td><td>...</td></tr></tbody></table>
<p>I would when users as for a proposal, I should not need to hunt for their history to see if they have delivered on time, that they are asking for an amount appropriate to what they have delivered in the past, etc... It should be a part of the process that this information is presented to everyone, that users will want to build up their reputation, and that they know what is reasonable to get their proposal approved.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="follow-up--impact">Follow Up + Impact<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#follow-up--impact" class="hash-link" aria-label="Direct link to Follow Up + Impact" title="Direct link to Follow Up + Impact">​</a></h2>
<p>This is one of the problems that I think will be solved mostly by Proposal Phases and Reputation, but I want to call it out here as a weak point of the current treasury system.</p>
<p>I have reviewed and approved many different proposals on both the Polkadot and Kusama, however, I find it very hard to track or follow the specific impact of those treasury spends.</p>
<p>I think there is a lot of meta things we can do to improve this kind of stuff.</p>
<p>For example:</p>
<ul>
<li>Add a logo at the top/bottom of applications and websites with things like "Funded by the Polkadot Treasury"</li>
<li>At certain funding amounts, expect / require teams to create videos highlighting their work.<!-- -->
<ul>
<li>Tie those videos on-chain or off-chain to the proposals themselves, and the reputation of the proposers.</li>
</ul>
</li>
<li>Require teams to describe expected impact on the ecosystem, and measure those goals.</li>
<li>etc...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decentralizing-data">Decentralizing Data<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#decentralizing-data" class="hash-link" aria-label="Direct link to Decentralizing Data" title="Direct link to Decentralizing Data">​</a></h2>
<p>At the moment, there is no metadata about treasury spends on-chain. If you want to learn what a proposal, bounty, or tip is trying to do, you need to visit a third party website like Polkassembly to get that data. (tips have a small amount of data, but not that good)</p>
<p>I think we should look to add decentralized forms of the treasury spend metadata on-chain. So, adding some new fields to store and update some IPFS hash, which then links to the actual proposal metadata. This would allow anyone to build their own version of a treasury application, and allow us to iterate much more quickly on providing high quality user experiences.</p>
<p>Ideally, we could do the same thing here with the conversation around treasury spends too, but I am not sure what exactly that would look like.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="metrics">Metrics<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#metrics" class="hash-link" aria-label="Direct link to Metrics" title="Direct link to Metrics">​</a></h2>
<p>I think the general consensus is that the treasury does not spend enough of its funds, but I have still yet to find a place which really paints a clear picture of what is happening with the treasury funds at a high level:</p>
<ul>
<li>Which team(s) has been allocated the most overall funds?</li>
<li>Which teams have had the most proposals approved?</li>
<li>What was the most expensive proposal approved?</li>
<li>What is the ratio of approved to denied proposals?</li>
<li>What percentage of the treasury is spent between spending periods?</li>
<li>What categories have had the most treasury spending?<!-- -->
<ul>
<li>Wallets</li>
<li>Defi</li>
<li>Identity</li>
<li>Privacy</li>
<li>Block Explorers</li>
<li>RPC Nodes</li>
<li>etc...</li>
</ul>
</li>
<li>How much is being burnt from the treasury, and what would that look like at different spending amounts?</li>
</ul>
<p>Once we know at a high level what is happening with the treasury, we can start to give direction and planning to it too. While I am sure that many people are very excited about funding defi projects, my guess is these kinds of proposals are over-represented compared to privacy and identity projects, which is probably a much more compelling use case of Polkadot.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ui--ux-ideas">UI / UX Ideas<a href="https://shawntabrizi.com/blog/2022/09/04/a-better-treasury-system/#ui--ux-ideas" class="hash-link" aria-label="Direct link to UI / UX Ideas" title="Direct link to UI / UX Ideas">​</a></h2>
<p>I want to write down more concrete ideas for UI/UX which I think can be worked on in the near future and have positive impact into the involvement of users into our democracy system.</p>
<p>I am not a UX guy, so here are some very rough mocks:</p>
<p><img decoding="async" loading="lazy" alt="Tinder Gov 1" src="https://shawntabrizi.com/assets/images/tinder-gov-1-af743262e6fed8c0c6daaff2616e37fa.jpeg" width="1380" height="678" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="Tinder Gov 2" src="https://shawntabrizi.com/assets/images/tinder-gov-2-98d3e072425b29ed9186208cabadd9e3.jpeg" width="1380" height="712" class="img_ev3q"></p>
<p>The goal is to make a <strong>proactive</strong> and <strong>simple to use</strong> application for people to vote with.</p>
<ul>
<li>Users can be notified on their mobile / desktop when new proposals are available to vote on.</li>
<li>Users are presented with a card containing all the relevant information users need to make their decision.</li>
<li>Voting can be as easy as swiping left or right to the card.</li>
<li>Users can go through all proposals and make their decisions.</li>
<li>At the end, a summary page is shown to the user, and a single batch transaction is submitted for all of the votes.</li>
</ul>
<p>I think something like this could greatly increase voter participation. We would probably need custom cards for different kinds of proposals like:</p>
<ul>
<li>Runtime Upgrades</li>
<li>Treasury Spends (tips, proposals, etc...)</li>
<li>Fellowship / Society</li>
<li>Configuration changes (staking, parachains, etc...)</li>
<li>General extrinsics which do not match a category above</li>
</ul>
<p>Beyond this, I think we need to create a "dashboard" for governance similar to the successful <a href="https://staking.polkadot.network/#/overview" target="_blank" rel="noopener noreferrer">Staking Dashboard</a>.</p>
<p>The main features I would want to see in the dashboard is individual / group profiles, and a simple to use proposal creation form. It is possible we would want to build these functionalities on top of an existing platform like <a href="https://polkadot.polkassembly.io/" target="_blank" rel="noopener noreferrer">Polkassembly</a>.</p>
<p>For profiles, we will need a history of treasury spends in the past so that we can do the reputation and follow up / impact ideas I originally posted.</p>
<ul>
<li>There should be a process for organizations to easily create a multisig with the individual users</li>
<li>Organization profiles should list the users of that multisig</li>
<li>All profiles should have a list of previous proposals they submitted, whether they passed, and any details on the impact of those proposals.</li>
<li>Any other details which allows organizations and individuals to build up a <strong>reputation</strong> which can help sway the vote of people one way or another.</li>
</ul>
<p>Finally, the current method for people to create proposals is to fill out a word document, but I think this process can be made much more streamlined and easy with a web form to fill out.</p>
<p><img decoding="async" loading="lazy" alt="Create Proposal" src="https://shawntabrizi.com/assets/images/create-proposal-8f6af90da2577562622aac11ef1c2805.png" width="1380" height="760" class="img_ev3q"></p>
<p>Compare that to this: <a href="https://docs.google.com/document/d/1-b_DQXHVyRuAoYubCtL9dk0R6a_ev7xbwYMV518ONpo/edit" target="_blank" rel="noopener noreferrer">https://docs.google.com/document/d/1-b_DQXHVyRuAoYubCtL9dk0R6a_ev7xbwYMV518ONpo/edit</a></p>
<p>In this case, the UI can do a few things:</p>
<ul>
<li>Give users a template expected for filling out treasury proposals.</li>
<li>Detect organizations, and make suggestions based on that.<!-- -->
<ul>
<li>For example, if the beneficiary has no identity, we can suggest that the user creates an on-chain identity for the account.</li>
<li>If the beneficiary has little or no reputation, we can put a warning if the user is asking for too mach funds. Otherwise, we can suggest to the user an upper limit based on their history and reputation.</li>
</ul>
</li>
<li>We can submit the proposal into a public review draft, which is handled off-chain, and allows people to get fast feedback before officially making the submission on-chain.</li>
<li>The entire proposal can be turned into a well defined format, and uploaded to the chain using the preimage pallet and on-chain metadata. See <a href="https://github.com/paritytech/substrate/pull/12568" target="_blank" rel="noopener noreferrer">https://github.com/paritytech/substrate/pull/12568</a></li>
</ul>
<p>As always, these are just ideas, probably a lot has been built already, and some people with better design tastes than me can make these things a reality.</p>
<p>Continue the discussion on the <a href="https://forum.polkadot.network/t/a-better-treasury-system/291" target="_blank" rel="noopener noreferrer">Polkadot Forum</a>;</p>]]></content:encoded>
            <category>treasury</category>
            <category>polkadot</category>
        </item>
        <item>
            <title><![CDATA[The Merge of ink! and FRAME]]></title>
            <link>https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/</link>
            <guid>https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/</guid>
            <pubDate>Thu, 11 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I propose a better developer experience and pathway for developers in the Polkadot ecosystem by merging the development language used for ink! smart contracts and FRAME pallets.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-propose-a-better-developer-experience-and-pathway-for-developers-in-the-polkadot-ecosystem-by-merging-the-development-language-used-for-ink-smart-contracts-and-frame-pallets">In this post, I propose a better developer experience and pathway for developers in the Polkadot ecosystem by merging the development language used for ink! smart contracts and FRAME pallets.<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#in-this-post-i-propose-a-better-developer-experience-and-pathway-for-developers-in-the-polkadot-ecosystem-by-merging-the-development-language-used-for-ink-smart-contracts-and-frame-pallets" class="hash-link" aria-label="Direct link to In this post, I propose a better developer experience and pathway for developers in the Polkadot ecosystem by merging the development language used for ink! smart contracts and FRAME pallets." title="Direct link to In this post, I propose a better developer experience and pathway for developers in the Polkadot ecosystem by merging the development language used for ink! smart contracts and FRAME pallets.">​</a></h5>
<p><img decoding="async" loading="lazy" alt="Pathway for a developer" src="https://shawntabrizi.com/assets/images/the-merge-8e2accb5aa4d748d0de84897b4b34c71.jpeg" width="1380" height="776" class="img_ev3q"></p>
<p>ink! and FRAME are two Rust based languages developed by Parity for developing state transition functions. The first focuses on smart contracts, and the second focuses on the blockchain runtime.</p>
<p>Both of these languages heavily rely on Rust macros which form an eDSL for developing these decentralized applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="vision">Vision<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#vision" class="hash-link" aria-label="Direct link to Vision" title="Direct link to Vision">​</a></h3>
<p>In short, I believe that Wasm Smart Contract and Substrate Runtime development could use a single shared language, and we could continue to brand that language as ink!.</p>
<p>ink! will be a general language for developing decentralized applications in the Substrate / Polkadot ecosystem.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why">Why<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#why" class="hash-link" aria-label="Direct link to Why" title="Direct link to Why">​</a></h3>
<p>Here are some of the reasons why a merge of ink! and FRAME would be valuable to us and our ecosystem.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="reduced-onboarding-costs">Reduced Onboarding Costs<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#reduced-onboarding-costs" class="hash-link" aria-label="Direct link to Reduced Onboarding Costs" title="Direct link to Reduced Onboarding Costs">​</a></h4>
<p>Parity is working on developing two distinct developer communities at the moment: ink! Smart Contract Developers and FRAME Runtime Developers.</p>
<p>Practically speaking these two communities do not share much besides working within the Substrate / Polkadot ecosystem, and building decentralized applications in Rust.</p>
<p>There is a great potential opportunity to combine these ecosystems, and have them work together on a single shared goal.</p>
<p>Imagine you go to a conference, and rather than there being multiple different workshops on ink! and FRAME, there is instead a single set of workshops on a single language with different levels of difficulty, ranging from contract development, to basic runtime development, to advance runtime development.</p>
<p>Documentation, videos, and everything else related to education become more simple, and from this, we will reduce the costs of onboarding new developers into our ecosystem.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="raw-speed-improvements">Raw Speed Improvements<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#raw-speed-improvements" class="hash-link" aria-label="Direct link to Raw Speed Improvements" title="Direct link to Raw Speed Improvements">​</a></h4>
<p>One of the original sells of Polkadot is to provide a scalability solution to contract developers that feel limited by a single contract chain.</p>
<p>It is likely that ink! contract developers will face similar scaling issues on their layer 1 chains as other parachains.</p>
<p>We know that by simply running code within the Substrate runtime environment, we can get "off the chart" performance increases.</p>
<p><img decoding="async" loading="lazy" alt="Pathway for a developer" src="https://shawntabrizi.com/assets/images/execution-time-06f397b3601209f1d2364d8914fa796b.png" width="1080" height="642" class="img_ev3q"></p>
<blockquote>
<p>In the graph above, smaller is better.</p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="parachain-lifecycle">Parachain Lifecycle<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#parachain-lifecycle" class="hash-link" aria-label="Direct link to Parachain Lifecycle" title="Direct link to Parachain Lifecycle">​</a></h4>
<p>Another problem we can solve here making development on Polkadot more approachable.</p>
<p>Currently, a developer in the Polkadot ecosystem basically needs to believe that their idea is good enough to build a whole team, win a parachain slot, launch, and maintain.</p>
<p>There is basically no room here for simply experimenting with the technology. Allowing users to write a contract, knowing that they can one day use that same code to then launch a parathread or parachain is a great sell for people to feel that even small investments in our ecosystem are worthwhile.</p>
<p>The story becomes:</p>
<ul>
<li>Do you have an idea?<!-- -->
<ul>
<li>Make a contract! Try it out! Fast, easy, and nearly zero overhead for you.</li>
</ul>
</li>
<li>Did you validate your idea with a contract?<!-- -->
<ul>
<li>Upgrade to a parathread! Get the blazing speeds of working in the runtime, with little to no additional coding required! We can even help you migrate your contract data to a parathread.</li>
</ul>
</li>
<li>Is your parathread going viral?<!-- -->
<ul>
<li>Upgrade it to a parachain! Guarantee your cost of business over the next 2 years.</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how">How<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#how" class="hash-link" aria-label="Direct link to How" title="Direct link to How">​</a></h3>
<p>I claim that every ink! Smart Contract is a valid Substrate Runtime. That is, the set of applications you can develop with ink! is a strict subset of the set of applications you can build with FRAME.</p>
<p>At a high level, both languages break down application development into these components:</p>
<ul>
<li>Storage</li>
<li>Calls / Messages</li>
<li>Events</li>
<li>Errors</li>
<li>Origin / Caller</li>
<li>etc...</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="ink-example">ink! Example<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#ink-example" class="hash-link" aria-label="Direct link to ink! Example" title="Direct link to ink! Example">​</a></h4>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#![cfg_attr(not(feature = </span><span class="token attribute attr-name string" style="color:#e3116c">"std"</span><span class="token attribute attr-name" style="color:#00a4db">), no_std)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> ink_lang </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ink</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[ink::contract]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">flipper</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[ink(storage)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Flipper</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Flipper</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/// Creates a new flipper smart contract initialized with the given value.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token attribute attr-name" style="color:#00a4db">#[ink(constructor)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">init_value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> init_value </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/// Creates a new flipper smart contract initialized to `false`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token attribute attr-name" style="color:#00a4db">#[ink(constructor)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Default</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/// Flips the current value of the Flipper's boolean.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token attribute attr-name" style="color:#00a4db">#[ink(message)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">flip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/// Returns the current value of the Flipper's boolean.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token attribute attr-name" style="color:#00a4db">#[ink(message)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">tests</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> ink_lang </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ink</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token attribute attr-name" style="color:#00a4db">#[ink::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">default_works</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> flipper </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">flipper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token attribute attr-name" style="color:#00a4db">#[ink::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">it_works</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> flipper </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">flipper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            flipper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flipper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="frame-example">FRAME Example<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#frame-example" class="hash-link" aria-label="Direct link to FRAME Example" title="Direct link to FRAME Example">​</a></h4>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#![cfg_attr(not(feature = </span><span class="token attribute attr-name string" style="color:#e3116c">"std"</span><span class="token attribute attr-name" style="color:#00a4db">), no_std)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">pallet</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">mock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[frame_support::pallet]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">pallet</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">frame_support</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">pallet_prelude</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">frame_system</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">pallet_prelude</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::pallet]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::generate_store(pub(super) trait Store)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Pallet</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::config]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">trait</span><span class="token plain"> </span><span class="token type-definition class-name">Config</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">frame_system</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Config</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::storage]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">Flipper</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">StorageValue</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ValueQuery</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::genesis_config]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">GenesisConfig</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> start_value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(feature = </span><span class="token attribute attr-name string" style="color:#e3116c">"std"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">GenesisConfig</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> start_value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::genesis_build]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Config</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">GenesisBuild</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">GenesisConfig</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">start_value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::call]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Config</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">Pallet</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token attribute attr-name" style="color:#00a4db">#[pallet::weight(10_000 + T::DbWeight::get().writes(1))]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">flip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_origin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">OriginFor</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">DispatchResult</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">mutate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">value</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">crate</span><span class="token module-declaration namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token module-declaration namespace" style="opacity:0.7">mock</span><span class="token module-declaration namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">new_test_ext</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">TemplateModule</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Test</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">default_works</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token function" style="color:#d73a49">new_test_ext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute_with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">it_works</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token function" style="color:#d73a49">new_test_ext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute_with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">TemplateModule</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">flip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Origin</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">is_ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Flipper</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>These components are simplified and exposed to the user in an expected syntax. This eDSL is then parsed by the macro, and then regular Rust code is generated in the background, which calls low level apis that access the underlying VM environment.</p>
<p>My (naive) belief is that we can manipulate these macros to basically fork the underlying generated code whether</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">                                  ┌───────────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │               │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   ink! dApp   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   ─────────   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   Storage     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   Calls       │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   Events      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   Errors      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │   etc...      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  │               │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  └───────┬───────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌──────────────────────┐                  │                   ┌──────────────────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Target Contracts API │                  ▼                   │   Target FRAME API   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ ──────────────────── │                                      │ ──────────────────── │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │ ◄── ink::contract or ink::pallet ──► │ sp-io w/ hashed keys │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │ dispatchable trait   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │ outer event enum     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │ dispatchable error   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │                      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │                      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │                      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│                      │                                      │                      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──────────────────────┘                                      └──────────────────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the case where someone built an ink! smart contract, without any changes (maybe just benchmarks), we should be able to compile it to a Substrate Runtime.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="concerns">Concerns<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#concerns" class="hash-link" aria-label="Direct link to Concerns" title="Direct link to Concerns">​</a></h3>
<ul>
<li>Is it possible?</li>
<li>Is it maintainable?</li>
<li>Contracts are immutable by nature, where pallets are not</li>
<li>Polkadot does not treat contracts as a first class entity today, should the narrative change?</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="known-problems">Known Problems<a href="https://shawntabrizi.com/blog/2022/08/11/the-merge-of-ink-and-frame/#known-problems" class="hash-link" aria-label="Direct link to Known Problems" title="Direct link to Known Problems">​</a></h3>
<ul>
<li>weights / metering</li>
<li>hooks</li>
<li>runtime config</li>
<li>coupling of pallets / contracts</li>
<li>low level api calls (specific to runtime or contract)</li>
<li>The <code>&lt;T&gt;</code> runtime</li>
<li>Potentially multi-ink things cannot easily talk to each other (contract and pallet have a hard time to talk to each other)</li>
<li>Release strategy (upgrades are harder in ink!)</li>
<li>No errors with data</li>
<li>panics!</li>
</ul>]]></content:encoded>
            <category>frame</category>
            <category>ink</category>
            <category>polkadot</category>
            <category>devex</category>
            <category>smart contract</category>
        </item>
        <item>
            <title><![CDATA[Web3 Reading List]]></title>
            <link>https://shawntabrizi.com/blog/personal/web3-reading-list/</link>
            <guid>https://shawntabrizi.com/blog/personal/web3-reading-list/</guid>
            <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will try to convince you to quit your current job and join the Web3 movement to change the way the world works.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-try-to-convince-you-to-quit-your-current-job-and-join-the-web3-movement-to-change-the-way-the-world-works">In this post, I will try to convince you to quit your current job and join the Web3 movement to change the way the world works.<a href="https://shawntabrizi.com/blog/personal/web3-reading-list/#in-this-post-i-will-try-to-convince-you-to-quit-your-current-job-and-join-the-web3-movement-to-change-the-way-the-world-works" class="hash-link" aria-label="Direct link to In this post, I will try to convince you to quit your current job and join the Web3 movement to change the way the world works." title="Direct link to In this post, I will try to convince you to quit your current job and join the Web3 movement to change the way the world works.">​</a></h5>
<p>Having worked professionally in the blockchain space for the last 4 years, it can be important to reflect on the influences that got me here in the first place.</p>
<p>I was quite happy with my job at Microsoft, and still think that Seattle is my favorite place where I have lived. (although Puerto Rico comes close...)</p>
<p>So then, what could compel me to quit my job, move to a 30m<sup>2</sup> apartment in Berlin, at half the pay?</p>
<p>To discover that, you will need to read these 5 influential books which convinced me to make the jump into a job in Web3. If these books resonate with you, then maybe it is time for you to take the jump too!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-lean-startup">The Lean Startup<a href="https://shawntabrizi.com/blog/personal/web3-reading-list/#the-lean-startup" class="hash-link" aria-label="Direct link to The Lean Startup" title="Direct link to The Lean Startup">​</a></h2>
<p>Written by <a href="https://en.wikipedia.org/wiki/Eric_Ries" target="_blank" rel="noopener noreferrer">Eric Ries</a></p>
<img src="https://shawntabrizi.com/assets/images/the-lean-startup.jpg" height="300px">
<p>This is my go-to book on how to effectively and successfully lead a project at a tech company. This was the way my mentor at Microsoft (Praveen Rutnam) ran his team, and this is the way I try to run all of my teams here at Parity.</p>
<blockquote>
<p>Reading Time: 6 hours, 299 pages.</p>
</blockquote>
<p><a href="https://contentfiesta.com/book-notes/the-lean-startup-summary/" target="_blank" rel="noopener noreferrer">Summary</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="zero-to-one">Zero to One<a href="https://shawntabrizi.com/blog/personal/web3-reading-list/#zero-to-one" class="hash-link" aria-label="Direct link to Zero to One" title="Direct link to Zero to One">​</a></h2>
<p>Written by <a href="https://en.wikipedia.org/wiki/Peter_Thiel" target="_blank" rel="noopener noreferrer">Peter Thiel</a></p>
<img src="https://shawntabrizi.com/assets/images/zero-to-one.jpg" height="300px">
<p>This book touches on the challenges of being the first to do something, and how to overcome those challenges and change the world along the way. This book is reassuring in times of doubt, since our goal at Parity is to fundamentally change the world with blockchain. Thiel uses his experiences from the dot com bubble, and I think there are many noticeable parallels happening in our space.</p>
<blockquote>
<p>Reading Time: 4 hours, 195 pages in book</p>
</blockquote>
<p><a href="https://howdo.com/book-summaries/zero-to-one-summary-and-review/" target="_blank" rel="noopener noreferrer">Summary</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="radical-markets">Radical Markets<a href="https://shawntabrizi.com/blog/personal/web3-reading-list/#radical-markets" class="hash-link" aria-label="Direct link to Radical Markets" title="Direct link to Radical Markets">​</a></h2>
<p>Written by <a href="https://en.wikipedia.org/wiki/Eric_Posner" target="_blank" rel="noopener noreferrer">Eric A. Posner</a> and <a href="https://en.wikipedia.org/wiki/Glen_Weyl" target="_blank" rel="noopener noreferrer">E. Glen Weyl</a></p>
<img src="https://shawntabrizi.com/assets/images/radical-markets.jpg" height="300px">
<p>This book is a bit denser and more academic than the others, but suggests tangible solutions to some of the many social and financial problems that we are trying to solve with blockchain and Web3 technology.</p>
<p>In fact, at one point, they mention that some of their suggestions would only be possible on blockchain technologies.</p>
<p>Better voting systems, ways to control and reduce the costs of land ownership, better immigration programs, disassembling monopolies, etc... If the problems in this book resonate with you, you are definitely headed toward a Web3 future.</p>
<blockquote>
<p>Reading Time: 8 hours, 368 pages in book</p>
</blockquote>
<p><a href="https://vitalik.ca/general/2018/04/20/radical_markets.html" target="_blank" rel="noopener noreferrer">Summary</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-starfish-and-the-spider">The Starfish and the Spider<a href="https://shawntabrizi.com/blog/personal/web3-reading-list/#the-starfish-and-the-spider" class="hash-link" aria-label="Direct link to The Starfish and the Spider" title="Direct link to The Starfish and the Spider">​</a></h2>
<p>Written by Ori Brafman and <a href="https://en.wikipedia.org/wiki/Rod_Beckstrom" target="_blank" rel="noopener noreferrer">Rod Beckstrom</a></p>
<img src="https://shawntabrizi.com/assets/images/the-starfish-and-the-spider.jpg" height="300px">
<p>This book paints an awesome picture as to the unstoppability of decentralized organizations, and how effective decentralized organizations can form.</p>
<p>When I think about what Parity wants to be, I see a starfish, and I think that we should learn from other organizations which have done this in the past (as covered in this book).</p>
<blockquote>
<p>Reading Time: 5 hours, 240 pages in book</p>
</blockquote>
<p><a href="https://wikileaks.org/gifiles/attach/23/23016_Starfish%20and%20the%20Spider.pdf" target="_blank" rel="noopener noreferrer">Summary</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-internet-of-money">The Internet of Money<a href="https://shawntabrizi.com/blog/personal/web3-reading-list/#the-internet-of-money" class="hash-link" aria-label="Direct link to The Internet of Money" title="Direct link to The Internet of Money">​</a></h2>
<p><a href="https://en.wikipedia.org/wiki/Andreas_Antonopoulos" target="_blank" rel="noopener noreferrer">Written by Andreas M. Antonopoulos</a></p>
<img src="https://shawntabrizi.com/assets/images/the-internet-of-money.jpg" height="300px">
<p>Andreas is famous in the Bitcoin world, and has even published the book <a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreferrer">Mastering Ethereum</a> with my boss Gavin Wood.</p>
<p>This book is a collection of talks he has given around the world, describing the problems which Bitcoin and blockchain can solve. This is the book that I send to anyone who asks "what is blockchain and why should I care?".</p>
<blockquote>
<p>Reading Time: 3 hours, 150 pages in book</p>
</blockquote>
<p>You can find the book free online <a href="https://github.com/erangadbw/IoMv1" target="_blank" rel="noopener noreferrer">here</a>.</p>]]></content:encoded>
            <category>books</category>
            <category>web3</category>
        </item>
        <item>
            <title><![CDATA[Transparent Keys in Substrate]]></title>
            <link>https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/</link>
            <guid>https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/</guid>
            <pubDate>Sun, 29 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, we will take a look at the new Substrate storage hashers that allow you to transparently extract the keys for any given value in Substrate.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-we-will-take-a-look-at-the-new-substrate-storage-hashers-that-allow-you-to-transparently-extract-the-keys-for-any-given-value-in-substrate">In this post, we will take a look at the new Substrate storage hashers that allow you to transparently extract the keys for any given value in Substrate.<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#in-this-post-we-will-take-a-look-at-the-new-substrate-storage-hashers-that-allow-you-to-transparently-extract-the-keys-for-any-given-value-in-substrate" class="hash-link" aria-label="Direct link to In this post, we will take a look at the new Substrate storage hashers that allow you to transparently extract the keys for any given value in Substrate." title="Direct link to In this post, we will take a look at the new Substrate storage hashers that allow you to transparently extract the keys for any given value in Substrate.">​</a></h5>
<p>The more I learn about Substrate (and blockchain development in general), the more I come to understand the importance of storage design.</p>
<p>In retrospect, I guess this is obvious since the blockchain is all about coming to consensus about an underlying database, but I cannot overemphasize the fact that once you begin to fully understand the storage layers of Substrate, design decisions across the entire platform start to make more sense.</p>
<p>This blog post will be an extension of a previous post I wrote <a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/">Interacting with the Substrate RPC Endpoint</a>, where we investigated a little about how Substrate storage works, and how you can use basic RPC requests, along with the Substrate metadata, to retrieve information from the chain about the current state of the runtime.</p>
<p>This blog post will dive into the changes introduced to the Substrate storage keys since my last post by this PR: <a href="https://github.com/paritytech/substrate/pull/5226" target="_blank" rel="noopener noreferrer">Refactor away from opaque hashes #5226</a></p>
<p>Ultimately, I hope to show you how a simple design decision about the key format for Substrate storage maps has made the platform infinitely more friendly to external APIs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="opaque-storage-keys">Opaque Storage Keys<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#opaque-storage-keys" class="hash-link" aria-label="Direct link to Opaque Storage Keys" title="Direct link to Opaque Storage Keys">​</a></h2>
<p>Just do to a quick recap, in <a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/">my last post about interacting with Substrate storage via RPC</a>, we showed an example of how you can get all the balances in your Substrate blockchain using the <code>getKeys</code> query and knowledge about the underlying prefix tries used in runtime storage.</p>
<blockquote>
<p>This means you could actually use the <code>state_getKeys</code> API to get all the storage keys for all the free balances in your system!</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "state_getKeys", "params": ["0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4"]}' http://localhost:9933</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"jsonrpc":"2.0","result":[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4024cd62ab7726e039438193d4bbd915427f2d7de85afbcf00bd16fadbcad6aed",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b42e3fb4c297a84c5cebc0e78257d213d0927ccc7596044c6ba013dd05522aacba",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b44724e5390fcf0d08afc9608ff4c45df257266ae599ac7a32baba26155dcf4402",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b454b75224d766c852ac60eb44e1329aec5058574ae8daf703d43bc2fbd9f33d6c",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b465d0de2c1f75d898c078307a00486016783280c8f3407db41dc9547d3e3d651e",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b46b1ab1274bcbe3a4176e17eb2917654904f19b3261911ec3f7a30a473a04dcc8",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b477d14a2289dda9bbb32dd9313db096ef628101ac5bbb3b19301ede2c61915b89",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4927407fbcfe5afa14bcfb44714a843c532f291a9c33612677cb9e0ae5e2bd5de",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b494772f97f5f6b539aac74e798bc395119f39603402d0c85bc9eda5dfc5ae2160",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b49a9304efeee429067b2e8dfbcfd8a22d96f9d996a5d6daa02899b96bd7a667b1",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b49ea52149af6b15f4d523ad4342f63089646e29232a1777737159c7bc84173597",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4a315ee9e56d2f3bb24992a1cff6617b0f7510628a15722b680c42c2be8bb7452",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4c4a80eb5e32005323fb878ca749473d7e5f40d60ed5e74e887bc125a3659f258"],"id":1}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</blockquote>
<p>However, I also mentioned that this would only allow you to calculate the total balance in your system. It would <em>not</em> necessarily allow you to know the individual balances of all the accounts because those Account IDs are cryptographically hashed and placed into the key. To figure out which account corresponds to each of the keys above, you would need to know the account ahead of time and then verify that the hash matches the bytes at the end of one of these keys.</p>
<p>In general, it is important that we use hashes in the construction of the storage key to <a href="https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/">avoid unbalanced tries</a>. Imagine instead we use the raw Account ID rather than the hash of it in constructing these storage keys. I could attack a Substrate chain by transferring a very small balance to all accounts whose hexadecimal representation start with <code>0x69</code>. This means that any <em>real</em> account that also shares that first byte would be more heavy to access since we will need to traverse past all of the "dust" accounts in the trie.</p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/unbalanced-trie-bbdaf53c815b5a70738b114624264c8a.png" width="3000" height="1005" class="img_ev3q"></p>
<p>You can see in this illustration, most accounts take only 4 hops to get access to the final value, but some in the middle can take up to 6 hops. This is a very tame example of an "unbalanced trie", but when actually attacking a system, you can imagine introducing many extra additional hops to access some user accounts.</p>
<p>So we can't use the Account ID directly because it is not safe for the chain, and using hashes is completely opaque to the user... Is there maybe some middle ground?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="customizable-storage-keys">Customizable Storage Keys<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#customizable-storage-keys" class="hash-link" aria-label="Direct link to Customizable Storage Keys" title="Direct link to Customizable Storage Keys">​</a></h2>
<p>This whole blog is about customizable storage keys in Substrate, so before we jump into it, lets talk about what this means.</p>
<p>In Substrate, each Pallet you design can introduce new storage items that will become part of your blockchain's state. These storage items can be simple single value items, or more complex storage maps. When you define storage maps in substrate, you must also specify a <code>hasher</code> that you want to use:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Foo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> map </span><span class="token function" style="color:#d73a49">hasher</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">blake2_128_concat</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><span class="token operator" style="color:#393A34">^</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You actually have the flexibility in Substrate to change which <code>hasher</code> gets used for each different storage map, and as a result, change the way your underlying storage keys are saved in the Substrate database. The <code>hasher</code> you select will be a part of blockchain's metadata, so any external UI will know what to do in order to correctly access your Substrate storage.</p>
<p>But you might be asking, what do these <code>hasher</code>s do?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="concatenating-hashers">Concatenating Hashers<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#concatenating-hashers" class="hash-link" aria-label="Direct link to Concatenating Hashers" title="Direct link to Concatenating Hashers">​</a></h2>
<p>In <a href="https://github.com/paritytech/substrate/pull/5226" target="_blank" rel="noopener noreferrer">PR #5226</a> a new set of "hashers" were introduced into the Substrate runtime storage system:</p>
<ul>
<li><code>blake2_128_concat</code></li>
<li><code>twox_64_concat</code></li>
</ul>
<p>These hashers are precisely a middle ground between using an opaque hash and using the raw key value, like an Account ID.</p>
<p>When we use these hashers, we take a key, find the hash, and then append to the end the hash the raw key itself. For example:</p>
<p><strong>Account ID</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Account Bytes in Hex</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Blake2 128 of Account Hex</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0xde1e86a9a8c739864cf3cc5ec2bea59f</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Blake2 128 Concat of Account Hex</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0xde1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-------------- hash --------------++++++++++++++++++++++++++ raw key +++++++++++++++++++++++++++++</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So if you have this <code>blake2_128_concat</code> formed key, you will directly be able to find the underlying Account ID used to generate the key, you just need to look at the last 32 bytes. But since it is prefixed with a hash, it is also safe to use in the underlying storage trie since it cannot be trivially manipulated to attack the system as described in the previous section.</p>
<p>You can see these concatenating hashers comes in two flavors: <code>twox_64</code> and <code>blake2_128</code>. The only difference here is the security provided by the underlying hashing algorithm. <code>twox</code>/<code>xxhash</code> is not a cryptographically secure hashing algorithm, but it is significantly faster to execute. <code>blake2</code> is cryptographically secure, but also more resource heavy. So, when should we choose to use each of these?</p>
<p>That ultimately depends on how much control the users have over the value being hashed. Remember, we must always assume that the users of our blockchain are malicious, and build our chain to be resistent to that malicious activity.</p>
<p>So let's talk about when it would be appropriate to use each hasher and also show some examples of they they are being used in Substrate today.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="blake2-128-concat">Blake2 128 Concat<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#blake2-128-concat" class="hash-link" aria-label="Direct link to Blake2 128 Concat" title="Direct link to Blake2 128 Concat">​</a></h3>
<p><code>blake2_128_concat</code> should be the default choice for any storage key. Because the prefix of the final key uses Blake2, a cryptographically secure hashing algorithm, we need not worry about the content of the starting key. This <code>hasher</code> will work for anything.</p>
<p>So where is it used?</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// The full account information for a particular account ID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token class-name">Account</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">account</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  map </span><span class="token function" style="color:#d73a49">hasher</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">blake2_128_concat</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">AccountInfo</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Index</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountData</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is the <code>Account</code> storage item in the FRAME System. Your default substrate configuration will put all user balances in here.</p>
<p>So why must we use <code>blake2_128_concat</code> for this storage item?</p>
<p>Well, this storage item can be <em>completely</em> controlled by external users. An Account ID (as implemented in a Substrate node) is any valid 32 bytes. When you make a transfer, you can specify any 32 bytes as the recipient of that balance transfer. That account need not have an existing balance or even a private key for someone to access it. So the attack we described earlier in the article where a malicious user could overpopulate parts of the trie still applies. Unfortunately, a non-cryptographic hashing algorithm like <code>twox</code> would not really help stop this attack. A malicious user would simply "mine" for an arbitrary account that generates a <code>twox</code> hash starting with some prefix, and perform the same attack. Because the <code>twox</code> hasher is not cryptographically secure, this kind of mining attack is not hard to the attacker.</p>
<p>So given that the starting key of this Storage Map is in complete and full control of the users in your network, we must use <code>blake2</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="twox-64-concat">TwoX 64 Concat<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#twox-64-concat" class="hash-link" aria-label="Direct link to TwoX 64 Concat" title="Direct link to TwoX 64 Concat">​</a></h3>
<p><code>twox_64_concat</code> should only be used as an optimization to <code>blake2_128_concat</code> in situations where you know that starting key cannot be chosen arbitrarily by your users.</p>
<p>Let's look at a few ways it is used in Substrate:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="incrementing-index">Incrementing Index<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#incrementing-index" class="hash-link" aria-label="Direct link to Incrementing Index" title="Direct link to Incrementing Index">​</a></h4>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// The next free referendum index, aka the number of referenda started so far.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token class-name">ReferendumCount</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">referendum_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">_</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token class-name">ReferendumIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ReferendumIndex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// Information concerning any given referendum.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token class-name">ReferendumInfoOf</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">referendum_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  map </span><span class="token function" style="color:#d73a49">hasher</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">twox_64_concat</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token class-name">ReferendumIndex</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">Option</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">ReferendumInfo</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">BlockNumber</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Hash</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">BalanceOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Referendums are a part of Substrate's Democracy Pallet, allowing people to execute on-chain governance which can evolve your Substrate chain. Here you will see that we place information about an ongoing referendum into a map where the key uses <code>twox_64_concat</code>.</p>
<p>The starting key in this situation is a <code>ReferendumIndex</code>, which is simply a value that will be incremented for each new referendum. I have included the <code>ReferendumCount</code> storage item above to show you were the current <code>ReferendumIndex</code> is being tracked. Technically speaking, the starting key of a referendum is allowed to be any <code>ReferendumIndex</code> value. However, practically speaking, this value is not really in control of the end user. If a malicious user wants to insert some data where <code>ReferendumIndex = 420</code>, they will need to open up 419 other referendums, all of which has some underlying economic cost to the user (a deposit, a transaction fee, etc...).</p>
<p>And that is just to populate one key!</p>
<p>So a user can only manipulate the <code>ReferendumIndex</code> by creating more referendums, and ultimately, that is within the safety conditions of what the <code>twox</code> hasher can provide. Do note though, that if it was <em>much</em> easier for a user to increment this referendum count, for example by submitting a low cost transaction or a transaction which allows them to increment the index multiple spots at a time, then it is possible that <code>twox_64_concat</code> would not be good enough again. You will need to justify the use on a case by base basis.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="real-accounts">Real Accounts<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#real-accounts" class="hash-link" aria-label="Direct link to Real Accounts" title="Direct link to Real Accounts">​</a></h4>
<p>Let's stay in the Democracy Pallet.</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// All votes for a particular voter. We store the balance for the number of votes that we</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// have recorded. The second item is the total amount of delegations, that will be added.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token class-name">VotingOf</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> map </span><span class="token function" style="color:#d73a49">hasher</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">twox_64_concat</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">Voting</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">BalanceOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">BlockNumber</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here we have all of the votes of users in our system for various referendums or proposals. You can see that this storage map is very similar to the <code>Account</code> storage item that we used <code>blake2_128_concat</code> for, as it maps from Account ID to some value.</p>
<p>So why can we use <code>twox_64_concat</code> here and not there?</p>
<p>Well the way this storage item is populated is very different than in the case of managing user balances. Only when a user submits a vote onto the blockchain will this storage item be populated. Specifically, this implies the user has the private key to the account in question. If an attacker wanted to put onto the blockchain some data under an arbitrary public key, they would need to generate private keys until one had the corresponding public key they wanted. But at that point, it is as difficult to attack as a regular cryptographic hash.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="identity">Identity<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#identity" class="hash-link" aria-label="Direct link to Identity" title="Direct link to Identity">​</a></h3>
<p>One last option you have which I did not mention yet is the <code>identity</code> <code>hasher</code>. As its name implies, it does not do any hashing at all, and instead directly uses the starting key as the final storage key for the storage item. An example of this in Substrate can also be found in the Democracry Pallet:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// Map of hashes to the proposal preimage, along with who registered it and their deposit.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// The block number is the block at which it was deposited.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token class-name">Preimages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  map </span><span class="token function" style="color:#d73a49">hasher</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">identity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Hash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">Option</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">PreimageStatus</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">BalanceOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">BlockNumber</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This should only be used when the starting key is already a cryptographic hash. In the example above, a user can submit a call that will be later executed by a democracy proposal, and we track that call on-chain using the hashing algorithm defined by the runtime, in this case Blake2. So there is no need to append any additional data to the key, we can just use it directly!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="listing-all-users">Listing All Users<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#listing-all-users" class="hash-link" aria-label="Direct link to Listing All Users" title="Direct link to Listing All Users">​</a></h2>
<p>Okay, so now that you understand the new hashers introduced to Substrate, lets go through a clear example why this is so great from a UX perspective.</p>
<p>In my old RPC blog post, I was able to list all the user balances, and calculate with it the total balance in my Substrate chain, but I was not able to tell you how much each person has. Well, with our new transparent storage keys, we can do this!</p>
<p>I will start a regular Substrate dev node and make a query to return all <code>System.Accounts</code>. They will all have a shared prefix of:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">twox_128("System")                 + twox_128("Account")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x26aa394eea5630e07c48ae0c9558cef7 + 0xb99d880ec681799c0cf30e8886371da9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; 0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So then I call the <code>getKeys</code> rpc for my dev node:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "state_getKeys", "params": ["0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9"]}' http://localhost:9933</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Which returns:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "jsonrpc": "2.0",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "result": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9007cbc1270b5b091758f9c42f5915b3e8ac59e11963af19174d0b94d5d78041c233f55d2e19324665bafdfb62925af2d",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da923a05cabf6d3bde7ca3ef0d11596b5611cbd2d43530a44705ad088af313e18f80b53ef16b36177cd4b77b846f2a5f07c",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da932a5935f6edc617ae178fef9eb1e211fbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da94f9aea1afa791265fae359272badc1cf8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da95ecffd7b6c0f78751baa9d281e0bfa3a6d6f646c70792f74727372790000000000000000000000000000000000000000",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da96f2e33376834a63c86a195bcf685aebbfe65717dad0447d715f660a0a58411de509b42e6efb8375f562f58a554d5860e",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da98578796c363c105114787203e4d93ca6101191192fc877c24d725b337120fa3edc63d227bbc92705db1e2cb65f56981a",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9b0edae20838083f2cde1c4080db8cf8090b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9b321d16960ce1d9190b61e2421cc60131e07379407fecc4b89eb7dbd287c2c781cfb1907a96947a3eb18e4f8e7198625",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9e5e802737cce3a54b0bc9e3d3e6be26e306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc20",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9edeaa42c2163f68084a988529a0e2ec5e659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9f3f619a1c2956443880db9cc9a13d058e860f1b1c7227f7c22602f53f15af80747814dffd839719731ee3bba6edc126c"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "id": 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, I know that all these storage keys use <code>blake2_128_concat</code> with the Account ID as the starting key, so I know that there should be an additional 48 bytes added to the end of their shard prefix, and the last 32 bytes should be the raw Account ID information!</p>
<p>Let's break one down manually:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da932a5935f6edc617ae178fef9eb1e211fbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------- storage prefix key ------------------------+++++++ blake2 128 hash ++++++++------------------------ account id ----------------------------</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Taking a closer look at the last 32 bytes:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Account ID:      0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Blake2 128 Hash: 0x32a5935f6edc617ae178fef9eb1e211f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address:         5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And this address corresponds to "Alice's Stash" account:</p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/alice-stash-account-f666a0b4145591e5dc778f75b3635d96.png" width="1792" height="678" class="img_ev3q"></p>
<p>Nice! So we could follow this same process for every key that is returned under <code>System.Account</code> and get a full list of all the accounts in our Substrate dev node!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final Thoughts<a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>At this point, it should be obvious why this storage key design is really an amazing feature for Substrate and its users. It provides safety, flexibility, and usability to everyone on the platform. I am not sure you can ask for much more.</p>
<p>One thing to note is that Substrate is able to quickly change fundamental design decisions like these storage key patterns due to its modular nature and the minimal number underlying assumptions it makes. If you are a blockchain developer who wants to introduce another storage key system, it really would not be that hard to do it!</p>
<p>I have created some tools at <a href="https://www.shawntabrizi.com/substrate-js-utilities/" target="_blank" rel="noopener noreferrer">https://www.shawntabrizi.com/substrate-js-utilities/</a> that allow people to quickly calculate the <code>blake2_128_concat</code> or <code>twox_64_concat</code> of some arbitrary string or hex bytes. Try out these examples on your own and see for yourself the advantages that these new transparent storage keys bring to you.</p>
<p>As always, if you enjoy the content I write, you can send me a friendly tip on my <a href="https://www.shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a>.</p>]]></content:encoded>
            <category>storage</category>
            <category>runtime</category>
            <category>module</category>
            <category>keys</category>
            <category>rpc</category>
        </item>
        <item>
            <title><![CDATA[Substrate Weights and Fees]]></title>
            <link>https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/</link>
            <guid>https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/</guid>
            <pubDate>Thu, 27 Feb 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the first in a series of posts explaining our philosophy toward benchmarking and assigning weights to Substrate pallets for the imminent launch of the Polkadot network.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="this-is-the-first-in-a-series-of-posts-explaining-our-philosophy-toward-benchmarking-and-assigning-weights-to-substrate-pallets-for-the-imminent-launch-of-the-polkadot-network">This is the first in a series of posts explaining our philosophy toward benchmarking and assigning weights to Substrate pallets for the imminent launch of the Polkadot network.<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#this-is-the-first-in-a-series-of-posts-explaining-our-philosophy-toward-benchmarking-and-assigning-weights-to-substrate-pallets-for-the-imminent-launch-of-the-polkadot-network" class="hash-link" aria-label="Direct link to This is the first in a series of posts explaining our philosophy toward benchmarking and assigning weights to Substrate pallets for the imminent launch of the Polkadot network." title="Direct link to This is the first in a series of posts explaining our philosophy toward benchmarking and assigning weights to Substrate pallets for the imminent launch of the Polkadot network.">​</a></h5>
<p>For the past couple of weeks, I have been working hard creating and executing a plan around weighing extrinsic functions across our different FRAME pallets so that we can launch the Polkadot network.</p>
<p>There are a few overall goals that we want to accomplish with this task:</p>
<ol>
<li>Provide computational limits and thresholds for block producers on the network.</li>
<li>Provide economic security such that malicious actors would not be able to profitably attack the network.</li>
<li>Identify and redesign extrinsics which have non-linear complexity.</li>
<li>Improve the runtime architecture to reduce overall complexity.</li>
</ol>
<p>To follow along this journey, you must first understand what "weights" are in Substrate, and how they are related to the more commonly understood fee system.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="weights">Weights<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#weights" class="hash-link" aria-label="Direct link to Weights" title="Direct link to Weights">​</a></h2>
<p>If you are unfamiliar with weights, the TL;DR is that a Substrate blockchains have limited resources when it comes to producing new blocks. Most notably, there is a limited window for block producers to create a block, limited amount of data that can be included per block (<a href="https://substrate.dev/rustdocs/master/frame_system/trait.Trait.html#associatedtype.MaximumBlockLength" target="_blank" rel="noopener noreferrer"><code>MaximumBlockLength</code></a>), and an overall practical limit to the storage footprint of the blockchain.</p>
<p>Substrate has introduced a Weight system that allows the runtime developer to tell the block production process how "heavy" an extrinsic is. Given some <a href="https://substrate.dev/rustdocs/master/frame_system/trait.Trait.html#associatedtype.MaximumBlockWeight" target="_blank" rel="noopener noreferrer"><code>MaximumBlockWeight</code></a>, and the weight of the individual extrinsics in a transaction pool, we can select the set of extrinsics that allow us to saturate our block, while not going over the limits.</p>
<p>On top of this basic idea, Substrate has additionally introduced a configurable <a href="https://substrate.dev/rustdocs/master/frame_system/trait.Trait.html#associatedtype.AvailableBlockRatio" target="_blank" rel="noopener noreferrer"><code>AvailableBlockRatio</code></a> which ensures that only a portion of the total <code>MaximumBlockWeight</code> is used for regular transactions. This also introduces the concept of <em>operational transactions</em> which are system critical operations that can use the rest of the available block weight.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h3>
<p>Let's say a <code>balance_transfer</code> has weight 1,000, and our Substrate chain is configured to a maximum block weight of 1,000,000, with an available block ratio of 20%.</p>
<p>This means we would be able to include at most:</p>
<p>1,000,000 * .20 / 1,000 = 200 transfers per block</p>
<p>For more details on weights, read our doc: <a href="https://substrate.dev/docs/en/conceptual/runtime/weight" target="_blank" rel="noopener noreferrer">https://substrate.dev/docs/en/conceptual/runtime/weight</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fees">Fees<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#fees" class="hash-link" aria-label="Direct link to Fees" title="Direct link to Fees">​</a></h2>
<p>To bring the weight system to the users of our blockchain, Substrate introduces a tightly coupled fee system. In short, users will pay a transaction fee proportional to the weight of the call they are making.</p>
<p>total_fee = base_fee + length_fee + weight_fee</p>
<blockquote>
<p>Note: There is also a length_fee which takes into account the amount of data included in an extrinsic.</p>
</blockquote>
<p>As a pallet developer writing new dispatchable functions, the fee system should mostly be abstract to you, and instead you should primarily think in terms of weights.</p>
<p>For more details on fees, read our doc: <a href="https://substrate.dev/docs/en/development/module/fees" target="_blank" rel="noopener noreferrer">https://substrate.dev/docs/en/development/module/fees</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="runtime-development">Runtime Development<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#runtime-development" class="hash-link" aria-label="Direct link to Runtime Development" title="Direct link to Runtime Development">​</a></h2>
<p>As a runtime developer, it is your goal to:</p>
<ul>
<li>Minimize the computational and resource complexity of runtime functions.</li>
<li>Accurately calculate the relative weight of your runtime functions.</li>
</ul>
<p>We can accomplish this in three steps:</p>
<ol>
<li>Follow best practices when writing a runtime.</li>
<li>Accurately document the computational complexity introduced by runtime functions.</li>
<li>Empirically measure the real world cost of running these functions, and associate those measurements back to our computational complexity.</li>
</ol>
<p>It is beyond the scope of any single blog post to explain all the best practices when it comes to runtime development, but we can start to touch on (2) and follow up and talk more about how to approach (3).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="documentation-of-weights">Documentation of Weights<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#documentation-of-weights" class="hash-link" aria-label="Direct link to Documentation of Weights" title="Direct link to Documentation of Weights">​</a></h3>
<p>Dispatchable functions within a FRAME pallet should contain documentation about the computational and resource complexity of the function. The result of weight documentation is to arrive at a final <a href="https://en.wikipedia.org/wiki/Big_O_notation" target="_blank" rel="noopener noreferrer">order of a function</a>. Such as:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">O(A + logA + BlogC)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This should serve as a resource to accurately measure the weight of different functions across all possible inputs, something we would not reasonably able to measure otherwise.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-to-document">What to Document<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#what-to-document" class="hash-link" aria-label="Direct link to What to Document" title="Direct link to What to Document">​</a></h4>
<p>Your weight documentation should include information about your runtime function which has notable execution costs. For example:</p>
<ul>
<li>Storage Operations (read, write, mutate, etc...)</li>
<li>Codec Operations (serializing/deserializing vecs or large structs)</li>
<li>Search / Sort / Notable Computation</li>
<li>Calls to other pallet functions (i.e. reserving some balance through the Currency trait)</li>
</ul>
<p>We will work off the following example function:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Join a group of members.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> who </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensure_signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> deposit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Deposit</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// configuration constant</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sorted_members</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">members</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token macro property" style="color:#36acaa">ensure!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sorted_members</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Membership Full"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">match</span><span class="token plain"> sorted_members</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">binary_search</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token comment" style="color:#999988;font-style:italic">// User is not a member.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Currency</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">reserve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> deposit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			members</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> who</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Members</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sorted_members</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token comment" style="color:#999988;font-style:italic">// User is already a member, do nothing.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">deposit_event</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">RawEvent</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Joined</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="storage-and-codec-operations">Storage and Codec Operations<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#storage-and-codec-operations" class="hash-link" aria-label="Direct link to Storage and Codec Operations" title="Direct link to Storage and Codec Operations">​</a></h4>
<p>Accessing storage is a heavy operation, and one that should be well documented and optimized in favor writing "functional code". See <a href="https://www.notion.so/paritytechnologies/Weights-8c916536949b47f299eed1302b6a2074?p=c5aafd34578f4be9ab8c8d7510e98314&amp;showMoveTo=true#best-practices" target="_blank" rel="noopener noreferrer">Best Practices</a>.</p>
<p>The each storage operation should be documented with the relative codec complexity of interacting with that storage.</p>
<p>For example, if you are reading a vector of members from a single value storage item, the weight documentation should read:</p>
<ul>
<li>One storage read to get the members of this pallet: <code>O(M)</code>.</li>
</ul>
<p>In this case reading the vector from storage has a codec complexity of <code>O(M)</code> to deserialize the <code>M</code> member accounts in the vector.</p>
<p>Later in your module, you might go ahead and write the data back into the runtime, which should also be documented:</p>
<ul>
<li>One storage write to update the members of this pallet: <code>O(M)</code>.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="search-sort-and-notable-computations">Search, Sort, and Notable Computations<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#search-sort-and-notable-computations" class="hash-link" aria-label="Direct link to Search, Sort, and Notable Computations" title="Direct link to Search, Sort, and Notable Computations">​</a></h4>
<p>If you need to search or sort in your runtime module, it is also important to note the relative complexity of those operations.</p>
<p>For example, if you are searching for an item in a sorted list, a <code>binary_search</code> operation should take <code>O(logM)</code>, while an unsorted list, should take <code>O(M)</code>.</p>
<p>So the documentation may look like:</p>
<ul>
<li>Insert a new member into sorted list: O(logM).</li>
</ul>
<p>This kind of documentation should be present for any sort of notable heavy computation present in your logic.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="calls-to-other-pallets-and-traits">Calls to Other Pallets and Traits<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#calls-to-other-pallets-and-traits" class="hash-link" aria-label="Direct link to Calls to Other Pallets and Traits" title="Direct link to Calls to Other Pallets and Traits">​</a></h4>
<p>The computational complexity of your function may extend beyond your pallet. If you call other FRAME pallets either directly or through Trait configurations, you should take note of that, and assign these calls with their own variable.</p>
<p>For example, if you write a function which reserves some balance in the Balances pallet or emits an event through the System pallet, you should document:</p>
<ul>
<li>One balance reserve operation: O(B)</li>
<li>One event emitted: O(E)</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="combining-the-data">Combining the Data<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#combining-the-data" class="hash-link" aria-label="Direct link to Combining the Data" title="Direct link to Combining the Data">​</a></h4>
<p>Once you have good documentation for your runtime function, you need to consolidate it into a <em>single overall order of the function</em>.Lets combine the different example operations to create a full end to end example.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># &lt;weight&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Key: M (len of members), B (reserve balance), E (event)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- One storage read to get the members of this pallet: `O(M)`.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- One balance reserve operation: O(B)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Insert a new member into sorted list: O(logM).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- One storage write to update the members of this pallet: `O(M)`.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- One event emitted: O(E)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Total Complexity: O(M + logM + B + E)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># &lt;/weight&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>Note: You may have introduced multiple different variables into your overall weight documentation, so be sure to document what these variables represent.</p>
</blockquote>
<p>If you look at this example, you can see we had two operations that were O(M) (the storage read and write), but our overall order does not take this into account.</p>
<p><strong>When doing empirical testing, we are unable to separate complexities which have the same order</strong>. This means that there could be many many more operations added to this function, of order <code>O(M)</code>, <code>O(logM</code>), etc.. but it would not change our final formula as a function of <code>M</code>, <code>B</code>, and <code>E</code>:</p>
<p>weight(M, B, E) = K_1 + K_2 * M + K_3 * logM + B + E</p>
<p>The difference between two functions with the same order will be empirically measured through on-chain tests. The goal of this step is to simply derive the coefficients (<code>K</code>) that we will be searching for when we do the <a href="https://www.notion.so/paritytechnologies/Weights-8c916536949b47f299eed1302b6a2074?p=c5aafd34578f4be9ab8c8d7510e98314&amp;showMoveTo=true#measuring-weights" target="_blank" rel="noopener noreferrer">next step</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://shawntabrizi.com/blog/substrate/substrate-weight-and-fees/#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>So hopefully now you can see how we can approach runtime code, and from it, derive a theoretical order of complexity. The next step after this is to actually run benchmarks for these different extrinsics, and start collecting data that we can map back to these derived formulas.</p>
<p>If you enjoy this content and want to see the next post where we dive deeper into actually benchmarking the runtime, consider taking a look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a> to see how you can support me.</p>]]></content:encoded>
            <category>weight</category>
            <category>transaction</category>
            <category>fee</category>
            <category>benchmark</category>
            <category>substrate</category>
        </item>
        <item>
            <title><![CDATA[Porting Web3.js to Polkadot.js]]></title>
            <link>https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/</link>
            <guid>https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/</guid>
            <pubDate>Sun, 12 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will go over the changes I needed to make in order to port a Web3.js based Ethereum web app I had previously blogged about to use Polkadot.js and Substrate.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-go-over-the-changes-i-needed-to-make-in-order-to-port-a-web3js-based-ethereum-web-app-i-had-previously-blogged-about-to-use-polkadotjs-and-substrate">In this post, I will go over the changes I needed to make in order to port a Web3.js based Ethereum web app I had <a href="https://shawntabrizi.com/blog/ethereum/graphing-eth-balance-history-of-an-ethereum-address-using-parallel-asynchronous-requests-in-web3-js/">previously blogged about</a> to use Polkadot.js and Substrate.<a href="https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/#in-this-post-i-will-go-over-the-changes-i-needed-to-make-in-order-to-port-a-web3js-based-ethereum-web-app-i-had-previously-blogged-about-to-use-polkadotjs-and-substrate" class="hash-link" aria-label="Direct link to in-this-post-i-will-go-over-the-changes-i-needed-to-make-in-order-to-port-a-web3js-based-ethereum-web-app-i-had-previously-blogged-about-to-use-polkadotjs-and-substrate" title="Direct link to in-this-post-i-will-go-over-the-changes-i-needed-to-make-in-order-to-port-a-web3js-based-ethereum-web-app-i-had-previously-blogged-about-to-use-polkadotjs-and-substrate">​</a></h5>
<p>Almost 2 years ago, I was still on my journey learning about Ethereum, when I built a simple web application using Web3.js. At the time, there was a spawn of viral "ponzi scheme" smart contracts, and I wanted to see how these dApps grew and eventually crashed over time.</p>
<p>Check out my previous blog post about <a href="https://shawntabrizi.com/blog/ethereum/graphing-eth-balance-history-of-an-ethereum-address-using-parallel-asynchronous-requests-in-web3-js/">Graphing ETH Balance History of an Ethereum Address using Parallel Asynchronous Requests in Web3.js</a> to learn more.</p>
<p>Since the launch of <a href="https://kusama.network/" target="_blank" rel="noopener noreferrer">Kusama</a>, there has been a lot more activity around actually <em>using</em> Substrate, specifically among the validator/nominator community. I wanted to take a look at the my nomination rewards over time, and to do that, I basically needed to rebuild this same application, but using Polkadot.js... (<a href="https://www.shawntabrizi.com/substrate-balance-graph/" target="_blank" rel="noopener noreferrer">sneak peek</a>)</p>
<p><img decoding="async" loading="lazy" alt="Before and after screenshot of Web3 to Polkadot port" src="https://shawntabrizi.com/assets/images/substrate-balance-graph-hero-52698f197d2068bbeede1cb39a98859f.png" width="1086" height="467" class="img_ev3q"></p>
<p>Here is <strong>that</strong> journey.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-a-polkadotjs-bundle">Creating a Polkadot.js Bundle<a href="https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/#creating-a-polkadotjs-bundle" class="hash-link" aria-label="Direct link to Creating a Polkadot.js Bundle" title="Direct link to Creating a Polkadot.js Bundle">​</a></h2>
<p>The first issue I ran into when trying to migrate from Web3.js to Polkadot.js was generating a standalone JavaScript bundle so I can simply include the dependencies into my barebones project. At the moment, Polkadot.js does not provide an official bundle, but it is easy enough to create with <a href="http://browserify.org/" target="_blank" rel="noopener noreferrer">browserify</a>.</p>
<p>Assuming you already have <code>npm</code>, here are those steps:</p>
<ol>
<li>
<p>Install browserify:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install -g browserify</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Create a new NodeJS project:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir temp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd temp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># lots of interaction here, doesn't matter what you select</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the Polkadot.js dependencies (I use <code>@beta</code>, but the exact versions to use may change over time):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install @polkadot/api@beta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm install @polkadot/util@beta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm install @polkadot/util-crypto@beta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm install @polkadot/keyring@beta</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You should have a <code>package.json</code> that looks like:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"dependencies": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "@polkadot/api": "^1.0.0-beta.7",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "@polkadot/keyring": "^2.0.0-beta.4",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "@polkadot/util": "^2.0.0-beta.4",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "@polkadot/util-crypto": "^2.0.0-beta.4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Create a simple file which exports these libraries into the <code>window</code> object:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// In a file named `dependencies.js`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> api </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"@polkadot/api"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> util </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"@polkadot/util"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> util_crypto </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"@polkadot/util-crypto"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> keyring </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"@polkadot/keyring"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">api</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> api</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">util</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> util</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">util_crypto</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> util_crypto</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">keyring</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> keyring</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Create the <code>polkadot.js</code> bundle:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">browserify dependencies.js &gt; polkadot.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<p>You should now have a <code>polkadot.js</code> file that you can include into any HTML page and will export <code>api</code>, <code>util</code>, <code>util_crypto</code>, and <code>keyring</code> commands.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">script</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">src</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">polkadot.js</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">script</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Actually, you can find it on this page too! Just open your browser console and try any of these commands.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">util_crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">blake2AsHex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Hello, World!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"0x511bc81dde11180838c562c82bb35f3223f46061ebde4a955c27b3f489cf1e03"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you don't want to follow these steps, feel free to grab the <code>polkadot.js</code> bundle I created at: <a href="https://github.com/shawntabrizi/substrate-balance-graph" target="_blank" rel="noopener noreferrer">shawntabrizi/substrate-balance-graph</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="connecting-to-a-node">Connecting to a Node<a href="https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/#connecting-to-a-node" class="hash-link" aria-label="Direct link to Connecting to a Node" title="Direct link to Connecting to a Node">​</a></h2>
<p>As a front-end developer, I am not so interested in setting up a local node, to get my app to work. In the Web3.js world, I would use Metamask + a dedicated infura node. From my Ethereum web app <a href="https://github.com/shawntabrizi/ethgraph" target="_blank" rel="noopener noreferrer">(ethgraph)</a>:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Check for MetaMask, otherwise use an HTTP Provider</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">addEventListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"load"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> web3 </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"undefined"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Web3 Detected! "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">currentProvider</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">constructor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">web3</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Web3</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">currentProvider</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"No Web3 Detected... using HTTP Provider"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">web3</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Web3</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Web3</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">providers</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">HttpProvider</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"https://mainnet.infura.io/&lt;APIKEY&gt;"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <a href="https://github.com/polkadot-js/extension" target="_blank" rel="noopener noreferrer">polkadot-js/extension</a> does not inject a WebSocket provider automatically, so we can skip the "detected" step, and just connect when we know we are not connected. Substrate is also not just a platform for <em>one</em> chain, but many chains, so I wanted to also support the user user customizable endpoints.</p>
<p>I created a <code>connect</code> function which looks like this:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Connect to Substrate endpoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">connect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> endpoint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"endpoint"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">substrate</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">endpoint</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> endpoint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> provider </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">api</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">WsProvider</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">endpoint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"output"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">innerHTML</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Connecting to Endpoint..."</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">substrate</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> api</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">ApiPromise</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> provider </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">endpoint</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> endpoint</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"output"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">innerHTML</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Connected"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can see I keep track of two global properties:</p>
<ol>
<li><code>window.substrate</code> - This will be my WebSocket provider and how I access the Polkadot.js APIs. If it already exists, I am already connected!</li>
<li><code>window.global.endpoint</code> - This is a global variable I created to keep track of the current endpoint I am connected to.</li>
</ol>
<p>When I call <code>connect</code>, it will make sure I am connected to the endpoint I want based on the input of the <code>endpoint</code> element on the HTML page. For a network like Kusama, this endpoint would be something like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wss://kusama-rpc.polkadot.io/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="querying-the-node">Querying the Node<a href="https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/#querying-the-node" class="hash-link" aria-label="Direct link to Querying the Node" title="Direct link to Querying the Node">​</a></h2>
<p>At the time of creating <code>ethgraph</code>, Web3.js did not support <code>async</code>/<code>await</code>. Instead, <a href="https://shawntabrizi.com/blog/ethereum/making-web3-js-work-asynchronously-javascript-promises-await/">I wrapped everything in a "promisify" wrapper</a>. Fortunately, Polkadot.js supports this natively, so you can query every API easily and ergonomically with a promise.</p>
<p>For example, here is how we can get the balance of a user:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> balance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">freeBalance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"EGVQCe73TpFyAZx5uKfE1222XfkT3BSKozjgcqzLBnc5eYo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">balance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toNumber</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2116624633061757</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To provide all the functionality of the Ethereum version of this app, I also need to query the timestamp of a block. Ethereum would include this in the block header, but we know that Substrate has no such requirements, and instead provides this through another runtime module:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> timestamp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">timestamp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"Wed Jan 15 2020 22:42:37 GMT+0100 (Central European Standard Time)"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Great! But how do we get the <em>historical</em> information?</p>
<p>In Ethereum, we could just provide the block number directly into the query:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">eth</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBalance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> blockNumber</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/*callback*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In Polkadot.js we need to use the <code>.at(hash, &lt;PARAMS&gt;)</code> API, which extends all the Substrate queries. <code>hash</code> here is the block hash of the block that I want to get the information for. To get the block hash, I need to make an RPC call through the Polkadot.js API:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> blockHash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">rpc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBlockHash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">blockHash</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"0x46781d9a3350a0e02dbea4b5e7aee7c139331a65b2cd736bb45a824c2f3ffd1a"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So all together now:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> balance_100 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">freeBalance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"0x46781d9a3350a0e02dbea4b5e7aee7c139331a65b2cd736bb45a824c2f3ffd1a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"EGVQCe73TpFyAZx5uKfE1222XfkT3BSKozjgcqzLBnc5eYo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">balance_100</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toNumber</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000000000</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can see I gained quite a bit of free balance since block 0! :)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="keeping-it-async">Keeping it Async<a href="https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/#keeping-it-async" class="hash-link" aria-label="Direct link to Keeping it Async" title="Direct link to Keeping it Async">​</a></h2>
<p>So we have all the pieces to be able convert our old queries into the new ones. However, if we do things naively, we will run into a trap which was warned about in my last blog post.</p>
<p>Can you guess?</p>
<p>Let's take a look how a naive conversion between Web3.js to Polkadot.js would look like:</p>
<ul>
<li>
<p>Original Web3.js Code</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Loop over the blocks, using the step value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> startBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> endBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> step</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// If we already have data about that block, skip it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">block</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a promise to query the ETH balance for that block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> balancePromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">promisify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">eth</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBalance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a promise to get the timestamp for that block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> timePromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">promisify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">eth</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Push data to a linear array of promises to run in parellel.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    promises</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> balancePromise</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> timePromise</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Naive Polkadot.js Code</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Loop over the blocks, using the step value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> startBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> endBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> step</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// If we already have data about that block, skip it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">block</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Get the block hash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> blockHash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">rpc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBlockHash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a promise to query the balance for that block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> freeBalancePromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">freeBalance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      blockHash</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      address</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a promise to get the timestamp for that block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> timePromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">timestamp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">now</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">blockHash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Push data to a linear array of promises to run in parellel.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    promises</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> freeBalancePromise</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> timePromise</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>First, we should call out how incredibly similar the two code blocks look. The naive update is <em>totally</em> working, and really we did not have to change our app at all! But if you are trying this at home, you might notice the app is running pretty slow... over 30 seconds to fetch the data needed to create the graph!</p>
<p><img decoding="async" loading="lazy" alt="Image before parallel async" src="https://shawntabrizi.com/assets/images/substrate-balance-graph-before-fb6d71a5855ded8244bfdc86226ab570.png" width="2880" height="1800" class="img_ev3q"></p>
<p>The point of this loop was to collect all the queries and run them asynchronously. As mentioned in the last blog post, this provides a huge boost in performance since we are not waiting for each response to move onto the next one. However, this naive conversion sticks an <code>await</code> right in the middle of the loop, and this causes us to serialize querying for all the blocks, and slow down the entire processes.</p>
<p>To solve this, we want to also query all the block hashes for the blocks we need in parallel, but in a separate loop, because we need to know the hash before we can make the next query.</p>
<p>The improved solution looks like:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> promises </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get all block hashes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> startBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> endBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> step</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// If we already have data about that block, skip it.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">blockHashes</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">block</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> blockHashPromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">rpc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBlockHash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    promises</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> blockHashPromise</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Call all promises in parallel for speed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> results </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">all</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">promises</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Save block hashes globally so we don't query them again if we don't need to.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> results</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">blockHashes</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">block</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">hash</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> promises </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Loop over the blocks, using the step value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> startBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> endBlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> step</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// If we already have data about that block, skip it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">block</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Get the block hash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> blockHash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> global</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">blockHashes</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">block</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a promise to query the balance for that block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> freeBalancePromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balances</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">freeBalance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      blockHash</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      address</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a promise to get the timestamp for that block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> timePromise </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> substrate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">query</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">timestamp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">now</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">blockHash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Push data to a linear array of promises to run in parellel.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    promises</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> freeBalancePromise</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> timePromise</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Call all promises in parallel for speed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> results </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">all</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">promises</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Results:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> results</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This generates a graph for us in under 2 seconds!</p>
<p><img decoding="async" loading="lazy" alt="Image after parallel async" src="https://shawntabrizi.com/assets/images/substrate-balance-graph-after-57e92e045e9f6bc0ea73590fa39d5e2a.png" width="2880" height="1800" class="img_ev3q"></p>
<p>Much better, and what you would expect from a modern web application! But here we don't have a traditional database, just a blockchain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final Thoughts<a href="https://shawntabrizi.com/blog/substrate/porting-web3-js-to-polkadot-js/#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>You can play with the final application here: <a href="https://www.shawntabrizi.com/substrate-balance-graph/" target="_blank" rel="noopener noreferrer">https://www.shawntabrizi.com/substrate-balance-graph/</a></p>
<p>After this exercise it has become clear to me that porting existing web applications built with Web3.js to Polkadot.js is trivial. Additionally, I already have a ton of experience with Substrate runtime development, so I already know how easy it will be to take existing smart contracts and build them on Substrate, maybe even better than before.</p>
<p>With that in mind, it won't be long until we see a wave of existing dApps joining Substrate/Polkadot, taking advantage of all the next generation features without making any compromises toward their existing functionality. The future seems bright overall, and I am excited to be at the forefront.</p>
<p>As always, if you like the content I create, stop by my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a> and say thanks!</p>]]></content:encoded>
            <category>javascript</category>
            <category>front-end</category>
            <category>balance</category>
            <category>graph</category>
            <category>plotly.js</category>
            <category>ethereum</category>
            <category>substrate</category>
        </item>
        <item>
            <title><![CDATA[Substrate Storage Deep Dive]]></title>
            <link>https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/</link>
            <guid>https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/</guid>
            <pubDate>Mon, 09 Dec 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will share the video and slides I presented at the Substrate Developer Conference (Sub0) which gives a deep dive into the storage layers of the Substrate blockchain development framework.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-share-the-video-and-slides-i-presented-at-the-substrate-developer-conference-sub0-which-gives-a-deep-dive-into-the-storage-layers-of-the-substrate-blockchain-development-framework">In this post, I will share the video and slides I presented at the Substrate Developer Conference (Sub0) which gives a deep dive into the storage layers of the Substrate blockchain development framework.<a href="https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/#in-this-post-i-will-share-the-video-and-slides-i-presented-at-the-substrate-developer-conference-sub0-which-gives-a-deep-dive-into-the-storage-layers-of-the-substrate-blockchain-development-framework" class="hash-link" aria-label="Direct link to In this post, I will share the video and slides I presented at the Substrate Developer Conference (Sub0) which gives a deep dive into the storage layers of the Substrate blockchain development framework." title="Direct link to In this post, I will share the video and slides I presented at the Substrate Developer Conference (Sub0) which gives a deep dive into the storage layers of the Substrate blockchain development framework.">​</a></h5>
<p>This last week I was given the opportunity to present at the official Substrate Developer Conference where I gave a deep dive into the inner workings of Substrate storage.</p>
<p>As a runtime developer, you should know that storage is one of the most important things to keep in mind when designing and developing your new runtime modules. Having a deep understanding of how the different storage layers work and interact will be critical for you to make correct decisions moving forward.</p>
<p>Here is a video of my presentation, and the presentation itself:</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="video">Video<a href="https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/#video" class="hash-link" aria-label="Direct link to Video" title="Direct link to Video">​</a></h2>
<iframe width="720px" height="480px" src="https://www.youtube.com/embed/9S8rmW8LD5o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="presentation">Presentation<a href="https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/#presentation" class="hash-link" aria-label="Direct link to Presentation" title="Direct link to Presentation">​</a></h2>
<iframe src="/assets/presentations/substrate-storage-deep-dive.pdf" width="720px" height="480px"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="questions">Questions?<a href="https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/#questions" class="hash-link" aria-label="Direct link to Questions?" title="Direct link to Questions?">​</a></h2>
<p>Feel free to contact me with any questions you might have or any details you think I may have gotten wrong. As always, if you enjoy this content and want to continue to support me, take a look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a>.</p>]]></content:encoded>
            <category>storage</category>
            <category>database</category>
            <category>runtime</category>
            <category>sub0</category>
            <category>merkle</category>
            <category>patricia</category>
            <category>trie</category>
        </item>
        <item>
            <title><![CDATA[What is Substrate?]]></title>
            <link>https://shawntabrizi.com/blog/substrate/what-is-substrate/</link>
            <guid>https://shawntabrizi.com/blog/substrate/what-is-substrate/</guid>
            <pubDate>Sun, 29 Sep 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will try to explain the Substrate blockchain framework in a way that anyone with a bit of technical experience could understand.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-try-to-explain-the-substrate-blockchain-framework-in-a-way-that-anyone-with-a-bit-of-technical-experience-could-understand">In this post, I will try to explain the Substrate blockchain framework in a way that anyone with a bit of technical experience could understand.<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#in-this-post-i-will-try-to-explain-the-substrate-blockchain-framework-in-a-way-that-anyone-with-a-bit-of-technical-experience-could-understand" class="hash-link" aria-label="Direct link to In this post, I will try to explain the Substrate blockchain framework in a way that anyone with a bit of technical experience could understand." title="Direct link to In this post, I will try to explain the Substrate blockchain framework in a way that anyone with a bit of technical experience could understand.">​</a></h5>
<p>You may have heard before that Substrate is an <strong>extensible</strong>, <strong>modular</strong>, and <strong>open-source</strong> framework for building blockchains. But what does that mean?</p>
<p>Substrate provides you with all the core components needed to build a distributed blockchain network:</p>
<ul>
<li><a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#database">Database</a></li>
<li><a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#networking">Networking</a></li>
<li><a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#transaction-queue">Transaction Queue</a></li>
<li><a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#consensus">Consensus</a></li>
</ul>
<p>While these layers are extensible, Substrate mostly assumes the average blockchain developer should not care about the specific implementation details of these core components. Instead, Substrate's core philosophy is to make development of a blockchain's state transition function as flexible and easy as possible. This layer is called the <a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#substrate-runtime">Substrate runtime</a>.</p>
<p>But before we dive into all these details, first we need to establish a common understanding of what a blockchain is...</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-blockchain">What is a Blockchain?<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#what-is-a-blockchain" class="hash-link" aria-label="Direct link to What is a Blockchain?" title="Direct link to What is a Blockchain?">​</a></h2>
<p>In its most basic form, a blockchain is a simple data structure where <em>blocks</em> of data are linked together forming an ordered <em>chain</em>. The specific details of a blockchain can vary depending on the functionality of that chain. However, at a high level, all blockchains should share some common properties.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="blocks">Blocks<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#blocks" class="hash-link" aria-label="Direct link to Blocks" title="Direct link to Blocks">​</a></h3>
<p>Each block in a blockchain has some data that can be used to generate a unique identifier for that block. One part of this data is the unique identifier for the preceding block, known as the "parent block". Since each block has a pointer to its parent block, the blocks can be ordered in a deterministic way.</p>
<p><img decoding="async" loading="lazy" alt="Blockchain Blocks" src="https://shawntabrizi.com/assets/images/wis-blocks-a004205229a523c5bf5da84a982c69a6.png" width="600" height="220" class="img_ev3q"></p>
<p>Any small changes to the data in a block will change its unique ID. Since this block's ID changed, the block that comes after it (the "child block") will also change. Same with the next child, and the next one, and the next... In fact, all the blocks that come after the originally modified block will have to change their unique ID in order to maintain the chain! This means that it is easy to verify that two blockchains have the exact same data by simply checking the unique identifier of the last block on the chain.</p>
<blockquote>
<p>To learn more about these basics of a blockchain, visit the demo/videos found here: <a href="https://anders.com/blockchain/" target="_blank" rel="noopener noreferrer">https://anders.com/blockchain/</a></p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="block-production">Block Production<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#block-production" class="hash-link" aria-label="Direct link to Block Production" title="Direct link to Block Production">​</a></h3>
<p>Due to these properties, blockchain systems are commonly used to keep track of a shared <a href="https://en.wikipedia.org/wiki/Ledger" target="_blank" rel="noopener noreferrer">ledger</a>. The contents of the ledger are changed not by changing an existing block, but by adding new blocks to the blockchain with instructions about how the state of the ledger should change from block to block. These instructions are commonly referred to as <em>transactions</em>.</p>
<p><img decoding="async" loading="lazy" alt="Block Production" src="https://shawntabrizi.com/assets/images/wis-block-production-68563f716e4ecd6d3efed4a6c7c369f2.png" width="600" height="376" class="img_ev3q"></p>
<p>There are usually rules associated with how the ledger can change, which are defined by a <a href="https://en.wikipedia.org/wiki/Transition_system" target="_blank" rel="noopener noreferrer">state transition function</a>. For cryptocurrency systems, these rules can be quite simple; for example:</p>
<blockquote>
<p><strong>Rule:</strong> Users can only spend funds that they own.</p>
</blockquote>
<p>These rules can also be more complex, even allowing for blockchain systems to act as a <a href="https://simple.wikipedia.org/wiki/Turing_complete" target="_blank" rel="noopener noreferrer">Turing complete</a> computer, and the ledger acting as that computer's storage.</p>
<p>Once a valid set of transactions are collected, they are put into the content of a block, and then this block is placed at the end of the chain. This block production process allows the underlying state of the blockchain to change over time.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="block-finalization">Block Finalization<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#block-finalization" class="hash-link" aria-label="Direct link to Block Finalization" title="Direct link to Block Finalization">​</a></h3>
<p>Now that a new block has been produced, it can be shared with others who want to construct the same shared ledger. However, since blockchains are decentralized in nature, it could be that two different, yet still valid blocks compete for the same position at the end of a chain. Different block finalization mechanisms can be used to determine which "chain of blocks" is the <em>canonical</em> blockchain. For any given blockchain, there should only be one true final state of the shared ledger. Any alternative states of the blockchain are known as "forks".</p>
<p><img decoding="async" loading="lazy" alt="Blockchain Fork" src="https://shawntabrizi.com/assets/images/wis-forking-71df695650c428a073ff78c678c8fd3e.png" width="600" height="236" class="img_ev3q"></p>
<p>Forks are normal, expected, and generally not a problem. The block finalization process is in place to help non-canonical chains get back in sync. We will return to forking later in this post.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nodes">Nodes<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#nodes" class="hash-link" aria-label="Direct link to Nodes" title="Direct link to Nodes">​</a></h3>
<p>At this point, you should be able to see that blockchains are designed to be distributed and decentralized. You want multiple users around the world to be able to keep track of this shared ledger without the need of intermediary third parties. By following the rules above, each participant of this shared ledger can run a <em>node</em>, which is a computer program that follows the rules of the blockchain network and connects to other nodes that do the same, all without the need for a centralized service. Blockchain system are often "open" systems, which mean that anyone can participate. To prevent against malicious actors, mechanisms are put in place to incentivize good behavior while punishing bad behavior. With all of these mechanisms in place, a blockchain system can become an unstoppable machine.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-components">Substrate Components<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#substrate-components" class="hash-link" aria-label="Direct link to Substrate Components" title="Direct link to Substrate Components">​</a></h2>
<p>Now that you have a high level understanding of what a blockchain is, we can now start to understand how Substrate is a framework for building them. The first claim about the Substrate framework is that it is <strong>extensible</strong>. This means that it makes as few assumptions about how you design your blockchain and attempts to be as <em>generic</em> as possible.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="database">Database<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#database" class="hash-link" aria-label="Direct link to Database" title="Direct link to Database">​</a></h3>
<p>As we illustrated, the heart of a blockchain is its shared ledger that must be maintained and stored. Substrate makes no assumptions about the content or structure of the data in your blockchain. The underlying database layer uses simple key-value storage, on top of which a modified Patricia Merkle tree (<a href="https://github.com/paritytech/trie" target="_blank" rel="noopener noreferrer">trie</a>) is implemented. This special storage structure allows us to easily verify if an item is or is not in that storage. This is particularly important to support light clients, who will depend on these storage proofs to provide light-weight, yet trustless interactions with the blockchain network.</p>
<p><img decoding="async" loading="lazy" alt="Trie Structure" src="https://shawntabrizi.com/assets/images/wis-trie-5a8c290bd9aeeef1e5f55219243d9a9a.png" width="350" height="219" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="networking">Networking<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#networking" class="hash-link" aria-label="Direct link to Networking" title="Direct link to Networking">​</a></h3>
<p>In order for a decentralized blockchain system to communicate, it needs to establish a peer-to-peer networking protocol. Substrate uses <a href="https://github.com/libp2p" target="_blank" rel="noopener noreferrer">libp2p</a> as a modular peer-to-peer networking stack. Through this networking layer, Substrate-based blockchains are able to share transactions, blocks, peers, and other system critical details without the need for centralized servers. In line with Substrate's philosophy, libp2p is unique in the fact that it makes no assumptions about your specific networking protocol. As a result, you are able to implement and use different transports on top of a Substrate-based blockchain.</p>
<p><img decoding="async" loading="lazy" alt="Peer-to-Peer Networking" src="https://shawntabrizi.com/assets/images/wis-p2p-a499a0cce262ab950150f07b73efe654.png" width="600" height="258" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="transaction-queue">Transaction Queue<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#transaction-queue" class="hash-link" aria-label="Direct link to Transaction Queue" title="Direct link to Transaction Queue">​</a></h3>
<p>As mentioned above, transactions are collected and formed into blocks that ultimately define how the state of the blockchain changes. However, the order of these transactions can impact the final state of the ledger. Substrate allows you full control over the dependency and queue management of transactions on your network. Substrate only assumes that a transaction has a <em>weight</em> and a set of prerequisite <em>tags</em> that are used to create dependency graphs. These dependency graphs are linear in the simplest case, but they can become more complex. Substrate handles those complexities for you automatically.</p>
<p><img decoding="async" loading="lazy" src="https://shawntabrizi.com/assets/images/wis-txq-6ef60ead454175df78fec3d63d3397e1.png" width="226" height="223" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="consensus">Consensus<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#consensus" class="hash-link" aria-label="Direct link to Consensus" title="Direct link to Consensus">​</a></h3>
<p>Recall that there are different ways that a blockchain network can come to consensus about changes to the chain. Traditionally, these consensus engines are tightly coupled to the other blockchain components. However, Substrate has spent extra effort designing a consensus layer that can be easily changed during development. In fact, it was made such that consensus could even be hot-swapped after the chain goes live! Built into Substrate are multiple different consensus engines such as traditional <a href="https://en.wikipedia.org/wiki/Proof_of_work" target="_blank" rel="noopener noreferrer">Proof of Work (PoW)</a>, <a href="https://github.com/poanetwork/wiki/wiki/Aura-Consensus-Protocol-Audit" target="_blank" rel="noopener noreferrer">Aura (Authority Round)</a>, and Polkadot consensus, which is unique in the fact that it separates the block production process (<a href="https://research.web3.foundation/en/latest/polkadot/BABE/Babe/" target="_blank" rel="noopener noreferrer">BABE</a>) from the block finalization process (<a href="https://research.web3.foundation/en/latest/polkadot/GRANDPA/" target="_blank" rel="noopener noreferrer">GRANDPA</a>).</p>
<p><img decoding="async" loading="lazy" alt="GRANDPA Consensus" src="https://shawntabrizi.com/assets/images/wis-grandpa-44847a526e8eb1f7ee66341e664dfcbf.png" width="600" height="674" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-runtime">Substrate Runtime<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#substrate-runtime" class="hash-link" aria-label="Direct link to Substrate Runtime" title="Direct link to Substrate Runtime">​</a></h2>
<p>So far, we have touched on all the core blockchain components that Substrate provides to you. As you have read, Substrate has made every effort to stay as generic and extensible as possible. However, arguably the most customizable part of Substrate is its <strong>modular</strong> runtime. The runtime is Substrate's <em>state transition function</em> that we mentioned earlier.</p>
<p>Substrate believes that the average blockchain developer does not need to care so much about the blockchain components listed above. As long as the components are battle-tested and production-ready, the implementation details are often of little importance. However, the core blockchain logic that determines what is and is not valid for a network is often of critical importance for any chain.</p>
<p><strong>Thus, Substrate's core philosophy is to make blockchain runtime development as flexible and easy as possible.</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-runtime-module-library-srml">Substrate Runtime Module Library (SRML)<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#substrate-runtime-module-library-srml" class="hash-link" aria-label="Direct link to Substrate Runtime Module Library (SRML)" title="Direct link to Substrate Runtime Module Library (SRML)">​</a></h3>
<p>A Substrate runtime is divided into separate logical components that are known as <em>runtime modules</em>. These modules will control some aspect of the on-chain logic managed by that blockchain. You can think of these modules like "plug-ins" for your system. As a Substrate developer, you are able to pick and choose the modules and functionality that you want to include in your chain.</p>
<p>For example, there is a module called "Balances" that manages the currency of the chain. There are also a set of modules like "Collective", "Democracy", and "Elections" that handle decision making and governance for the chain. There is even a module called "Contracts" that can turn any Substrate-based chain into a <a href="https://en.wikipedia.org/wiki/Smart_contract" target="_blank" rel="noopener noreferrer">smart contract</a> platform. These kinds of modules are provided to you automatically when you build on Substrate.</p>
<p>However, you are not limited to only the modules provided by Substrate. In fact, developers can easily build their own runtime modules, either as independent logical components, or even directly interacting with other runtime modules to build more complicated logic. I believe that long term, the module system in Substrate will act much like an "app store", where users can simply pick and choose the functionality they want to include, and with minimal technical expertise, deploy a distributed blockchain network!</p>
<p><img decoding="async" loading="lazy" alt="Modern App Store" src="https://shawntabrizi.com/assets/images/wis-app-store-4171b9a303df86ef4ec6b8da19e128f6.png" width="600" height="264" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="forkless-runtime-upgrades">Forkless Runtime Upgrades<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#forkless-runtime-upgrades" class="hash-link" aria-label="Direct link to Forkless Runtime Upgrades" title="Direct link to Forkless Runtime Upgrades">​</a></h3>
<p>If we follow the analogy of the Substrate module ecosystem acting like an app store, then we must also address how we update our runtime. Whether it be bug fixes, general improvements to existing modules, or even new features that you want to add to your blockchain, the ability to change your runtime is something that Substrate has made a first class process.</p>
<p>However, changes to the state transition function of your chain also impact consensus of the network. If one node running on your network has one version of your runtime logic, while another node has a different one, these two nodes will not be able to reach consensus with one another. They will fundamentally disagree on the true state of the ledger, resulting in what we defined earlier as a fork. These kinds of irreconcilable forks are bad because they reduce the security of your network, as only a subset of nodes will correctly create and verify new blocks.</p>
<p><img decoding="async" loading="lazy" alt="Blockchain Hard Fork Upgrade" src="https://shawntabrizi.com/assets/images/wis-upgrade-d22af5621333c471cce07f164b00bde2.png" width="600" height="236" class="img_ev3q"></p>
<p>Substrate has addressed this issue by having the network come to consensus about the runtime logic itself! Using the <a href="https://webassembly.org/" target="_blank" rel="noopener noreferrer">Wasm</a> binary format, we are able to put the Substrate runtime code on the blockchain as part of the shared ledger. This means that anyone running a node is able to verify that their node has the latest logic. If it does not, then it will instead execute the on-chain Wasm directly! This means runtime upgrades to your blockchain can happen in real time, on a live network, without creating forks!</p>
<p>In the spirit of Substrate's flexibility, you do not need to enable this feature at all. If you want to disable on-chain upgrades, you can. Truly, Substrate provides you with all the tools needed to create a living, breathing blockchain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="free-open-source-production-ready">Free, Open-Source, Production-Ready<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#free-open-source-production-ready" class="hash-link" aria-label="Direct link to Free, Open-Source, Production-Ready" title="Direct link to Free, Open-Source, Production-Ready">​</a></h2>
<blockquote>
<p><strong>Note:</strong> At the time of writing this post, Substrate is <strong>not</strong> production ready... but it almost is. Substrate is currently undergoing a security audit in preparation of a 2020 release of the Polkadot network.</p>
</blockquote>
<p>Substrate is a completely free and <a href="https://github.com/paritytech/substrate/blob/master/LICENSE" target="_blank" rel="noopener noreferrer"><strong>open-source</strong></a> project. It is built using the <a href="https://www.rust-lang.org/" target="_blank" rel="noopener noreferrer">Rust programming language</a>, which is designed for creating fast and inherently safe software. Coordination and development of Substrate happens through public communities like <a href="https://github.com/paritytech/substrate" target="_blank" rel="noopener noreferrer">GitHub</a> and <a href="https://riot.im/app/#/room/!HzySYSaIhtyWrwiwEV:matrix.org" target="_blank" rel="noopener noreferrer">Riot</a>, with over 100 individual contributors.</p>
<p>Substrate is a project born from <a href="https://polkadot.network/" target="_blank" rel="noopener noreferrer">Polkadot</a>, a larger vision of a world with many interoperable blockchains. Substrate powers the blockchain that connects this public network in addition to most of the chains that will be connected to it. You can feel secure that the technology that backs your blockchain is the same technology that powers multiple other production-level blockchains.</p>
<p>Substrate aims to be the absolute best platform for blockchain innovators, and the natural choice for anyone who is thinking about building a blockchain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://shawntabrizi.com/blog/substrate/what-is-substrate/#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>At this point, I hope that you can see why we say that Substrate an <strong>extensible</strong>, <strong>modular</strong>, and <strong>open-source</strong> platform for building blockchain systems. At every point in the Substrate development process, keeping things generic has remained a priority. As a result, Substrate can be used as a platform to build future technologies, even those that are not yet thought of.</p>
<p>If you enjoy this content and want to see more, consider taking a look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a> to see how you can support me.</p>]]></content:encoded>
            <category>runtime</category>
            <category>module</category>
            <category>block</category>
            <category>database</category>
            <category>networking</category>
            <category>transaction queue</category>
            <category>consensus</category>
        </item>
        <item>
            <title><![CDATA[Substrate Feeless Token Factory]]></title>
            <link>https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/</link>
            <guid>https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/</guid>
            <pubDate>Wed, 28 Aug 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will share the Hackathon project I worked on for ETHBerlin 2019, where we built a Substrate blockchain that supports generating fungible tokens that can be transferred without end-users paying fees.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-share-the-hackathon-project-i-worked-on-for-ethberlin-2019-where-we-built-a-substrate-blockchain-that-supports-generating-fungible-tokens-that-can-be-transferred-without-end-users-paying-fees">In this post, I will share the <a href="https://github.com/shawntabrizi/substrate-feeless-token-factory" target="_blank" rel="noopener noreferrer">Hackathon project</a> I worked on for ETHBerlin 2019, where we built a Substrate blockchain that supports generating fungible tokens that can be transferred without end-users paying fees.<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#in-this-post-i-will-share-the-hackathon-project-i-worked-on-for-ethberlin-2019-where-we-built-a-substrate-blockchain-that-supports-generating-fungible-tokens-that-can-be-transferred-without-end-users-paying-fees" class="hash-link" aria-label="Direct link to in-this-post-i-will-share-the-hackathon-project-i-worked-on-for-ethberlin-2019-where-we-built-a-substrate-blockchain-that-supports-generating-fungible-tokens-that-can-be-transferred-without-end-users-paying-fees" title="Direct link to in-this-post-i-will-share-the-hackathon-project-i-worked-on-for-ethberlin-2019-where-we-built-a-substrate-blockchain-that-supports-generating-fungible-tokens-that-can-be-transferred-without-end-users-paying-fees">​</a></h5>
<p>Ethereum has shown itself to be the ultimate platform for building token economies. Thousands of contracts have been created which support standards like ERC20 and ERC721.</p>
<p>However, businesses using Ethereum have struggled adopting new users into the ecosystem due to the upfront costs of Gas to interact with these token contracts. Many newcomers do not understand why they need ETH to be able to interact with other tokens they actually are interested in.</p>
<p>Businesses have shown that they would be more than happy to fund the usage of their users. Some have done this by providing a faucet or ETH drop to their users, while others have implemented layer 2 solutions or have made compromises building centralized solutions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-feeless-token-factory">A "Feeless" Token Factory<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#a-feeless-token-factory" class="hash-link" aria-label="Direct link to A &quot;Feeless&quot; Token Factory" title="Direct link to A &quot;Feeless&quot; Token Factory">​</a></h2>
<p>The <a href="https://github.com/shawntabrizi/substrate-feeless-token-factory" target="_blank" rel="noopener noreferrer">Substrate Feeless Token Factory</a> (SFTF) removes the pains and costs of token transfer fees from end users, by offloading those costs onto the token creators and community contributors who want to support a particular token.</p>
<p>Transaction fees are used as a mechanism to prevent denial-of-service attacks on public blockchain systems. SFTF is a blockchain level protocol, developed on top of the Substrate blockchain framework, which provides an alternative mechanism for transfer fees on tokens, while still preventing nominal attack vectors. In short, each token built on the network is backed by a fund of the native blockchain currency. This fund is ultimately used to pay for the transfers of that token, on behalf of the user.</p>
<p>Any user can deposit funds into the pot for a token, but we think that most often, it will be the token creator who will be most incentivized to fund their users to transfer and spend their tokens. Users are enabled only a certain number of free transfers per token within a given time period. These transfers are enabled by an extension of the standard ERC20 token API, introducing a <code>try_free_transfer</code> function which can allow a user to make a free transfer if underlying conditions are met.</p>
<p>Let's take a look at a hypothetical example: the "Better Energy Foundation" wants to issue a new token to be used as electricity credits. When they do this, they fund the token with an initial supply of the underlying blockchain currency (10,000,000 units), and specify that the users of their token have 10 free transactions every 1,000 blocks. They can sell their tokens and transfer them to the buyers just like a normal ICO. These buyers can then call the <code>try_free_transfer</code> function when trying to trade the token among their peers, and the fees are paid for using the fund. Assuming the underlying transfer fee being charged to the pot is 1 unit per transfer, the "Better Energy Foundation" has just supported millions of "free" transfers of their token. Anyone in the community can continue to add more funds, and allow the free transfers to continue when the funds start to dry up. If a user does not have any more "free" transactions left, or if the fund is empty, they can always make a transaction using the normal <code>transfer</code> function which will charge them a normal transaction fee directly from their own account.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="design">Design<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#design" class="hash-link" aria-label="Direct link to Design" title="Direct link to Design">​</a></h2>
<p>First we designed a runtime module which acts as a normal ERC20 compatible token <em>factory</em>, this mean the module supports the creation of any number of different fungible tokens. This was mostly based on the <a href="https://github.com/paritytech/substrate/tree/master/frame/assets" target="_blank" rel="noopener noreferrer"><code>srml-assets</code> module</a>, but extended to expose an API which matches that of an ERC20 token: transfers on-behalf-of and allowances. We kept the token factory constructor simple by having the user mint all token up front into their own account, and controlling distribution manually.</p>
<p>Without touching any of the fee mechanisms, this module is basically a replacement for any number of ERC20 token contracts, but built at the Substrate runtime level, which should be more efficient and cost effective for everyone.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="removing-fees">Removing Fees<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#removing-fees" class="hash-link" aria-label="Direct link to Removing Fees" title="Direct link to Removing Fees">​</a></h3>
<p>At that point, we needed to remove fees from the runtime module. At the moment, Substrate runtime fees are controlled in two areas:</p>
<ol>
<li>The <a href="https://github.com/paritytech/substrate/blob/v1.0/srml/balances/src/lib.rs" target="_blank" rel="noopener noreferrer">Balances module</a>, which defines a <code>TransactionBaseFee</code> and <code>TransactionByteFee</code>.</li>
<li>The <a href="https://github.com/paritytech/substrate/pull/3157" target="_blank" rel="noopener noreferrer">weight annotation</a>, which allows you to control fees for an individual runtime function.</li>
</ol>
<p>We configured our runtime such that both the <code>TransactionBaseFee</code> and the <code>TransactionByteFee</code> would be set to 0:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pub const TransactionBaseFee: u128 = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub const TransactionByteFee: u128 = 0;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>NOTE: I think in the long term, the fees within the Balances module will be completely removed in favor of weight annotations. For the time being, weight annotations do not support the concept of "per byte fee", which is why I think it is still around.</p>
</blockquote>
<p>Originally, we thought this might be all that is needed to remove fees from our Runtime, however, if we do not specify a weight annotation for a runtime function, it is automatically assigned a default value:</p>
<p><a href="https://github.com/paritytech/substrate/blob/master/frame/support/src/weights.rs" target="_blank" rel="noopener noreferrer"><strong>sr-primitives/weights</strong></a></p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">SimpleDispatchInfo</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Default weight of all transactions.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">SimpleDispatchInfo</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">FixedNormal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10_000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So what we actually need to do is label our function(s) explicitly with a zero weight tag:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[weight = SimpleDispatchInfo::FixedNormal(0)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">my_free_function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We really only wanted to remove fees from the <code>transfer</code> function, not necessarily the other parts of the ERC20 API, so we decided to create a new function <code>try_free_transfer</code> which would have a fee of zero, and the additional functionality needed to protect our chain from malicious attacks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="protecting-our-chain">Protecting Our Chain<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#protecting-our-chain" class="hash-link" aria-label="Direct link to Protecting Our Chain" title="Direct link to Protecting Our Chain">​</a></h3>
<p>The whole reason there are transfer fees on the blockchain is to protect the network from attackers who would be able to perform a denial-of-service attacks and spam the network with transactions. So, if we choose to remove the base fees from our transfer function, we would need to implement a new solution to prevent attacks to our chain.</p>
<p>Here is where you could get very clever, and someone with much more research and knowledge into game theory would probably come up with some really interesting solutions. But we were not those people, and we only had 1 day to build our solution, so we addressed this issue in the simplest way we could think of.</p>
<p>We know that businesses and organizations are the number one user of creating these tokenized assets. Usually they make a huge profit through an ICO and further development of their company. As a result, we predict in most cases they would happily eat any and all costs of fees related to using their token. So, we created an open fund for each token, where the standard token fee will be burned from that fund rather than the individuals who are transferring tokens. While this pot can obviously be funded by the token creators, we allowed open contributions to the pot in order to allow any community members who want to support a token to be able to do so.</p>
<p>To support this new functionality, we continued to develop our API to support an initial contribution when the token is created, and a <code>deposit</code> function allowing users to place funds in the pot for a token. If at any point the funds for a token is depleted, the fund can be replenished through new deposits. Futhermore, because we created a separate function for free transfers, we can still support the standard <code>transfer</code> function which has a standard fee and allows users to still use a token even when the fund is zero. Really, all these feeless transfer stuff is all extra functionality that is built on top of the token factory, which already works on its own!</p>
<p>One last point of friction we introduced was a limit per user, per token, per time period on how many transfers can be made. This prevents a malicious user from simply spending all of the pot by making frivolous transfers. This mechanism is still vulnerable to a <a href="https://en.wikipedia.org/wiki/Sybil_attack" target="_blank" rel="noopener noreferrer">Sybil attack</a>, where you can imagine an attacker generates millions of accounts and has account 1 send tokens to account 2, who sends tokens to account 3, etc...</p>
<p>However, this is hopefully thwarted by the need for an existential deposit of the base blockchain currency to make an active account. This existential deposit limit could be adjusted in order to provide the needed friction to prevent a single user from having too many accounts. Again, this initial existential deposit could be provided by the companies that want to support their users to use their tokens, and since there are no fees, only the minimum amount is needed to be given to a user, and only one time per user.</p>
<p>I think that the design here has lots of room for improvement, and there are likely a lot of different ways we could prevent malicious attacks on individual token funds, but for the hackathon, I felt that this was a reasonable first step.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-patterns">Substrate Patterns<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#substrate-patterns" class="hash-link" aria-label="Direct link to Substrate Patterns" title="Direct link to Substrate Patterns">​</a></h2>
<p>Having gone over all the details of how we designed the SFTF, I want to review a few of the specific implementation details which hopefully convey reusable design patterns for other Substrate runtime modules.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="module-funds">Module Funds<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#module-funds" class="hash-link" aria-label="Direct link to Module Funds" title="Direct link to Module Funds">​</a></h3>
<p>The main aspect of our feeless token is creating a fund for each token. Ultimately these funds will need to be controlled and managed by our module.</p>
<p>To do this, we create a unique identifier for our module, and use this to generate new accounts for the funds:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">MODULE_ID</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ModuleId</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token class-name">ModuleId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token string" style="color:#e3116c">b"coinfund"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Trait</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">fund_account_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">TokenId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token constant" style="color:#36acaa">MODULE_ID</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into_sub_account</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Using the <code>into_sub_account</code> function, we can actually use the unique module id we created to generate any number of unique <code>AccountIds</code> which can then represent the funds for each of the tokens.</p>
<p>To then fund these accounts, we simply call the Balances module's <code>transfer</code> function, just like you would transfer to any other account:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deposit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token attribute attr-name" style="color:#00a4db">#[compact]</span><span class="token plain"> token_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">TokenId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token attribute attr-name" style="color:#00a4db">#[compact]</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">BalanceOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> who </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensure_signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token macro property" style="color:#36acaa">ensure!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> token_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Non-existent token"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Currency</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">transfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">fund_account_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">token_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">deposit_event</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">RawEvent</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Deposit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">token_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since funds for different tokens are separated, we don't really need to do fancy tracking of the funds for each account. Instead, we can rely on the Balances module to do that for us! In our <code>try_free_transfer</code> function, we do the following:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Burn fees from funds</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> fund_account </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">fund_account_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> fund_fee </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">FundTransferFee</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> _ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Currency</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">withdraw</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">fund_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fund_fee</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">WithdrawReason</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Transfer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ExistenceRequirement</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AllowDeath</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If the <code>withdraw</code> call fails, then the token does not have enough funds, and we simply fail to complete the <code>try_free_transfer</code>. Easy as pie.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tracking-transfers-per-time-period">Tracking Transfers Per Time Period<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#tracking-transfers-per-time-period" class="hash-link" aria-label="Direct link to Tracking Transfers Per Time Period" title="Direct link to Tracking Transfers Per Time Period">​</a></h3>
<p>One of the more challenging tricks we had to implement for this runtime module was a storage structure which would allow us to track how many time each user transferred a particular token in a given time period. If we simply wanted to count the total number of transfers, we would be able to create a regular map like so:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">TotalTransferCount</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">total_transfer_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">map</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">TokenId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>However, since we want to reset this count after a certain time period, this is not good enough. To use this regular map in this way, we would need to track each user which spent tokens in a time period, and which tokens they spent, and then we would need to do some unbounded loop over this mapping in order to clear all the entries. This is a big no-no.</p>
<p>The trick here is to take advantage of the <code>StorageDoubleMap</code>, which is just a map nested within a map. Most importantly, the <code>StorageDoubleMap</code> API provides the ability to clear all entries under a key in the top level map through <code>remove_prefix</code>. This means that I simply need to create a <code>double_map</code> where the first key is "fixed" (essentially treating the <code>double_map</code> as a regular <code>map</code>), and then call <code>remove_prefix</code> on that fixed first key when I want to clear all entries. This will clean up all of the data in our map without having to do a loop, which we know is generally a runtime sin.</p>
<p>Here is what the double map declaration looks like:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">FreeTransferCount</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">free_transfer_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">double_map</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">blake2_128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">TokenId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">TokenFreeTransfers</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When we want to keep track of the user's free transfers, we simply update the storage item like so:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> free_transfer_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">free_transfer_count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sender</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> new_free_transfer_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> free_transfer_count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">checked_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">One</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">one</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ok_or</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"overflow when counting new transfer"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">FreeTransferCount</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sender</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">new_free_transfer_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, when we want to clean up all the tracking and start fresh, we simply call the magical <code>remove_prefix</code> API:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// This function is called at the beginning of every block</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">on_initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">BlockNumber</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Check is `true` every `FreeTransferPeriod` number of blocks</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">FreeTransferPeriod</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token class-name">Zero</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">zero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Reset everyone's free transfer count</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">FreeTransferCount</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">remove_prefix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I would hope in the future, the <code>StorageMap</code> and <code>StorageDoubleMap</code> will implement a <code>kill</code> function like the <code>StorageValue</code> item has, which would allow a user to easily clear all entries of the mapping. It could even use this trick under the hood! However, it is unclear to me if there are significant costs to doing things this way. ¯\<em>(ツ)</em>/¯</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next Steps<a href="https://shawntabrizi.com/blog/substrate/substrate-feeless-token-factory/#next-steps" class="hash-link" aria-label="Direct link to Next Steps" title="Direct link to Next Steps">​</a></h2>
<p>Because the hackathon is so short, and we were teaching new developers to start building on Substrate, the full potential of this idea was not created, nor was it even conceived. There is so much more potential for exploring how Substrate can enable "feeless" token transfers given that you have full control at the runtime level of how your blockchain operates. This is not feature that you would get with any open smart contract platform.</p>
<p>A few ideas which could further this project are:</p>
<ul>
<li>
<p>Upgrade the token API to support ERC1155, thus also supporting non-fungible tokens.</p>
</li>
<li>
<p>Allow payment of token transfers with the custom token rather than the underlying blockchain currency.</p>
<blockquote>
<p>We actually mostly did this in the SFTF by implementing <code>SignedExtension</code> for a custom <code>TakeTokenFees</code> struct. This has logic which transfers a token from the user to the block author, and increases the priority of the transaction. However, limitations of easily generating the correct extrinsic format meant that it would not work in time for the hackathon.</p>
</blockquote>
</li>
<li>
<p>Allow a small proof of work to replace the cost of transferring the token.</p>
</li>
<li>
<p>Create a ban list of users who are not allowed to use any free transfer funds.</p>
</li>
<li>
<p>Build a decentralized token exchange module which supports tokens generated from the factory.</p>
</li>
</ul>
<p>Do you have good ideas? Open an issue on the <a href="https://github.com/shawntabrizi/substrate-feeless-token-factory/" target="_blank" rel="noopener noreferrer">Substrate Feeless Token Factory</a> repository!</p>
<p>As always, if you enjoy this content and want to support me in continuing to write new posts, check out my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a>.</p>]]></content:encoded>
            <category>runtime</category>
            <category>module</category>
            <category>erc20</category>
            <category>fee</category>
            <category>gas</category>
            <category>token</category>
            <category>ethberlin</category>
            <category>hackathon</category>
        </item>
        <item>
            <title><![CDATA[Querying Substrate Storage via RPC]]></title>
            <link>https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/</link>
            <guid>https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/</guid>
            <pubDate>Sun, 28 Jul 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, we will investigate how you can interact with the Substrate RPC endpoint in order to read storage items from your Substrate runtime.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-we-will-investigate-how-you-can-interact-with-the-substrate-rpc-endpoint-in-order-to-read-storage-items-from-your-substrate-runtime">In this post, we will investigate how you can interact with the Substrate RPC endpoint in order to read storage items from your Substrate runtime.<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#in-this-post-we-will-investigate-how-you-can-interact-with-the-substrate-rpc-endpoint-in-order-to-read-storage-items-from-your-substrate-runtime" class="hash-link" aria-label="Direct link to In this post, we will investigate how you can interact with the Substrate RPC endpoint in order to read storage items from your Substrate runtime." title="Direct link to In this post, we will investigate how you can interact with the Substrate RPC endpoint in order to read storage items from your Substrate runtime.">​</a></h5>
<blockquote>
<p>This post was updated to the latest changes in Substrate as of January 2020.</p>
</blockquote>
<p>Most of the posts I have written about Substrate so far have showed you how easy it is to build custom blockchains with this next generation framework. However, there is an entire set of parallel development and tools needed to enable users to easily interact with these new blockchain systems.</p>
<p>Our ultimate goal in this post is to <strong>query the balance of a Substrate user using the Substrate RPC</strong>. Along the way, we will paint a better picture of how Substrate interacts with the outside world by investigating storage structures, hashing algorithms, encoding schemes, public endpoints, metadata, and more!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-rpc-methods">Substrate RPC Methods<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#substrate-rpc-methods" class="hash-link" aria-label="Direct link to Substrate RPC Methods" title="Direct link to Substrate RPC Methods">​</a></h2>
<p>Substrate provides a set of RPC methods by default which allow you to interact, query, and submit to the actual node. The available RPC methods that Substrate exposes are documented as part of the <a href="https://polkadot.js.org/api/substrate/rpc.html" target="_blank" rel="noopener noreferrer">Polkadot-JS docs</a>. Your node actually exposes this information behind another RPC endpoint: <code>rpc_methods</code>.</p>
<p>To query the balance of a Substrate user, we will need to read into the runtime storage of the Balances module. This is done by calling the <code>getStorage</code> method in <code>state</code>:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">getStorage(key: StorageKey, block?: Hash): StorageData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">summary: Retrieves the storage for a key</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>Note that specifying a <code>block</code> here is optional. By default, it will query the latest block.</p>
</blockquote>
<p>The actual RPC method name is generated by combining the category with the documented function name, like so:</p>
<ul>
<li><code>state_getStorage</code></li>
</ul>
<p>However, to start simple, we will first query the Metadata endpoint for our Substrate node, which requires only knowledge of the method name: <code>state_getMetadata</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-rpc-endpoint">Substrate RPC Endpoint<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#substrate-rpc-endpoint" class="hash-link" aria-label="Direct link to Substrate RPC Endpoint" title="Direct link to Substrate RPC Endpoint">​</a></h2>
<p>To actually call these methods, you need access to a Substrate RPC endpoint. When you start a local Substrate node, two endpoints are made available to you:</p>
<ul>
<li>HTTP Endpoint: <a href="http://localhost:9933/" target="_blank" rel="noopener noreferrer">http://localhost:9933/</a></li>
<li>Websocket Endpoint: ws://localhost:9944/</li>
</ul>
<p>Most of the Substrate front-end libraries and tools use the more powerful WebSocket endpoint to interact with the blockchain. Through WebSockets, you can subscribe to various items, like events, and receive push notifications whenever changes in your blockchain occur.</p>
<p>For the purposes of this post, we will continue to keep things simple and use the HTTP endpoint to make JSON-RPC queries to our blockchain.</p>
<p>Let's first use this endpoint to call the RPC methods endpoint:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "rpc_methods"}' http://localhost:9933/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; {"jsonrpc":"2.0","result":{"methods":["account_nextIndex","author_insertKey","author_pendingExtrinsics","author_removeExtrinsic","author_rotateKeys","author_submitAndWatchExtrinsic","author_submitExtrinsic","author_unwatchExtrinsic","chain_getBlock","chain_getBlockHash","chain_getFinalisedHead","chain_getFinalizedHead","chain_getHead","chain_getHeader","chain_getRuntimeVersion","chain_subscribeFinalisedHeads","chain_subscribeFinalizedHeads","chain_subscribeNewHead","chain_subscribeNewHeads","chain_subscribeRuntimeVersion","chain_unsubscribeFinalisedHeads","chain_unsubscribeFinalizedHeads","chain_unsubscribeNewHead","chain_unsubscribeNewHeads","chain_unsubscribeRuntimeVersion","contracts_call","state_call","state_callAt","state_getChildKeys","state_getChildStorage","state_getChildStorageHash","state_getChildStorageSize","state_getKeys","state_getMetadata","state_getRuntimeVersion","state_getStorage","state_getStorageAt","state_getStorageHash","state_getStorageHashAt","state_getStorageSize","state_getStorageSizeAt","state_queryStorage","state_subscribeRuntimeVersion","state_subscribeStorage","state_unsubscribeRuntimeVersion","state_unsubscribeStorage","subscribe_newHead","system_accountNextIndex","system_chain","system_health","system_name","system_networkState","system_nodeRoles","system_peers","system_properties","system_version","unsubscribe_newHead"],"version":1},"id":1}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here you see a full list of available RPC apis. We can try calling the Metadata endpoint:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "state_getMetadata"}' http://localhost:9933/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; {"jsonrpc":"2.0","result":"0x6d65746107481853797374656d011853797374656d3c304163636f756e744e6f6e636501010130543a3a4163636f756e74496420543a3a496e64657800200000000000000000047c2045787472696e73696373206e6f6e636520666f72206163636f756e74732e3845787472696e736963436f756e...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Yay! A basic RPC call to get the metadata from Substrate is successful! However, you will notice the result is a <em>large</em> hex value, which really isn't that helpful...</p>
<p>There is more to the story.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-encoding">Substrate Encoding<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#substrate-encoding" class="hash-link" aria-label="Direct link to Substrate Encoding" title="Direct link to Substrate Encoding">​</a></h2>
<p>What we haven't touched on yet are the various encoding mechanisms used by Substrate to both optimize serialization of data, but also provide safeties to the blockchain system.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scale-codec">SCALE Codec<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#scale-codec" class="hash-link" aria-label="Direct link to SCALE Codec" title="Direct link to SCALE Codec">​</a></h3>
<p>If we try to naively decode the hex returned from the metadata endpoint using JavaScript, we get something like:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// From StackOverflow question 3745666</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hex_to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">metadata</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> metadata</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">match</span><span class="token punctuation" style="color:#393A34">(</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-source language-regex char-set class-name" style="color:#36acaa">.</span><span class="token regex regex-source language-regex quantifier number" style="color:#36acaa">{1,2}</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-flags" style="color:#36acaa">g</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token known-class-name class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">fromCharCode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">parseInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">hex_to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"0x6d65746107481853797374656d011853797374656d3c304163636f756e744e6f6e636501010130543a3a4163636f756e74496420543a3a496e64657800200000000000000000047c2045787472696e73696373206e6f6e636520666f72206163636f756e74732e3845787472696e736963436f756e..."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"\u0000meta\u0007H\u0018System\u0001\u0018System&lt;0AccountNonce\u0001\u0001\u00010T::AccountId T::Index\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004| Extrinsics nonce for accounts.8ExtrinsicCoun..."</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is real data in there! However, it is not well formed.</p>
<p>To correctly parse the metadata, you will need to become familiar with is <a href="https://github.com/paritytech/parity-scale-codec" target="_blank" rel="noopener noreferrer">Parity's SCALE codec</a>:</p>
<blockquote>
<p>SCALE is a light-weight format which allows encoding (and decoding) which makes it highly suitable for resource-constrained execution environments like blockchain runtimes and low-power, low-memory devices.</p>
</blockquote>
<p>Parity uses SCALE for a number of reasons. <a href="https://github.com/gavofyork" target="_blank" rel="noopener noreferrer">Gav</a> mentioned that:</p>
<ul>
<li>It does not use Rust STD, and thus can compile to Wasm.</li>
<li>It is zero-copy and uses next to no memory on little-endian hardware for elementary numeric types.</li>
<li>It is built to have great support in Rust for deriving codec logic for new types: just add <code>#[derive(Encode, Decode)]</code>.</li>
<li>It is about as thin and lightweight as can be.</li>
</ul>
<p>Using the SCALE codec and parsing the Substrate metadata could be it's own blog post, so I will not go much deeper here; I just wanted to point out the main encoding scheme used by Substrate, and which shows up in the examples we have done so far.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="storage-keys">Storage Keys<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#storage-keys" class="hash-link" aria-label="Direct link to Storage Keys" title="Direct link to Storage Keys">​</a></h3>
<p>For our goal, what we really want to learn is how to generate the storage keys for our various runtime storage items.</p>
<p>Substrate has a single key-value database for powering the entire blockchain framework. From this minimal data structure, additional abstractions can be constructed such as a <a href="https://github.com/paritytech/trie" target="_blank" rel="noopener noreferrer">Merkle Patricia tree ("trie")</a> that is used throughout Substrate.</p>
<p>At a base level, to gain access to any runtime storage item, you simply need to know it's storage key for the core key-value database. To prevent key collisions, a special schema is used to generate keys for Runtime module storage items:</p>
<ul>
<li>
<p>For storage values:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">xxhash128("ModuleName") + xxhash128("StorageName")</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>For storage maps:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">xxhash128("ModuleName") + xxhash128("StorageName") + blake256hash("StorageItemKey")</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>For storage double maps:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">xxhash128("ModuleName") + xxhash128("StorageName") + blake256hash("FirstKey") + blake256hash("SecondKey")</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>This constructs a "prefix trie", where all storage items for a module share a common prefix, where all storage keys under a storage item share a common prefix, and so on... This may not make a lot of sense right now, but we will do some practical examples below to hopefully clarify.</p>
<blockquote>
<p><strong>Learn More:</strong> Check out my deep-dive into Substrate storage <a href="https://shawntabrizi.com/blog/substrate/substrate-storage-deep-dive/">here</a>.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="querying-runtime-storage">Querying Runtime Storage<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#querying-runtime-storage" class="hash-link" aria-label="Direct link to Querying Runtime Storage" title="Direct link to Querying Runtime Storage">​</a></h2>
<p>We are almost to the finish line. Now that you know the different storage key encoding patterns, we can try to construct and query the runtime storage for a Substrate chain. Since you will need to use some cryptographic hash functions to try this yourself, I have loaded them for you on this blog post.</p>
<p>Open your browser console, and you will find utility functions under <code>util.*</code>, <code>util_crypto.*</code>, and <code>keyring.*</code>. These come from the <a href="https://polkadot.js.org/common/" target="_blank" rel="noopener noreferrer">polkadot-js/common</a> and will give you access to the hash functions like <code>util_crypto.xxhashAsHex</code> or <code>util_crypto.blake2AsHex</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="storage-value-query">Storage Value Query<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#storage-value-query" class="hash-link" aria-label="Direct link to Storage Value Query" title="Direct link to Storage Value Query">​</a></h3>
<p>Let's start with a simple storage value, for instance getting the <a href="https://substrate.dev/rustdocs/v1.0/srml_sudo/index.html" target="_blank" rel="noopener noreferrer">Sudo user</a> for a Substrate chain. The module name is <code>Sudo</code> and the storage item which holds the <code>AccountId</code> is named <code>Key</code>.</p>
<p>Thus we would do the following:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">util_crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">xxhashAsHex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Sudo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0x5c0d1176a568c1f92944340dbfed9e9c"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">util_crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">xxhashAsHex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Key"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0x530ebca703c85910e7164cb7d1c9e47b"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So the combined storage key would be:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0x5c0d1176a568c1f92944340dbfed9e9c530ebca703c85910e7164cb7d1c9e47b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p><strong>Note:</strong> Note that we use XXHash to output a 128 bit hash. However, XXHash only supports 32 bit and 64 bit outputs. To correctly generate the 128 bit hash, we need to hash the same phrase twice, with seed <code>0</code> and seed <code>1</code>, and concatenate them.</p>
</blockquote>
<p>Now we can form an RPC request using this value as the <code>params</code> when calling the <code>state_getStorage</code> endpoint:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "state_getStorage", "params": ["0x5c0d1176a568c1f92944340dbfed9e9c530ebca703c85910e7164cb7d1c9e47b"]}' http://localhost:9933/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; {"jsonrpc":"2.0","result":"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d","id":1}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Success! The result here is the SCALE encoded AccountID of the Sudo user:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">keyring</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">encodeAddress</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is the familiar <code>Alice</code> account which we would expect on a <code>--dev</code> chain, and also matches what we get using the <a href="https://polkadot.js.org/apps/#/chainstate" target="_blank" rel="noopener noreferrer">Polkadot-JS UI</a>:</p>
<p><img decoding="async" loading="lazy" alt="Sudo Key for the Substrate --dev node" src="https://shawntabrizi.com/assets/images/sudo-key-dev-node-1327a48fc2effb51c6d3f784e51219de.png" width="2656" height="1460" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="storage-map-query">Storage Map Query<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#storage-map-query" class="hash-link" aria-label="Direct link to Storage Map Query" title="Direct link to Storage Map Query">​</a></h3>
<blockquote>
<p><strong>Note:</strong> The construction of storage keys for maps has slightly changed from when this was written. You can find an up to date version of that key construction in my post <a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/">"Transparent Keys in Substrate"</a>.</p>
</blockquote>
<p>As a final challenge, we will look to query a storage map like the balance of an account. The module name is <code>Balances</code> and the storage item we are interested in is named <code>FreeBalance</code>. They mapping for this storage item is from <code>AccountId -&gt; Balance</code>, so the storage item key we want to use is an <code>AccountId</code>.</p>
<p>We need to follow the same pattern as before, but append to the end the hash of the <code>AccountId</code>:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">util_crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">xxhashAsHex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Balances"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0xc2261276cc9d1f8598ea4b6a74b15c2f"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">util_crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">xxhashAsHex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"FreeBalance"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"0x6482b9ade7bc6657aaca787ba1add3b4"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">util_crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">blake2AsHex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  keyring</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">decodeAddress</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">256</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0x2e3fb4c297a84c5cebc0e78257d213d0927ccc7596044c6ba013dd05522aacba"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So the final storage key in this case is:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b42e3fb4c297a84c5cebc0e78257d213d0927ccc7596044c6ba013dd05522aacba</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Just like before, we can form an RPC request using this value as the <code>params</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "state_getStorage", "params": ["0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b42e3fb4c297a84c5cebc0e78257d213d0927ccc7596044c6ba013dd05522aacba"]}' http://localhost:9933</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"jsonrpc":"2.0","result":"0x0000a0dec5adc9353600000000000000","id":1}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The result here is now a SCALE encoded version of the <code>Balance</code> type, which is a u64 and thus trivially decodable (now that you know it is little endian):</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">util</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">hexToBn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"0x0000a0dec5adc9353600000000000000"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">isLe</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"1000000000000000000000"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Woohoo!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prefix-tries">Prefix Tries<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#prefix-tries" class="hash-link" aria-label="Direct link to Prefix Tries" title="Direct link to Prefix Tries">​</a></h2>
<p>Hopefully, you should be able to see they this storage key generation forms "prefix tries".</p>
<p>Let's say you wanted to query another user's balance. Well the construction of the key would make the first 256 bits exactly the same!</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># All Balances -&gt; FreeBalance storage keys start with</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This means you could actually use the <code>state_getKeys</code> API to get all the storage keys for all the free balances in your system!</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "state_getKeys", "params": ["0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4"]}' http://localhost:9933</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; {"jsonrpc":"2.0","result":[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4024cd62ab7726e039438193d4bbd915427f2d7de85afbcf00bd16fadbcad6aed",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b42e3fb4c297a84c5cebc0e78257d213d0927ccc7596044c6ba013dd05522aacba",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b44724e5390fcf0d08afc9608ff4c45df257266ae599ac7a32baba26155dcf4402",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b454b75224d766c852ac60eb44e1329aec5058574ae8daf703d43bc2fbd9f33d6c",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b465d0de2c1f75d898c078307a00486016783280c8f3407db41dc9547d3e3d651e",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b46b1ab1274bcbe3a4176e17eb2917654904f19b3261911ec3f7a30a473a04dcc8",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b477d14a2289dda9bbb32dd9313db096ef628101ac5bbb3b19301ede2c61915b89",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4927407fbcfe5afa14bcfb44714a843c532f291a9c33612677cb9e0ae5e2bd5de",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b494772f97f5f6b539aac74e798bc395119f39603402d0c85bc9eda5dfc5ae2160",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b49a9304efeee429067b2e8dfbcfd8a22d96f9d996a5d6daa02899b96bd7a667b1",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b49ea52149af6b15f4d523ad4342f63089646e29232a1777737159c7bc84173597",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4a315ee9e56d2f3bb24992a1cff6617b0f7510628a15722b680c42c2be8bb7452",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4c4a80eb5e32005323fb878ca749473d7e5f40d60ed5e74e887bc125a3659f258"],"id":1}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This basically allows you to enumerate across all the balances in a Substrate blockchain! Although, you would not necessarily know the <code>AccountId</code> for these balances...</p>
<blockquote>
<p><strong>Note:</strong> Now you CAN figure out the <code>AccountId</code> for all these balances! Learn how in my post <a href="https://shawntabrizi.com/blog/substrate/transparent-keys-in-substrate/">"Transparent Keys in Substrate"</a>.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next Steps<a href="https://shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/#next-steps" class="hash-link" aria-label="Direct link to Next Steps" title="Direct link to Next Steps">​</a></h2>
<p>If you made it this far, you probably have come to the same conclusion as me, which is that interacting with the Substrate RPC is not trivial. Substrate is optimized for performance, bandwidth, and execution, which leaves tasks like encoding and decoding of transactions, storage, metadata, etc... to the outside world.</p>
<p>That being said, once you are able to walk through these examples step by step, I think it becomes easier to understand what is going on, and even reproduce this logic on other platforms and languages. Certainly this is needed for the future Substrate ecosystem.</p>
<p>I have started a project called Substrate RPC Examples:</p>
<p><a href="https://github.com/shawntabrizi/substrate-rpc-examples" target="_blank" rel="noopener noreferrer">https://github.com/shawntabrizi/substrate-rpc-examples</a></p>
<p>The idea of this project is to provide some easy to read, "minimal library magic" examples of interacting with the Substrate RPC. So far, I have only used the tools available in <code>util</code>, <code>util_crypto</code>, and <code>keyring</code>, and ideally this can be reduced by introducing a few hand written functions.</p>
<p>The two samples I have described in this blog post (getting metadata, querying storage) are implemented. I hope to also add to it an example of a balance transfer, which will show how to sign a message. If you have any good ideas or examples that you would want to share with the world, feel free to open a <a href="https://github.com/shawntabrizi/substrate-rpc-examples/pulls" target="_blank" rel="noopener noreferrer">PR</a>.</p>
<p>I think the next follow up from this post should be a deep dive into the SCALE codec and how you can turn the Metadata you receive from a Substrate node into valid JSON.</p>
<p>As always, if you are enjoying the content I have produced, take a look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donations page</a> to see how you can continue to support me.</p>]]></content:encoded>
            <category>runtime</category>
            <category>module</category>
            <category>rpc</category>
            <category>metadata</category>
            <category>storage</category>
            <category>scale</category>
            <category>hash</category>
        </item>
        <item>
            <title><![CDATA[Extending Substrate Runtime Modules]]></title>
            <link>https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/</link>
            <guid>https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/</guid>
            <pubDate>Thu, 27 Jun 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will show you how you can extend the SRML Contracts module to add additional authorization layers to your smart contract blockchain.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-show-you-how-you-can-extend-the-srml-contracts-module-to-add-additional-authorization-layers-to-your-smart-contract-blockchain">In this post, I will show you how you can extend the SRML Contracts module to add additional authorization layers to your smart contract blockchain.<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#in-this-post-i-will-show-you-how-you-can-extend-the-srml-contracts-module-to-add-additional-authorization-layers-to-your-smart-contract-blockchain" class="hash-link" aria-label="Direct link to In this post, I will show you how you can extend the SRML Contracts module to add additional authorization layers to your smart contract blockchain." title="Direct link to In this post, I will show you how you can extend the SRML Contracts module to add additional authorization layers to your smart contract blockchain.">​</a></h5>
<p>One of the best things about Substrate is the ability to easily execute on your ideas when developing blockchain systems. I want to show you a question from the first Substrate Developer Conference (Sub0) that lead to me investigating how one might extend the functionality of a runtime module with a "wrapper module".</p>
<p>Before we can jump in though, you will need to know a little about how the Substrate Contract module works.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background">Background<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#background" class="hash-link" aria-label="Direct link to Background" title="Direct link to Background">​</a></h2>
<p>The <a href="https://substrate.dev/rustdocs/v1.0/srml_contract/index.html" target="_blank" rel="noopener noreferrer">Contract module</a> is included in the Substrate Runtime Module Library (SRML) and provides your blockchain with the ability to execute Wasm smart contracts.</p>
<p>There is a two step process for deploying a smart contract using the Contract module:</p>
<ol>
<li>Putting the WebAssembly smart contract code on the blockchain.</li>
<li>Creating an instance of a smart contract with a new Contract account.</li>
</ol>
<p>This has a major advantage over existing smart contract platforms since you are able to create multiple instances of the same smart contract without needing to waste additional space with multiple instances of the contract code. For example, on Ethereum, each and every ERC-20 token uploads their own version of the ERC-20 contract. In Substrate, and with the Contracts module, a single ERC-20 Wasm smart contract can be uploaded, and many people can deploy their own tokens using customizable deployment parameters like initial balance, token name, etc...</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="permissioned-access">Permissioned Access<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#permissioned-access" class="hash-link" aria-label="Direct link to Permissioned Access" title="Direct link to Permissioned Access">​</a></h2>
<p>So now that you are familiar with how to deploy contracts using the Contract module, let's hear the question that was asked at Sub0:</p>
<iframe width="720px" height="480px" src="https://www.youtube.com/embed/-EJHu0u6hT8?start=6405&amp;end=6573" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe>
<blockquote>
<p>Question: "Can you restrict which accounts can add code to the blockchain?"</p>
</blockquote>
<blockquote>
<p>Sergei: "Maybe you can write another module which just wraps the smart contract module, and just does this additional check..."</p>
</blockquote>
<p>While there are a few different ways you could approach solving this problem, it turns out <a href="https://github.com/pepyakin" target="_blank" rel="noopener noreferrer">Sergei</a>, as always, was absolutely correct about the best approach.</p>
<p>One <em>could</em> copy the entire Contract module and make changes directly to the source code (as I had originally suggested), but that means that any future updates and improvement to the Contract module would need to get added back into your fork of the module manually. This is definitely not a recommended approach, and one that I believe most users will naturally avoid anyway.</p>
<p>Rather, creating a "wrapper module" which somehow applies itself on top of the existing SRML Contract module, but allows for additional logic to be added, would be the best here. It would create clear separation between the vanilla module and the changes made by the end user, and would allow for the module to automatically stay up to date with the latest changes to Substrate.</p>
<p>So how would we do this?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-sudo-contract">Creating Sudo Contract<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#creating-sudo-contract" class="hash-link" aria-label="Direct link to Creating Sudo Contract" title="Direct link to Creating Sudo Contract">​</a></h2>
<p>I have created a Substrate runtime module called <a href="https://github.com/shawntabrizi/sudo-contract" target="_blank" rel="noopener noreferrer"><code>sudo-contract</code></a> which, as suggested, wraps the SRML Contract module, and provides a simple example on how you might execute similar wrapper modules.</p>
<p>As the name implies, <code>sudo-contract</code> uses both the SRML Sudo module and the SRML Contract module to make it so that only the "Sudo key" can put contract code on the blockchain. We did not change any other logic though, so there are no limits on who can deploy or call an instance of this smart contract. This combination of authorization to <code>put_code</code>, with open access to <code>create</code> and <code>call</code> enables for some practical use cases.</p>
<p>For example, imagine a DeFi (decentralized finance) platform controlled by a trusted smart contract development team like <a href="https://github.com/OpenZeppelin" target="_blank" rel="noopener noreferrer">OpenZeppelin</a>. This team would be able to provide a number of standardized, audited, and safe contracts for their users like an ICO contract, ERC-20 Contract, Multi-Signature Contract, etc... Users of this platform can choose from any of the standard contracts provided by the authorized team, and make their own instance of it for their needs.</p>
<p>With <code>sudo-contract</code>, this team would be able to tell their users that all smart contracts on their blockchain have been created and audited by their team. Thus, users can feel safe that there is no malicious code, backdoors, or generally broken contracts when using this platform.</p>
<p>This could provide a safer, and more consistent experience to all parties trying to take part in a larger decentralized financial system. Hopefully, you can imagine that the same can be done for other classes of smart contracts too!</p>
<p>So now that you are convinced of the utility of such a module, let's show you how you can build it.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-a-module">Wrapping a Module<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#wrapping-a-module" class="hash-link" aria-label="Direct link to Wrapping a Module" title="Direct link to Wrapping a Module">​</a></h3>
<p>The <code>sudo-contract</code> module needs to provide all the same functionalities of the SRML Contract module, but have additional authorization checks around just one of the functions: <code>put_code</code>.</p>
<p>As Sergei suggested, the best way to approach this is to write a "wrapper module", which basically means a module which exposes the same extrinsic calls as the Contract module and forwards those calls to the real Contract module.</p>
<p>For example, the Contract module exposes 4 dispatchable functions:</p>
<ul>
<li><code>update_schedule</code></li>
<li><code>put_code</code></li>
<li><code>create</code></li>
<li><code>call</code></li>
</ul>
<blockquote>
<p><strong>Note:</strong> We do not include special functions like <code>on_initialize</code>, <code>on_finalize</code>, <code>deposit_event</code>, etc... Only the ones which can be called via an extrinsic.</p>
</blockquote>
<p>In our <code>sudo-contract</code> module, one of these "wrapper functions" will look like this:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// Simply forwards to the `create` function in the Contract module.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[compact]</span><span class="token plain"> endowment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">BalanceOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[compact]</span><span class="token plain"> gas_limit</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Gas</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    code_hash</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">CodeHash</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">u8</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> endowment</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> gas_limit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> code_hash</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>All I have done here is copy the function signature for the <code>create</code> function, and then passed those parameters to the real <code>&lt;contract::Module&lt;T&gt;&gt;::create</code> function. You would do the same thing with each function until you have essentially created a "wrapped" module!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-authorization-checks">Adding Authorization Checks<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#adding-authorization-checks" class="hash-link" aria-label="Direct link to Adding Authorization Checks" title="Direct link to Adding Authorization Checks">​</a></h3>
<p>Creating a wrapper module like we have done above is not very useful as is, but using this pattern, we now have the ability to execute some additional logic before or after the main SRML Contract functions!</p>
<p>Our goal here is to add some additional authorization logic before the <code>put_code</code> function, where only the Sudo key can call this function. That is actually really easy and can be done like so:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// Checks that sender is the Sudo `key` before forwarding to `put_code` in the Contract module.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">put_code</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[compact]</span><span class="token plain"> gas_limit</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Gas</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    code</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">u8</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sender </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensure_signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">ensure!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sender </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">sudo</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">key</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Sender must be the Sudo key to put_code"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> new_origin </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">system</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">RawOrigin</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sender</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">put_code</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">new_origin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> gas_limit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, we simply call into the Sudo module's storage to retrieve who the current Sudo key is, and check that the sender matches that key. If that check fails, we never make the downstream call to the SRML Contract module to actually put the code on the chain. Instead the module will return a runtime error:</p>
<blockquote>
<p>Sender must be the Sudo key to put_code</p>
</blockquote>
<p>and nothing will happen. It really is that easy!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-details">Other Details<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#other-details" class="hash-link" aria-label="Direct link to Other Details" title="Direct link to Other Details">​</a></h3>
<p>I won't go into a line by line instruction of creating the module, but there a few details I want to call out so that even new runtime developers can understand how some things work.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="accessing-other-modules">Accessing Other Modules<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#accessing-other-modules" class="hash-link" aria-label="Direct link to Accessing Other Modules" title="Direct link to Accessing Other Modules">​</a></h4>
<p>In my wrapper module, I have dependencies on both the SRML Contract module and SRML Sudo module. You can see in my code, I reference both modules to either call their functions or to read their storage. I am able to do this because I have imported these dependencies in my module's <code>Cargo.toml</code> file, and I have inherited the modules' traits into my own:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">trait</span><span class="token plain"> </span><span class="token type-definition class-name">Trait</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Trait</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">sudo</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Trait</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You will need to do this for any modules you wrap, and in our case this also implies that your runtime must use exactly these two modules.</p>
<p>We may look to revisit a wrapper module which does not depend on any specific module, but just one that has the traits, functions, and types expected. You could imagine this would be useful if another Contract module was released with alternative implementation details, but ultimately the same API. We would want our wrapper module to work for that module too!</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="calling-private-dispatchable-functions">Calling Private Dispatchable Functions<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#calling-private-dispatchable-functions" class="hash-link" aria-label="Direct link to Calling Private Dispatchable Functions" title="Direct link to Calling Private Dispatchable Functions">​</a></h4>
<p>A critical detail which makes this solution work so "easily" is that the dispatchable functions for the Contract module are marked <code>pub</code>, which means I can call them directly from my wrapper module. However, this is not a requirement for making a wrapper module since all dispatchable functions are made explicitly public through the <code>Call</code> type. What this really means is that your module can always "dispatch" a transaction to another module's function!</p>
<p>Here is an example of what that might look like:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Call</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">update_schedule</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">schedule</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">is_ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is exactly the same as calling the function directly, so no extra transactions will be recorded, no extra fees taken, etc...</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-sudo-contract">Adding Sudo Contract<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#adding-sudo-contract" class="hash-link" aria-label="Direct link to Adding Sudo Contract" title="Direct link to Adding Sudo Contract">​</a></h2>
<p>So I have already done the work for you to create the <code>sudo-contract</code> wrapper module. Now I want to share with you some of the nuances of adding it to your smart contract enabled runtime.</p>
<blockquote>
<p><strong>Note:</strong> If you want to add the <code>sudo-contract</code> module to your runtime, you should follow the <a href="https://github.com/shawntabrizi/sudo-contract" target="_blank" rel="noopener noreferrer">README</a> included with the module, since the next couple of sections may leave out smaller details.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="substrate-dependencies">Substrate Dependencies<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#substrate-dependencies" class="hash-link" aria-label="Direct link to Substrate Dependencies" title="Direct link to Substrate Dependencies">​</a></h3>
<p>I won't go into details about the challenges in creating a Substrate module as its own Rust library, but one thing you will need to be conscious of is the specific Substrate dependencies used by your runtime code.</p>
<p>In the <code>v1.0</code> branch of the <code>sudo-contract</code> module, I point all Substrate dependencies to the <code>v1.0</code> branch of Substrate. This means your runtime must <strong>also</strong> have all of its substrate dependencies point to the <code>v1.0</code> branch too. If your runtime is pointing to a specific git commit or a different branch, you will either need to update your runtime code or fork my wrapper module and update it to use exactly the same dependency.</p>
<p>You will also need to be sure to add this module to your runtime's <code>std</code> feature, so that it will use <code>std</code> features when building the native binaries for your runtime.</p>
<p>More details can be found in README for the <code>sudo-contract</code> module and the HOWTO of the <a href="https://github.com/shawntabrizi/substrate-module-template" target="_blank" rel="noopener noreferrer"><code>substrate-module-template</code></a>, which was used to create the <code>sudo-contract</code> module.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tricking-the-polkadot-ui">Tricking the Polkadot UI<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#tricking-the-polkadot-ui" class="hash-link" aria-label="Direct link to Tricking the Polkadot UI" title="Direct link to Tricking the Polkadot UI">​</a></h3>
<p>The next challenge we will overcome is how to trick the Polkadot UI into thinking our <code>sudo-contract</code> module, with the same public API, is the "real" Contract module of my chain.</p>
<p>The Polkadot UI is actually really simple when it comes to enabling and routing logic to module specific UI like the Contract module. All it does is check in the runtime metadata that the <code>name</code> of the module matches what it expects.</p>
<p>This metadata value is generated from the Rust dependency name chosen when importing the module into your project. So in the case of the SRML Contract module, you would normally import the module like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[dependencies.contract]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default_features = false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git = 'https://github.com/paritytech/substrate.git'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">package = 'srml-contract'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">branch = 'v1.0'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Which would give it <code>"name": "contract"</code> in the metadata, which is exactly what the UI expects. So, we would be able to trick the UI by taking advantage of this and importing our module with the <code>contract</code> dependency name, and renaming the SRML Contract module:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[dependencies.srml-contract]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default_features = false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git = 'https://github.com/paritytech/substrate.git'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">package = 'srml-contract'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">branch = 'v1.0'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[dependencies.contract]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default_features = false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git = 'https://github.com/shawntabrizi/sudo-contract.git'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">package = 'sudo-contract'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">branch = 'v1.0'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p><strong>Note</strong> that we imported our <code>sudo-contract</code> package from the <code>v1.0</code> branch, and our Substrate based depdencies are also coming from their <code>v1.0</code> branch, as described in the previous section.</p>
</blockquote>
<p>After making this change and updating our <code>std</code> feature appropriately, we will also need to update our runtime's <code>lib.rs</code> file.</p>
<p>Any references to the <code>contract</code> dependency which is intended for <code>srml-contract</code> will need to be updated, like the trait implementations:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// This is the srml-contract Trait</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">srml_contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Trait</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">Runtime</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">Currency</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Balances</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">Call</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Call</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">Event</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Event</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">Gas</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Note the updated names in these lines too!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">DetermineContractAddress</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">srml_contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">SimpleAddressDeterminator</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Runtime</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">ComputeDispatchFee</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">srml_contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">DefaultDispatchFeeComputor</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Runtime</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">TrieIdGenerator</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">srml_contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">TrieIdFromParentCounter</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Runtime</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">GasPayment</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// This is the sudo-contract Trait</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Trait</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">Runtime</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With these changes, the Polkadot UI should think that the <code>sudo-contract</code> module is indeed the regular Contract module, and provide you with a great user experience for interacting with Smart Contracts, without any additional work from your side.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="making-srml-contract-un-callable">Making SRML Contract "Un-Callable"<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#making-srml-contract-un-callable" class="hash-link" aria-label="Direct link to Making SRML Contract &quot;Un-Callable&quot;" title="Direct link to Making SRML Contract &quot;Un-Callable&quot;">​</a></h3>
<p>The <code>sudo-contract</code> module would be pretty useless if it was possible to still call the contract module directly, bypassing this authorization check we just added. However, the whole point of this project is to keep the original module around so we aren't forking things.</p>
<p>Fortunately, it seems that Substrate was designed to be so modular and customizable that this scenario is already supported! <a href="https://github.com/paritytech/substrate/pull/2399#issuecomment-487597233" target="_blank" rel="noopener noreferrer">From Gav</a>:</p>
<blockquote>
<p>You can introduce a module entry into the runtime without the <code>Call</code> functionality which will prevent it from being routed to in a transaction.</p>
</blockquote>
<p>What he is saying here is that whereas we would normally import our SRML Contract module into the <code>construct_runtime!</code> macro like so:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Contract</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">srml_contract</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Module</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Call</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Storage</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Config</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Event</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can simply omit the <code>Call</code> type, and it will make our module "un-callable". This does not affect any of the other basic functionalities of our runtime like the module storage, module events, and even genesis configuration.</p>
<p>Then, when adding our <code>sudo-contract</code> module, we <em>do</em> include the <code>Call</code> type, but nothing else since our wrapper module does not have any storage or events of its own (but it could so don't think this is a limitation). Here is what our final <code>construct_runtime!</code> import would look like for these two modules:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Contract: srml_contract::{Module, Storage, Config&lt;T&gt;, Event&lt;T&gt;},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SudoContract: contract::{Module, Call},</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="testing-sudo-contract">Testing Sudo Contract<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#testing-sudo-contract" class="hash-link" aria-label="Direct link to Testing Sudo Contract" title="Direct link to Testing Sudo Contract">​</a></h2>
<p>So now that we have successfully added the <code>sudo-contract</code> module to our runtime, let's take a look at what happens when we use it.</p>
<p>I have a <a href="https://github.com/shawntabrizi/substrate-package/tree/sudo-contract" target="_blank" rel="noopener noreferrer"><code>sudo-contract</code> branch</a> in the <code>substrate-package</code> which you can use to run this wrapper module yourself, or double check the steps <a href="https://github.com/shawntabrizi/substrate-package/commit/c0c1e4604db279c5940f528c378575fa2c5aaf7a" target="_blank" rel="noopener noreferrer">in this PR</a> for adding it to your own runtime.</p>
<p>We build the Wasm runtime and the native binaries to start our node:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./scripts/build.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cargo build --release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./target/release/node-template purge-chain --dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./target/release/node-template --dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When we run the node, we can interact with it using the Polkadot UI. We can immediately see that the UI recognizes that we have the Contract module included in our runtime:</p>
<p><img decoding="async" loading="lazy" alt="Screenshot of the Polkadot UI with Contract Tab" src="https://shawntabrizi.com/assets/images/sudo-contract-polkadot-ui-8de34e2d05e79d073f5217f4efa7d194.png" width="2244" height="1400" class="img_ev3q"></p>
<p>If we dig a little deeper into the details, we can see that the extrinsics section uses our <code>sudo-contract</code> version of the Contract module functions:</p>
<p><img decoding="async" loading="lazy" alt="Screenshot of the Contract Extrinsics" src="https://shawntabrizi.com/assets/images/sudo-contract-call-7a29538531aa49bd1436e51a97a513a4.png" width="2244" height="1400" class="img_ev3q"></p>
<blockquote>
<p>Notice that the comments with each function are the ones that we wrote in the wrapper module, and there are no other "contract" modules which can be called.</p>
</blockquote>
<p>Finally, if we look at the chain state tab, we will see that the UI and our runtime still manages the full storage of the SRML Contract module and that our module has no storage itself:</p>
<p><img decoding="async" loading="lazy" alt="Screenshot of the Contract Extrinsics" src="https://shawntabrizi.com/assets/images/sudo-contract-chain-state-01099038e8220bdb726769dfe8aa058a.png" width="2244" height="1400" class="img_ev3q"></p>
<p>So really we have set up our runtime exactly as we want.</p>
<p>Let's now try to use the Contract UI to create a new contract on our blockchain!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="putting-code-on-the-chain">Putting Code On the Chain<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#putting-code-on-the-chain" class="hash-link" aria-label="Direct link to Putting Code On the Chain" title="Direct link to Putting Code On the Chain">​</a></h3>
<p>If our <code>sudo-contract</code> module is really working, then only the Sudo key will be able to put new contracts onto the blockchain. Since we are running a <code>--dev</code> chain, Alice is set as the Sudo key at the genesis of our blockchain.</p>
<p>So let's first try to put a new smart contract with <em>another</em> account. Let's fund Bob with enough units to deploy a contract, and try to upload the standard "flipper" contract. Here is what we will see in the UI:</p>
<p><img decoding="async" loading="lazy" alt="UI error message when Bob tries to upload contract" src="https://shawntabrizi.com/assets/images/sudo-contract-ui-error-60222c4ade300ecddbb0aadddbca5bcc.png" width="2244" height="1400" class="img_ev3q"></p>
<p>When we look at our node terminal to see what "went wrong" we find:</p>
<p><img decoding="async" loading="lazy" alt="Terminal error message when Bob tries to upload contract" src="https://shawntabrizi.com/assets/images/sudo-contract-terminal-error-013dfdb2ac8b2f1864ef3f703b96e6c6.png" width="1392" height="954" class="img_ev3q"></p>
<blockquote>
<p>"Runtime: Sender must be the Sudo key to put_code"</p>
</blockquote>
<p>So our wrapper module is indeed gating access to the underlying SRML Contract module.</p>
<p>Now we will try with Alice:</p>
<p><img decoding="async" loading="lazy" alt="Success when Alice tries to upload contract" src="https://shawntabrizi.com/assets/images/sudo-contract-ui-success-4acdcfe0aa2ace9c15c14e5f91d1a198.png" width="2244" height="1400" class="img_ev3q"></p>
<p>A success! Note that the <code>CodeStored</code> event which is emitted comes from <code>srmlContract</code>, which means ultimately the SRML Contract module is doing all of the work here. Our wrapper module is only doing the minimal it needs to in order to gate access. After this point, Bob or any other user can now create an instance of this contract.</p>
<p>We have successfully extended the SRML Contract module without making any forks or direct changes!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next Steps<a href="https://shawntabrizi.com/blog/substrate/extending-substrate-runtime-modules/#next-steps" class="hash-link" aria-label="Direct link to Next Steps" title="Direct link to Next Steps">​</a></h2>
<p>While this post touches on a number of nuanced details about how we use Substrate to enable this end to end scenario, the big picture idea here should still be quite simple. You have now learned one approach to extending other Substrate runtime modules, and the possibilities with this are endless.</p>
<p>Here are some ideas you could try to hack on:</p>
<ul>
<li>Wrapper for the SRML Contract module which keeps track of all contracts that are uploaded with some additional metadata.</li>
<li>Wrapper for the SRML Balances module which adds a "pause" functionality to the blockchain, preventing calls to <code>transfer</code>.</li>
<li>Wrapper to the SRML Contract module which adds the ability for the Sudo key to "update" the Wasm code of a contract. (This will hopefully be the topic of a future post).</li>
</ul>
<p>Also, this implementation of <code>sudo-contract</code> is not perfect. If you wanted to improve it, consider adding any of the following:</p>
<ul>
<li>Adding module storage and some basic functions which allow you to control "privileged" accounts and remove the dependency on SRML Sudo.</li>
<li>Abstract away direct dependency on the SRML Contract module, and have the module work for wrapping any module which exposes the same dispatchable functions.</li>
<li>Add a second tier of authorization for <code>create</code> so that only some users can <code>put_code</code>, a larger (but still limited) set of users can <code>create</code>, but then all users can <code>call</code>.</li>
</ul>
<p>I hope that someone uses the <code>sudo-contract</code> module in their production blockchain. If you do end up using it, please let me know!</p>
<p>As always, if you like the content I produce and want to help me keep doing it, take a look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donation page</a>.</p>]]></content:encoded>
            <category>runtime</category>
            <category>module</category>
            <category>rust</category>
            <category>sudo</category>
            <category>contracts</category>
            <category>ink</category>
        </item>
        <item>
            <title><![CDATA[Adding Fees to Your Substrate Runtime Module]]></title>
            <link>https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/</link>
            <guid>https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/</guid>
            <pubDate>Mon, 27 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I will show you how you can easily add a fee for calling a function within your Substrate runtime module.]]></description>
            <content:encoded><![CDATA[<h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post-i-will-show-you-how-you-can-easily-add-a-fee-for-calling-a-function-within-your-substrate-runtime-module">In this post, I will show you how you can easily add a fee for calling a function within your Substrate runtime module.<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#in-this-post-i-will-show-you-how-you-can-easily-add-a-fee-for-calling-a-function-within-your-substrate-runtime-module" class="hash-link" aria-label="Direct link to In this post, I will show you how you can easily add a fee for calling a function within your Substrate runtime module." title="Direct link to In this post, I will show you how you can easily add a fee for calling a function within your Substrate runtime module.">​</a></h5>
<p>When using Substrate, you are afforded the flexibility to completely control the fee system within your runtime.</p>
<p>By default, a <a href="https://substrate.dev/rustdocs/v1.0/srml_balances/struct.Module.html#method.transaction_base_fee" target="_blank" rel="noopener noreferrer"><code>transaction_base_fee</code></a> is added to every transaction you make to your runtime. However, this blanket base fee does NOT take into account anything related to the complexity or storage used as a result of the transaction.</p>
<p>Substrate makes the following recommendation in the <code>Example</code> module:</p>
<blockquote>
<p>Ensure that calls into each of these [functions] execute in a time, memory and using storage space <strong>proportional to any costs paid for by the caller</strong> or otherwise the difficulty of forcing the call to happen.</p>
</blockquote>
<p>Thus, if your runtime module exposes functions which are heavy in computation or storage needs, you should be sure to add some <em>additional</em> fee on top of the base fee to ensure your blockchain is not attackable.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-simple-fee">A Simple Fee<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#a-simple-fee" class="hash-link" aria-label="Direct link to A Simple Fee" title="Direct link to A Simple Fee">​</a></h2>
<p>There are a lot of complicated methods you can use for calculating fees for functions. You can take a look at the <a href="https://github.com/paritytech/substrate/tree/v1.0/srml/contract" target="_blank" rel="noopener noreferrer">Contract module</a> for an example of that.</p>
<p>For this example, I will be showing you the most simple implementation of a fee which will be inline with the rest of your module code.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="withdrawing-from-balance">Withdrawing From Balance<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#withdrawing-from-balance" class="hash-link" aria-label="Direct link to Withdrawing From Balance" title="Direct link to Withdrawing From Balance">​</a></h3>
<p>The first tool we will use is the <a href="https://substrate.dev/rustdocs/v1.0/srml_support/traits/trait.Currency.html#tymethod.withdraw" target="_blank" rel="noopener noreferrer"><code>withdraw</code> function</a> provided by the <code>Currency</code> trait in the Balances module:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">withdraw</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    who</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reason</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">WithdrawReason</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    liveness</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ExistenceRequirement</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">NegativeImbalance</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token lifetime-annotation symbol" style="color:#36acaa">'static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>Removes some free balance from who account for reason if possible. If liveness is KeepAlive, then no less than ExistentialDeposit must be left remaining.</p>
<p>This checks any locks, vesting, and liquidity requirements. If the removal is not possible, then it returns Err.</p>
</blockquote>
<p>Withdraw is designed to be quite flexible. As you can see, it allows you to specify the reason for a withdrawal. In this case, we are taking a <em>fee</em>:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// use support::traits::WithdrawReason</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">WithdrawReason</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Fee</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It can even make sure that removing these funds will not kill an account. For our fee system, this second point will be particularly important since we do not want users to accidentally destroy their account paying for fees!</p>
<p>For this, we simply pass:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// use support::traits::ExistenceRequirement</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">ExistenceRequirement</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">KeepAlive</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we can really safely charge fees to a user upfront and let the logic of the Balances module handle the rest. For ease of reusability, we will create an internal function which can be called within our module to charge a fee to a user:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Trait</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">pay_fee</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> _ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">balances</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token class-name">Currency</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">_</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">withdraw</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      amount</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">WithdrawReason</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Fee</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">ExistenceRequirement</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">KeepAlive</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This function will either propagate an error from taking funds from the user, or will complete successfully and return <code>Ok(())</code>. We can then handle the error within our runtime.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="imbalance">Imbalance<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#imbalance" class="hash-link" aria-label="Direct link to Imbalance" title="Direct link to Imbalance">​</a></h4>
<p>One thing we glazed over at this point is the return type of the <code>withdraw</code> function:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">NegativeImbalance</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token lifetime-annotation symbol" style="color:#36acaa">'static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you can see, it returns a <code>NegativeImbalance</code>, which is probably a type you have never seen before. Without going into <em>too</em> much detail, the <a href="https://github.com/paritytech/substrate/pull/2048" target="_blank" rel="noopener noreferrer">Imbalance system</a> within the Balances module is a way to ensure that the sum of all funds across all accounts is equal to the <code>TotalIssuance</code> managed by the Balances module.</p>
<p>So fortunately, this imbalances system <a href="https://stackoverflow.com/questions/56341343/is-handling-the-imbalance-type-mandatory-after-withdraw-or-deposit" target="_blank" rel="noopener noreferrer">does all of the hard work for us!</a> All we need to do is ignore this return type and we can be happy that the <code>TotalIssuance</code> is updated and this value is actually burned.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="charging-a-fee">Charging a Fee<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#charging-a-fee" class="hash-link" aria-label="Direct link to Charging a Fee" title="Direct link to Charging a Fee">​</a></h3>
<p>Now that we have created our <code>pay_fee</code> function, we need to call it within our runtime module. We will emulate a fixed fee system similar to the low level OPCODEs provided by Ethereum, where each function in our module can define some fixed cost to call the function.</p>
<p>This can be done easily by simply writing a function like so:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">decl_module!</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Trait</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">Call</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> origin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Origin</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">do_something</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> who </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensure_signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> fee </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1337</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">pay_fee</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fee</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Do stuff after fee is paid successfully...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This function checks whether or not <code>pay_fee</code> returns successfully, and if not, it propagates the error up and stops execution of the runtime function.</p>
<p>In the situation where a user is unable to <code>withdraw</code> funds, we will see the error message:</p>
<blockquote>
<p>Runtime: too few free funds in account</p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="converting-rust-primitives-to-substrate-specific-types">Converting Rust Primitives to Substrate Specific Types<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#converting-rust-primitives-to-substrate-specific-types" class="hash-link" aria-label="Direct link to Converting Rust Primitives to Substrate Specific Types" title="Direct link to Converting Rust Primitives to Substrate Specific Types">​</a></h4>
<p>You may notice that <code>pay_fee</code> and <code>withdraw</code> expect <code>fee</code> to be of type <code>T::Balance</code>.</p>
<p>Remember that Substrate is written to be <strong>very</strong> generic, so in the context of your runtime module, there are minimal assumptions about your blockchain's types.</p>
<p>For example, using this generic type system, you would be able to define one Substrate blockchain which uses <code>u64</code> for the <code>Balance</code> type, another which uses <code>u128</code>, and another which uses <code>u32</code>. Because we use this generic type system for all the core blockchain types, the same module can be used out of the box across all of these different blockchains!</p>
<p>But this flexibility also means you need to tell the Rust compiler what to do when trying to handle incompatible situations.</p>
<p>For example, what should the module do if we try to put a <code>u128</code> value into a <code>Balance</code> type which is represented as <code>u64</code>? Or if we try to convert that same balance to a <code>u32</code>?</p>
<p>Substrate <a href="https://stackoverflow.com/questions/56081117/how-do-you-convert-between-substrate-specific-types-and-rust-primitive-types" target="_blank" rel="noopener noreferrer">provides implementations</a> of <code>From</code>/<code>TryFrom</code> and <code>Into</code>/<code>TryInto</code> to handle such scenarios. The only assumption being made here is that all values are at least a <code>u32</code>.</p>
<p>These traits guarantee that the underlying types implement functions which will attempt to convert between types if possible.</p>
<p>Thus, if we ever need to convert some <code>u32</code> value to a <code>Balance</code>, we can simply call:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> my_balance</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> my_u32</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the situation you need to convert some larger value, you will need to handle the situation where the <code>Balance</code> type is not compatible with type to be converted:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">u64_to_balance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">input</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Option</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    input</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">try_into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that this returns an <code>Option</code>, thus your subsequent runtime logic needs to decide what to do when the conversion fails and the returned value is <code>None</code>.</p>
<p>Substrate also provides a <code>saturated_into</code> function which will always succeed, but will coerce your value into the type you want through saturation if necessary:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">u64_to_balance_saturated</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">input</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    input</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">saturated_into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>However, it is very important that you be conscious when you do such things. From <a href="https://twitter.com/gavofyork" target="_blank" rel="noopener noreferrer">Gav</a>:</p>
<blockquote>
<p><code>SaturatedConversion</code> (<code>saturated_into</code> and <code>saturated_from</code>) should not be used unless you know what you're doing, you've thought and considered all options and your use-case implies that saturation is fundamentally correct. The only time I imagine this is the case is deep in runtime arithmetic where you are logically certain it will not overflow, but can't provide a proof because it would depend on consistent pre-existing state.</p>
</blockquote>
<p>Remember, as a runtime developer, Substrate provides you with numerous tools, but it is ultimately up to you to determine how to use them.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-minimal-complete-verifiable-example-module">A Minimal, Complete, Verifiable Example Module<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#a-minimal-complete-verifiable-example-module" class="hash-link" aria-label="Direct link to A Minimal, Complete, Verifiable Example Module" title="Direct link to A Minimal, Complete, Verifiable Example Module">​</a></h2>
<p>If you want to try out this simple fee system on your own Substrate chain, you can simply add a module like this to your runtime:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">support</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">decl_module</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">dispatch</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token namespace" style="opacity:0.7">traits</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Currency</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ExistenceRequirement</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">WithdrawReason</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">system</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">ensure_signed</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// v1.0 branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// use runtime_primitives::traits::As;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">trait</span><span class="token plain"> </span><span class="token type-definition class-name">Trait</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">balances</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Trait</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property" style="color:#36acaa">decl_module!</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Trait</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">Call</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> origin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Origin</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">do_something</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> who </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensure_signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> fee </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1337</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// v1.0 branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// let fee = T::Balance::sa(1337);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">pay_fee</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fee</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Do stuff after fee is paid successfully...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Trait</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">pay_fee</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> _ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">balances</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Module</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token class-name">Currency</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">_</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">withdraw</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">who</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      amount</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">WithdrawReason</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Fee</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">ExistenceRequirement</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">KeepAlive</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we run a local node, we can interact with the module through the <a href="https://polkadot.js.org/apps/" target="_blank" rel="noopener noreferrer">Polkadot UI</a>:</p>
<p><img decoding="async" loading="lazy" alt="Image of Extrinsic Tab" src="https://shawntabrizi.com/assets/images/substrate-fee-extrinsic-044a3070a671072882b287f968ad9f2e.png" width="2476" height="1500" class="img_ev3q"></p>
<p>We have funded the Bob account with 2000 units, and we are charging a fee of 1337. When we call our function the first time, everything works as expected, and the 1337 unit fee (in addition to the base transaction fee of 1 unit) is removed from the account.</p>
<p><img decoding="async" loading="lazy" alt="Image of Fee Success" src="https://shawntabrizi.com/assets/images/substrate-fee-success-8bcf960f460759e6886e9be4ac99074a.png" width="2476" height="1500" class="img_ev3q"></p>
<p>However, when Bob does not have enough funds to make a second call, they will see a failure message:</p>
<p><img decoding="async" loading="lazy" alt="Image of Fee Failure" src="https://shawntabrizi.com/assets/images/substrate-fee-fail-23d785fb776c8d3da0d50b0df6ae9b26.png" width="2476" height="1500" class="img_ev3q"></p>
<blockquote>
<p>Note though that the 1 unit base transaction fee was still removed.</p>
</blockquote>
<p>If we look at our local node terminal, we can see the reason why this transaction failed:</p>
<p><img decoding="async" loading="lazy" alt="Image of Fee Error" src="https://shawntabrizi.com/assets/images/substrate-fee-error-b0332c67341e4562a0d0812e865054f8.png" width="1512" height="536" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next Steps<a href="https://shawntabrizi.com/blog/substrate/adding-fees-to-your-substrate-runtime-module/#next-steps" class="hash-link" aria-label="Direct link to Next Steps" title="Direct link to Next Steps">​</a></h2>
<p>As mentioned, this is a very minimal and simplistic implementation of a fee system. However, this should give you the tools necessary to build your own advance fee system. Here are some cool ideas:</p>
<ul>
<li>Create some authorization layer where certain users get lower fees than the average user.</li>
<li>Allow fees to be paid using other tokens that your runtime manages.</li>
<li>Have your fee be calculated based on any input from the user. For example, if you let the user store some <code>Vec&lt;u8&gt;</code>, you can charge them some linear cost based on the length of the data.</li>
</ul>
<p>Do you have other ideas? Let me know!</p>
<p>As always, if you enjoy my content, take a quick look at my <a href="https://shawntabrizi.com/donate/" target="_blank" rel="noopener noreferrer">donation page</a> to help support future work.</p>]]></content:encoded>
            <category>runtime</category>
            <category>module</category>
            <category>rust</category>
            <category>fees</category>
            <category>balance</category>
            <category>ethereum</category>
        </item>
    </channel>
</rss>